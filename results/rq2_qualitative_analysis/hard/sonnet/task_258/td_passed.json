{
  "task_id": 258.0,
  "prompt": "### Prompt\nAfter IOI Ilya decided to make a business.  He found a social network called \"TheScorpyBook.com\". It currently has N registered users. As in any social network two users can be friends. Ilya wants the world to be as connected as possible, so he wants to suggest friendship to some pairs of users. He will suggest user u to have a friendship with user v if they are not friends yet and there is a user w who is friends of both of them. Note that u, v and w are different users. Ilya is too busy with IPO these days, so he asks you to count how many friendship suggestions he has to send over his social network.\n\u00a0\n\nInput\nThe first line contains an integer number N \u2014 the number of users in the network. Next N lines contain N characters each denoting friendship relations. j^th character if the i^th lines equals one, if users i and j are friends and equals to zero otherwise. This relation is symmetric, i.e. if user a is friend of b then b is also a friend of a.\n\u00a0\n\nOutput\nOutput a single integer \u2014 number of friendship suggestions Ilya has to send.\n\u00a0\n\nConstraints\n\n1 \u2264 N \u2264 2000\n\n\u00a0\n\nExample\nInput:\n4\n0111\n1000\n1000\n1000\n\nOutput:\n6\n\u00a0\n\nExplanation\nEach of users [2, 3, 4] should receive two friendship suggestions, while user 1 does not need any, since he already has all other users in his friend-list.\n\n### Signature\ndef solve_problem(input_str: str) -> str:\n\n### Test\nassert solve_problem(\"4\\n0111\\n1000\\n1000\\n1000\") == \"6\\n\"\nassert solve_problem(\"4\\n1111\\n1000\\n1000\\n1000\") == \"6\\n\"\nassert solve_problem(\"4\\n0111\\n1100\\n0000\\n1001\") == \"2\\n\"\nassert solve_problem(\"4\\n1111\\n1010\\n1000\\n1010\") == \"4\\n\"\nassert solve_problem(\"4\\n0011\\n0000\\n0000\\n1001\") == \"0\\n\"\nassert solve_problem(\"4\\n1111\\n1100\\n0000\\n1001\") == \"2\\n\"\nassert solve_problem(\"4\\n0110\\n1000\\n0000\\n1001\") == \"2\\n\"\nassert solve_problem(\"4\\n0011\\n1000\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0111\\n1010\\n1100\\n1000\") == \"4\\n\"\nassert solve_problem(\"4\\n1111\\n1010\\n0000\\n1010\") == \"2\\n\"\nassert solve_problem(\"4\\n0111\\n1110\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0110\\n1000\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0011\\n1100\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0111\\n1010\\n1000\\n1010\") == \"4\\n\"\nassert solve_problem(\"4\\n1011\\n0000\\n1000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n1101\\n1010\\n0000\\n1010\") == \"2\\n\"\nassert solve_problem(\"4\\n1111\\n1110\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n1111\\n1110\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n1111\\n1000\\n0000\\n1011\") == \"2\\n\"\nassert solve_problem(\"4\\n1011\\n0000\\n1000\\n1100\") == \"2\\n\"\nassert solve_problem(\"4\\n0101\\n1000\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0011\\n0000\\n0000\\n1011\") == \"0\\n\"\nassert solve_problem(\"4\\n0111\\n1110\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n1110\\n1100\\n0000\\n0001\") == \"0\\n\"\nassert solve_problem(\"4\\n1101\\n1010\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n1111\\n0000\\n0000\\n1011\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0000\\n1000\") == \"0\\n\"\nassert solve_problem(\"4\\n0011\\n0000\\n0000\\n1010\") == \"0\\n\"\nassert solve_problem(\"4\\n1110\\n1110\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n0101\\n1010\\n0100\\n1000\") == \"4\\n\"\nassert solve_problem(\"4\\n0011\\n0100\\n0000\\n1010\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0000\\n1100\") == \"0\\n\"\nassert solve_problem(\"4\\n1110\\n1100\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n0011\\n0100\\n1000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0101\\n1110\\n0000\\n1000\") == \"2\\n\"\nassert solve_problem(\"4\\n0011\\n0000\\n1001\\n1011\") == \"0\\n\"\nassert solve_problem(\"4\\n0110\\n1110\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0100\\n0000\\n1000\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0000\\n0100\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0100\\n0010\\n1000\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0100\\n0010\\n1001\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0100\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n0001\\n0000\\n0000\\n1000\") == \"0\\n\"\nassert solve_problem(\"4\\n0110\\n0000\\n1000\\n1001\") == \"2\\n\"\nassert solve_problem(\"4\\n1111\\n0000\\n0000\\n1111\") == \"0\\n\"\nassert solve_problem(\"4\\n0110\\n1100\\n0000\\n0001\") == \"0\\n\"\nassert solve_problem(\"4\\n1011\\n0000\\n1001\\n1011\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0010\\n0000\\n0000\") == \"0\\n\"\nassert solve_problem(\"4\\n1001\\n0000\\n0100\\n1000\") == \"0\\n\"",
  "llm_name": "anthropic/claude-3.5-sonnet",
  "solution": "def solve_problem(input_str: str) -> str:\n    # Parse input\n    lines = input_str.strip().split('\\n')\n    N = int(lines[0])\n    \n    # Create adjacency matrix\n    friends = [[1 if c == '1' else 0 for c in lines[i+1]] for i in range(N)]\n    \n    suggestions = 0\n    \n    # For each pair of users\n    for u in range(N):\n        for v in range(N):\n            # Skip if they are already friends or same user\n            if u == v or friends[u][v]:\n                continue\n                \n            # Check if they have a common friend\n            for w in range(N):\n                # w must be different from both u and v\n                if w != u and w != v and friends[u][w] and friends[v][w]:\n                    suggestions += 1\n                    break\n                    \n    return f\"{suggestions}\\n\"",
  "test_content": "from llm_output import solve_problem\n\ndef check(candidate):\n    assert solve_problem(\"4\\n0111\\n1000\\n1000\\n1000\") == \"6\\n\"\n    assert solve_problem(\"4\\n1111\\n1000\\n1000\\n1000\") == \"6\\n\"\n    assert solve_problem(\"4\\n0111\\n1100\\n0000\\n1001\") == \"2\\n\"\n    assert solve_problem(\"4\\n1111\\n1010\\n1000\\n1010\") == \"4\\n\"\n    assert solve_problem(\"4\\n0011\\n0000\\n0000\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1111\\n1100\\n0000\\n1001\") == \"2\\n\"\n    assert solve_problem(\"4\\n0110\\n1000\\n0000\\n1001\") == \"2\\n\"\n    assert solve_problem(\"4\\n0011\\n1000\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0111\\n1010\\n1100\\n1000\") == \"4\\n\"\n    assert solve_problem(\"4\\n1111\\n1010\\n0000\\n1010\") == \"2\\n\"\n    assert solve_problem(\"4\\n0111\\n1110\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0110\\n1000\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0011\\n1100\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0111\\n1010\\n1000\\n1010\") == \"4\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n1000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n1101\\n1010\\n0000\\n1010\") == \"2\\n\"\n    assert solve_problem(\"4\\n1111\\n1110\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n1111\\n1110\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1111\\n1000\\n0000\\n1011\") == \"2\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n1000\\n1100\") == \"2\\n\"\n    assert solve_problem(\"4\\n0101\\n1000\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0011\\n0000\\n0000\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n0111\\n1110\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1110\\n1100\\n0000\\n0001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1101\\n1010\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n1111\\n0000\\n0000\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0011\\n0000\\n0000\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n1110\\n1110\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0101\\n1010\\n0100\\n1000\") == \"4\\n\"\n    assert solve_problem(\"4\\n0011\\n0100\\n0000\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0000\\n1100\") == \"0\\n\"\n    assert solve_problem(\"4\\n1110\\n1100\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0011\\n0100\\n1000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0101\\n1110\\n0000\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n0011\\n0000\\n1001\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n0110\\n1110\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0100\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0000\\n0100\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0100\\n0010\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0100\\n0010\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0100\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0110\\n0000\\n1000\\n1001\") == \"2\\n\"\n    assert solve_problem(\"4\\n1111\\n0000\\n0000\\n1111\") == \"0\\n\"\n    assert solve_problem(\"4\\n0110\\n1100\\n0000\\n0001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n1001\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0010\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0100\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0111\\n0000\\n0000\\n1111\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0010\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0110\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n0100\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n0000\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1110\\n1110\\n0000\\n0001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1110\\n1110\\n0001\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0011\\n0100\\n0000\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n0011\\n0000\\n1001\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0010\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0100\\n0010\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0100\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n1001\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0010\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0010\\n0100\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0011\\n0100\\n1001\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n1000\\n0000\\n0010\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1011\\n0100\\n1001\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0010\\n0000\\n0100\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0011\\n0100\\n1000\") == \"2\\n\"\n    assert solve_problem(\"4\\n1000\\n0000\\n0010\\n0100\") == \"0\\n\"\n    assert solve_problem(\"4\\n0111\\n1000\\n1001\\n1010\") == \"4\\n\"\n    assert solve_problem(\"4\\n1011\\n0000\\n0000\\n1011\") == \"0\\n\"\n    assert solve_problem(\"4\\n0101\\n1010\\n0000\\n1001\") == \"2\\n\"\n    assert solve_problem(\"4\\n0101\\n1110\\n0000\\n1010\") == \"2\\n\"\n    assert solve_problem(\"4\\n1001\\n0100\\n0000\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n0000\\n0100\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0010\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1101\\n0000\\n0000\\n1111\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n0000\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0110\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0000\\n0100\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n0010\\n0000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0000\\n0000\\n0010\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0100\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1001\\n0010\\n0100\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1011\\n0100\\n1011\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0010\\n0000\\n0101\") == \"0\\n\"\n    assert solve_problem(\"4\\n0101\\n1100\\n0000\\n1010\") == \"2\\n\"\n    assert solve_problem(\"4\\n0001\\n0010\\n0000\\n1001\") == \"0\\n\"\n    assert solve_problem(\"4\\n1101\\n0000\\n0000\\n1101\") == \"0\\n\"\n    assert solve_problem(\"4\\n0001\\n0000\\n1000\\n0100\") == \"0\\n\"\n    assert solve_problem(\"4\\n0000\\n0000\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1000\\n0010\\n0000\\n0101\") == \"0\\n\"\n    assert solve_problem(\"4\\n1111\\n0000\\n0000\\n1101\") == \"0\\n\"\n    assert solve_problem(\"4\\n0111\\n0000\\n0000\\n1101\") == \"0\\n\"\n    assert solve_problem(\"4\\n0010\\n1000\\n0000\\n0001\") == \"0\\n\"\n    assert solve_problem(\"4\\n0010\\n0100\\n0000\\n1000\") == \"0\\n\"\n    assert solve_problem(\"4\\n1101\\n1000\\n0000\\n1010\") == \"2\\n\"\n    assert solve_problem(\"4\\n0000\\n0000\\n0000\\n1010\") == \"0\\n\"\n    assert solve_problem(\"4\\n1100\\n1110\\n0000\\n0000\") == \"0\\n\"\n\ncheck(solve_problem)",
  "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 3, \"difficulty_label\": \"HARD\"}",
  "attempt_num": 1
}
