[
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 0,
    "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True",
    "timestamp": "2025-08-18T06:37:00.281943",
    "response_time": "5.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 1,
    "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    current_group = \"\"\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            \n            # When depth becomes 0, we've completed a balanced group\n            if depth == 0:\n                result.append(current_group)\n                current_group = \"\"\n                \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [ '(()())', '((()))', '()', '((())()())' ]\nassert candidate('() (()) ((())) (((())))') == [ '()', '(())', '((()))', '(((())))' ]",
    "timestamp": "2025-08-18T06:37:03.718551",
    "response_time": "3.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 2,
    "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:\n\n### Test\nassert candidate(3.5) == 0.5",
    "timestamp": "2025-08-18T06:37:06.862102",
    "response_time": "3.14"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:\n\n### Test\nassert candidate([]) == False\nassert candidate([1, 2, -3, 1, 2, -3]) == False\nassert candidate([1, 2, -4, 5, 6]) == True",
    "timestamp": "2025-08-18T06:37:08.852944",
    "response_time": "1.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 4,
    "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    \n    # Calculate mean\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute deviations from mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate mean of absolute deviations\n    mad = sum(absolute_deviations) / len(numbers)\n    \n    return mad",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\n### Test\nassert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6",
    "timestamp": "2025-08-18T06:37:12.169840",
    "response_time": "3.31"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 5,
    "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n### Test\nassert candidate([], 7) == []",
    "timestamp": "2025-08-18T06:37:15.735339",
    "response_time": "3.56"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 6,
    "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
    "timestamp": "2025-08-18T06:37:19.175027",
    "response_time": "3.44"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []\nassert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
    "timestamp": "2025-08-18T06:37:21.274875",
    "response_time": "2.10"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 8,
    "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (total_sum, product)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\n### Test\nassert candidate([]) == (0, 1)\nassert candidate([1, 1, 1]) == (3, 1)",
    "timestamp": "2025-08-18T06:37:25.052213",
    "response_time": "3.77"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []\nassert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]",
    "timestamp": "2025-08-18T06:37:27.703316",
    "response_time": "2.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 10,
    "solution": "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            # Get the prefix before palindromic suffix\n            prefix = string[:i]\n            # Return original string + reversed prefix\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix found (shouldn't happen as single char is palindrome)\n    return string + string[:-1][::-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('x') == 'x'",
    "timestamp": "2025-08-18T06:37:31.691190",
    "response_time": "3.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 11,
    "solution": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for bit_a, bit_b in zip(a, b):\n        result += '1' if bit_a != bit_b else '0'\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:\n\n### Test\nassert candidate('111000', '101010') == '010010'",
    "timestamp": "2025-08-18T06:37:34.107269",
    "response_time": "2.41"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 12,
    "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:\n\n### Test\nassert candidate([]) == None",
    "timestamp": "2025-08-18T06:37:36.365512",
    "response_time": "2.26"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 13,
    "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n### Test\nassert candidate(3, 7) == 1\nassert candidate(10, 15) == 5",
    "timestamp": "2025-08-18T06:37:38.782277",
    "response_time": "2.41"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 14,
    "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:\n\n### Test\nassert candidate('') == []",
    "timestamp": "2025-08-18T06:37:42.000906",
    "response_time": "3.21"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 15,
    "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:\n\n### Test\nassert candidate(0) == '0'",
    "timestamp": "2025-08-18T06:37:45.101920",
    "response_time": "3.10"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 16,
    "solution": "def count_distinct_characters(string: str) -> int:\n    if not string:\n        return 0\n    return len(set(string.lower()))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:\n\n### Test\nassert candidate('') == 0\nassert candidate('abcde') == 5",
    "timestamp": "2025-08-18T06:37:47.946080",
    "response_time": "2.84"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 17,
    "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        return []\n        \n    result = []\n    notes = music_string.split()\n    \n    for note in notes:\n        count = 0\n        for char in note:\n            if char == 'o':\n                count = 1\n            elif char == '-':\n                count += 1\n        if count > 0:\n            result.append(count)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:\n\n### Test\nassert candidate('') == []\nassert candidate('o o o o') == [4, 4, 4, 4]",
    "timestamp": "2025-08-18T06:37:51.189080",
    "response_time": "3.24"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 18,
    "solution": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:\n\n### Test\nassert candidate('', 'x') == 0\nassert candidate('xyxyxyx', 'x') == 4",
    "timestamp": "2025-08-18T06:37:53.716577",
    "response_time": "2.52"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 19,
    "solution": "def sort_numbers(numbers: str) -> str:\n    if not numbers:\n        return ''\n        \n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: number_map[x])\n    return ' '.join(sorted_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('three') == 'three'",
    "timestamp": "2025-08-18T06:37:58.207228",
    "response_time": "4.49"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 20,
    "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)",
    "timestamp": "2025-08-18T06:38:01.086714",
    "response_time": "2.87"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 21,
    "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # If all numbers are the same, avoid division by zero\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    # Apply linear transformation: (x - min) / (max - min)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\n### Test\nassert candidate([2.0, 49.9]) == [0.0, 1.0]\nassert candidate([100.0, 49.9]) == [1.0, 0.0]",
    "timestamp": "2025-08-18T06:38:04.429609",
    "response_time": "3.34"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 22,
    "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-18T06:38:06.795554",
    "response_time": "2.36"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 23,
    "solution": "def strlen(string: str) -> int:\n    return len(string)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:\n\n### Test\nassert candidate('') == 0",
    "timestamp": "2025-08-18T06:38:08.937498",
    "response_time": "2.14"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 24,
    "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:\n\n### Test\nassert candidate(3) == 1\nassert candidate(7) == 1",
    "timestamp": "2025-08-18T06:38:12.399448",
    "response_time": "3.46"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 25,
    "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n        \n        # Optimization: if divisor squared is greater than n,\n        # then n is prime if it's greater than 1\n        if divisor * divisor > n and n > 1:\n            factors.append(n)\n            break\n            \n    return factors",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:\n\n### Test\nassert candidate(2) == [2]\nassert candidate(4) == [2, 2]\nassert candidate(8) == [2, 2, 2]\nassert candidate(3 * 19) == [3, 19]",
    "timestamp": "2025-08-18T06:38:17.492197",
    "response_time": "5.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 26,
    "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Count occurrences of each number\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Keep only numbers that appear once\n    return [num for num in numbers if count_dict[num] == 1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-18T06:38:21.586013",
    "response_time": "4.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 27,
    "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:\n\n### Test\nassert candidate('') == ''",
    "timestamp": "2025-08-18T06:38:24.269728",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 28,
    "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:\n\n### Test\nassert candidate([]) == ''",
    "timestamp": "2025-08-18T06:38:26.648300",
    "response_time": "2.38"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 29,
    "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []",
    "timestamp": "2025-08-18T06:38:28.540366",
    "response_time": "1.89"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 30,
    "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):\n\n### Test\nassert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\nassert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]",
    "timestamp": "2025-08-18T06:38:30.691621",
    "response_time": "2.15"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 31,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    # Check odd numbers up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):\n\n### Test\nassert candidate(6) == False\nassert candidate(101) == True\nassert candidate(11) == True\nassert candidate(13441) == True\nassert candidate(61) == True\nassert candidate(4) == False",
    "timestamp": "2025-08-18T06:38:34.421153",
    "response_time": "3.72"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 32,
    "solution": "import math\n\ndef poly(xs: list, x: float):\n    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * (x ** i)\n    return result\n\ndef find_zero(xs: list):\n    # Binary search implementation to find zero\n    left = -1000.0  # Reasonable lower bound\n    right = 1000.0  # Reasonable upper bound\n    \n    for _ in range(50):  # Number of iterations for precision\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:\n            return mid\n            \n        # If polynomial value is positive at mid point\n        # and negative at left point (or vice versa),\n        # zero must be between left and mid\n        if poly(xs, left) * val < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):\n\n### Test\nassert math.fabs(poly(coeffs, solution)) < 1e-4 ",
    "timestamp": "2025-08-18T06:38:40.355496",
    "response_time": "5.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 33,
    "solution": "def sort_third(l: list):\n    # Get indices divisible by 3\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    \n    # Get values at those indices and sort them\n    third_values = sorted([l[i] for i in third_indices])\n    \n    # Create a new list copying the original\n    result = l.copy()\n    \n    # Replace values at indices divisible by 3 with sorted values\n    for index, value in zip(third_indices, third_values):\n        result[index] = value\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\nassert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\nassert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))",
    "timestamp": "2025-08-18T06:38:43.532200",
    "response_time": "3.17"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 34,
    "solution": "def unique(l: list):\n    return sorted(list(set(l)))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):\n\n### Test\nassert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] ",
    "timestamp": "2025-08-18T06:38:46.531858",
    "response_time": "3.00"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 35,
    "solution": "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):\n\n### Test\nassert candidate([1, 2, 3]) == 3",
    "timestamp": "2025-08-18T06:38:48.710855",
    "response_time": "2.17"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 36,
    "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert number to string and count occurrences of '7'\n            count += str(i).count('7')\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):\n\n### Test\nassert candidate(50) == 0\nassert candidate(78) == 2\nassert candidate(79) == 3\nassert candidate(100) == 3",
    "timestamp": "2025-08-18T06:38:52.476307",
    "response_time": "3.76"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 37,
    "solution": "def sort_even(l: list):\n    # Extract elements at even indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even-indexed elements\n    even_indices.sort()\n    \n    # Create new list with sorted even indices and original odd indices\n    result = []\n    even_counter = 0\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_counter])\n            even_counter += 1\n        else:\n            result.append(l[i])\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])",
    "timestamp": "2025-08-18T06:38:56.867768",
    "response_time": "4.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 38,
    "solution": "def encode_cyclic(s: str):\n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        # Get current group of 3 chars (or fewer for last group)\n        group = s[i:i+3]\n        if len(group) == 3:\n            # Cycle the group one position: abc -> cab\n            result.append(group[2] + group[0] + group[1])\n        else:\n            # If less than 3 chars remain, keep them as is\n            result.append(group)\n    return ''.join(result)\n\ndef decode_cyclic(s: str):\n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        # Get current group of 3 chars (or fewer for last group)\n        group = s[i:i+3]\n        if len(group) == 3:\n            # Reverse cycle the group: cab -> abc\n            result.append(group[1] + group[2] + group[0])\n        else:\n            # If less than 3 chars remain, keep them as is\n            result.append(group)\n    return ''.join(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):\n\n### Test\nassert candidate(encoded_str) == str ",
    "timestamp": "2025-08-18T06:39:04.260222",
    "response_time": "7.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 39,
    "solution": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    if n < 1:\n        return None\n    \n    count = 0\n    a, b = 0, 1\n    \n    while count < n:\n        c = a + b\n        if is_prime(c):\n            count += 1\n            if count == n:\n                return c\n        a, b = b, c\n    \n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):\n\n### Test\nassert candidate(1) == 2\nassert candidate(2) == 3\nassert candidate(3) == 5\nassert candidate(4) == 13\nassert candidate(5) == 89",
    "timestamp": "2025-08-18T06:39:08.118032",
    "response_time": "3.85"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 40,
    "solution": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):\n\n### Test\nassert candidate([1, 3, 5, 0]) == False\nassert candidate([1, 3, 5, -1]) == False\nassert candidate([1, 3, -2, 1]) == True\nassert candidate([1, 2, 3, 7]) == False",
    "timestamp": "2025-08-18T06:39:10.510852",
    "response_time": "2.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 41,
    "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving in opposite directions.\n    Each car from left-to-right set will collide exactly once with each car from right-to-left set.\n    \n    Args:\n        n: Number of cars in each direction\n        \n    Returns:\n        Total number of collisions that will occur\n    \"\"\"\n    return n * n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):\n\n### Test\nassert candidate(2) == 4\nassert candidate(3) == 9",
    "timestamp": "2025-08-18T06:39:13.490956",
    "response_time": "2.98"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 42,
    "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-18T06:39:15.377207",
    "response_time": "1.88"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 43,
    "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):\n\n### Test\nassert candidate([1, 3, 5, 0]) == False\nassert candidate([1, 3, -2, 1]) == False\nassert candidate([1, 2, 3, 7]) == False\nassert candidate([2, 4, -5, 3, 5, 7]) == True",
    "timestamp": "2025-08-18T06:39:17.178703",
    "response_time": "1.80"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 44,
    "solution": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    num = x\n    \n    while num > 0:\n        digits.append(str(num % base))\n        num //= base\n    \n    return ''.join(digits[::-1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):\n\n### Test\nassert candidate(8, 3) == \"22\"\nassert candidate(9, 3) == \"100\"\nassert candidate(234, 2) == \"11101010\"",
    "timestamp": "2025-08-18T06:39:19.245910",
    "response_time": "2.06"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 45,
    "solution": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of a side and height.\n    \n    Args:\n        a: length of the base side\n        h: height/altitude of the triangle\n    \n    Returns:\n        float: area of the triangle\n    \"\"\"\n    return (a * h) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):\n\n### Test\nassert candidate(5, 3) == 7.5",
    "timestamp": "2025-08-18T06:39:21.347957",
    "response_time": "2.10"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 46,
    "solution": "def fib4(n: int):\n    if n < 0:\n        return 0\n    \n    # Handle base cases\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n        \n    # Initialize first 4 numbers\n    dp = [0, 0, 2, 0]\n    \n    # Calculate subsequent numbers using the previous 4 numbers\n    for i in range(4, n + 1):\n        next_num = dp[0] + dp[1] + dp[2] + dp[3]\n        # Shift the array to the left and add new number\n        dp[0] = dp[1]\n        dp[1] = dp[2]\n        dp[2] = dp[3]\n        dp[3] = next_num\n        \n    return dp[3]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):\n\n### Test\nassert candidate(5) == 4\nassert candidate(8) == 28",
    "timestamp": "2025-08-18T06:39:25.806632",
    "response_time": "4.46"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 47,
    "solution": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        # If length is even, return average of middle two elements\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        # If length is odd, return middle element\n        return sorted_list[n//2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):\n\n### Test\nassert candidate([3, 1, 2, 4, 5]) == 3\nassert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0",
    "timestamp": "2025-08-18T06:39:28.483215",
    "response_time": "2.67"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 48,
    "solution": "def is_palindrome(text: str):\n    # Empty string is considered a palindrome\n    if not text:\n        return True\n    \n    # Compare characters from start and end moving towards center\n    left = 0\n    right = len(text) - 1\n    \n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):\n\n### Test\nassert candidate('') == True\nassert candidate('aba') == True\nassert candidate('aaaaa') == True",
    "timestamp": "2025-08-18T06:39:33.140807",
    "response_time": "4.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 49,
    "solution": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    \n    result = 1\n    base = 2\n    \n    # Convert n to binary and process each bit\n    while n > 0:\n        # If current bit is 1, multiply result by current base\n        if n & 1:\n            result = (result * base) % p\n        # Square the base for next iteration\n        base = (base * base) % p\n        # Move to next bit\n        n >>= 1\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):\n\n### Test\nassert candidate(3, 5) == 3\nassert candidate(1101, 101) == 2\nassert candidate(0, 101) == 1",
    "timestamp": "2025-08-18T06:39:37.056535",
    "response_time": "3.91"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 50,
    "solution": "def encode_shift(s: str):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Determine the base (97 for lowercase, 65 for uppercase)\n            base = 97 if char.islower() else 65\n            # Convert to 0-25 range, shift by 5, wrap around with modulo, convert back\n            shifted = chr((ord(char) - base + 5) % 26 + base)\n            result += shifted\n        else:\n            result += char\n    return result\n\ndef decode_shift(s: str):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Determine the base (97 for lowercase, 65 for uppercase)\n            base = 97 if char.islower() else 65\n            # Convert to 0-25 range, shift back by 5, wrap around with modulo, convert back\n            shifted = chr((ord(char) - base - 5) % 26 + base)\n            result += shifted\n        else:\n            result += char\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):\n\n### Test\nassert candidate(copy.deepcopy(encoded_str)) == str ",
    "timestamp": "2025-08-18T06:39:41.898829",
    "response_time": "4.84"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 51,
    "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):\n\n### Test\nassert candidate('') == ''\nassert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert candidate('fedcba') == 'fdcb'",
    "timestamp": "2025-08-18T06:39:43.568144",
    "response_time": "1.66"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 52,
    "solution": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):\n\n### Test\nassert candidate([1, 2, 4, 10], 100)\nassert not candidate([1, 20, 4, 10], 5)\nassert candidate([1, 20, 4, 10], 21)",
    "timestamp": "2025-08-18T06:39:45.855360",
    "response_time": "2.28"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 53,
    "solution": "def add(x: int, y: int):\n    return x + y",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):\n\n### Test\nassert candidate(0, 1) == 1\nassert candidate(1, 0) == 1\nassert candidate(2, 3) == 5",
    "timestamp": "2025-08-18T06:39:48.664137",
    "response_time": "2.81"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 54,
    "solution": "def same_chars(s0: str, s1: str):\n    # Convert strings to sets to get unique characters\n    set0 = set(s0)\n    set1 = set(s1)\n    # Compare the sets\n    return set0 == set1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):\n\n### Test\nassert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert candidate('abcd', 'dddddddabc') == True\nassert candidate('dddddddabc', 'abcd') == True",
    "timestamp": "2025-08-18T06:39:51.420928",
    "response_time": "2.75"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 55,
    "solution": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):\n\n### Test\nassert candidate(10) == 55\nassert candidate(1) == 1",
    "timestamp": "2025-08-18T06:39:54.938221",
    "response_time": "3.51"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 56,
    "solution": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        else:  # bracket == '>'\n            count -= 1\n        if count < 0:  # Found a closing bracket without matching opening bracket\n            return False\n    return count == 0  # All brackets should be matched",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):\n\n### Test\nassert candidate(\"<>\")\nassert candidate(\"<<><>>\")\nassert candidate(\"<><><<><>><>\")\nassert candidate(\"<><><<<><><>><>><<><><<>>>\")\nassert not candidate(\"<<<><>>>>\")\nassert not candidate(\"><<>\")",
    "timestamp": "2025-08-18T06:39:58.097996",
    "response_time": "3.16"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 57,
    "solution": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    \n    # Check if monotonically increasing\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    # Check if monotonically decreasing\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):\n\n### Test\nassert candidate([1, 2, 4, 10]) == True\nassert candidate([1, 2, 4, 20]) == True\nassert candidate([1, 20, 4, 10]) == False\nassert candidate([4, 1, 0, -10]) == True",
    "timestamp": "2025-08-18T06:40:00.537408",
    "response_time": "2.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 58,
    "solution": "def common(l1: list, l2: list):\n    # Convert lists to sets to get unique elements and find intersection\n    common_elements = set(l1).intersection(set(l2))\n    # Convert back to list and sort\n    return sorted(list(common_elements))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):\n\n### Test\nassert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]",
    "timestamp": "2025-08-18T06:40:04.871353",
    "response_time": "4.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 59,
    "solution": "def largest_prime_factor(n: int):\n    largest = 1\n    # Handle all the 2s first\n    while n % 2 == 0:\n        largest = 2\n        n = n // 2\n    \n    # Now check odd numbers up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest = i\n            n = n // i\n        i += 2\n    \n    # If n is still greater than 2, it's prime and is the largest factor\n    if n > 2:\n        largest = n\n        \n    return largest",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):\n\n### Test\nassert candidate(15) == 5\nassert candidate(27) == 3",
    "timestamp": "2025-08-18T06:40:08.395852",
    "response_time": "3.52"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 60,
    "solution": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):\n\n### Test\nassert candidate(1) == 1\nassert candidate(6) == 21",
    "timestamp": "2025-08-18T06:40:11.085161",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 61,
    "solution": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        else:  # bracket is ')'\n            count -= 1\n        if count < 0:  # closing bracket without matching opening bracket\n            return False\n    return count == 0  # all brackets should be matched",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):\n\n### Test\nassert candidate(\"()\")\nassert candidate(\"(()())\")\nassert candidate(\"()()(()())()\")\nassert candidate(\"()()((()()())())(()()(()))\")\nassert not candidate(\"((()())))\")\nassert not candidate(\")(()\")",
    "timestamp": "2025-08-18T06:40:13.591922",
    "response_time": "2.50"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 62,
    "solution": "def derivative(xs: list):\n    # For a polynomial a + bx + cx^2 + dx^3 + ...\n    # The derivative is b + 2cx + 3dx^2 + ...\n    # So each coefficient is multiplied by its position and shifted left\n    if len(xs) <= 1:\n        return []\n    \n    return [i * coeff for i, coeff in enumerate(xs[1:], 1)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):\n\n### Test\nassert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert candidate([1, 2, 3]) == [2, 6]",
    "timestamp": "2025-08-18T06:40:18.059256",
    "response_time": "4.46"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 63,
    "solution": "def fibfib(n: int):\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n        \n    # Initialize first three numbers\n    dp = [0, 0, 1]\n    \n    # Calculate subsequent numbers\n    for i in range(3, n + 1):\n        next_num = dp[i-1] + dp[i-2] + dp[i-3]\n        dp.append(next_num)\n    \n    return dp[n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):\n\n### Test\nassert candidate(2) == 1\nassert candidate(1) == 0\nassert candidate(5) == 4",
    "timestamp": "2025-08-18T06:40:29.464334",
    "response_time": "11.40"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 64,
    "solution": "def vowels_count(s):\n    vowels = set('aeiou')\n    count = 0\n    s = s.lower()\n    \n    # Count regular vowels\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    \n    # Check if 'y' is at the end\n    if s and s[-1] == 'y':\n        count += 1\n        \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):\n\n### Test\nassert candidate(\"abcde\") == 2, \"Test 1\"\nassert candidate(\"Alone\") == 3, \"Test 2\"\nassert candidate(\"key\") == 2, \"Test 3\"\nassert candidate(\"bye\") == 1, \"Test 4\"",
    "timestamp": "2025-08-18T06:40:34.141466",
    "response_time": "4.67"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 65,
    "solution": "def circular_shift(x, shift):\n    # Convert number to string\n    num_str = str(x)\n    length = len(num_str)\n    \n    # If shift is greater than length, just reverse the string\n    if shift >= length:\n        return num_str[::-1]\n    \n    # Perform circular shift by slicing\n    shift = shift % length  # Normalize shift to prevent unnecessary rotations\n    return num_str[-shift:] + num_str[:-shift]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):\n\n### Test\nassert candidate(100, 2) == \"001\"\nassert candidate(12, 2) == \"12\"",
    "timestamp": "2025-08-18T06:40:37.875836",
    "response_time": "3.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 66,
    "solution": "def digitSum(s):\n    # Initialize sum to 0\n    ascii_sum = 0\n    \n    # Iterate through each character in string\n    for char in s:\n        # Check if character is uppercase\n        if char.isupper():\n            # Add ASCII value of uppercase character to sum\n            ascii_sum += ord(char)\n            \n    return ascii_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"\") == 0, \"Error\"\nassert candidate(\"abAB\") == 131, \"Error\"\nassert candidate(\"abcCd\") == 67, \"Error\"\nassert candidate(\"helloE\") == 69, \"Error\"",
    "timestamp": "2025-08-18T06:40:40.973193",
    "response_time": "3.10"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 67,
    "solution": "def fruit_distribution(s, n):\n    # Extract numbers before 'apples' and 'oranges' using string split\n    words = s.split()\n    apples = int(words[0])\n    oranges = int(words[3])\n    \n    # Calculate mangoes by subtracting apples and oranges from total\n    mangoes = n - apples - oranges\n    \n    return mangoes",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):\n\n### Test\nassert candidate(\"5 apples and 6 oranges\",19) == 8\nassert candidate(\"5 apples and 6 oranges\",21) == 10\nassert candidate(\"0 apples and 1 oranges\",3) == 2",
    "timestamp": "2025-08-18T06:40:44.394322",
    "response_time": "3.41"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 68,
    "solution": "def pluck(arr):\n    if not arr:\n        return []\n    \n    # Initialize with None to handle case where no even numbers exist\n    min_even = None\n    min_even_index = None\n    \n    # Find smallest even number and its index\n    for i, num in enumerate(arr):\n        if num % 2 == 0:  # Check if number is even\n            if min_even is None or num < min_even:\n                min_even = num\n                min_even_index = i\n    \n    # If no even number found, return empty list\n    if min_even is None:\n        return []\n        \n    # Return the plucked value and its index\n    return [min_even, min_even_index]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([4,2,3]) == [2, 1], \"Error\"\nassert candidate([1,2,3]) == [2, 1], \"Error\"\nassert candidate([]) == [], \"Error\"\nassert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-18T06:40:47.827916",
    "response_time": "3.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 69,
    "solution": "from collections import Counter\n\ndef search(lst):\n    # Count occurrences of each number\n    count_dict = Counter(lst)\n    \n    # Find numbers that appear odd times\n    odd_numbers = [num for num, count in count_dict.items() if count % 2 != 0]\n    \n    # If no numbers appear odd times, return -1\n    if not odd_numbers:\n        return -1\n    \n    # Return the smallest number that appears odd times\n    return min(odd_numbers)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef search(lst):\n\n### Test\nassert candidate([5, 5, 5, 5, 1]) == 1\nassert candidate([4, 1, 4, 1, 4, 4]) == 4\nassert candidate([3, 3]) == -1\nassert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\nassert candidate([2, 3, 3, 2, 2]) == 2  # automatically generated tests\nassert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\nassert candidate([3, 2, 8, 2]) == 2\nassert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\nassert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\nassert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\nassert candidate([1, 9, 10, 1, 3]) == 1\nassert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5",
    "timestamp": "2025-08-18T06:40:52.124367",
    "response_time": "4.29"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 70,
    "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_list = sorted(lst)\n    result = []\n    left = 0\n    right = len(lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(sorted_list[left])\n            break\n        result.append(sorted_list[left])\n        result.append(sorted_list[right])\n        left += 1\n        right -= 1\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef strange_sort_list(lst):\n\n### Test\nassert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\nassert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\nassert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]",
    "timestamp": "2025-08-18T06:40:56.331492",
    "response_time": "4.20"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if triangle is possible using triangle inequality theorem\n    if (a + b <= c) or (b + c <= a) or (a + c <= b):\n        return -1\n    \n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round to 2 decimal places\n    return round(area, 2)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef triangle_area(a, b, c):\n\n### Test\nassert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1, 2, 10) == -1\nassert candidate(4, 8, 5) == 8.18\nassert candidate(2, 2, 2) == 1.73",
    "timestamp": "2025-08-18T06:40:59.151130",
    "response_time": "2.81"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 72,
    "solution": "def will_it_fly(q, w):\n    # Check if sum of weights exceeds the limit\n    if sum(q) > w:\n        return False\n    \n    # Check if weights are symmetrically balanced\n    length = len(q)\n    for i in range(length // 2):\n        if q[i] != q[length - 1 - i]:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef will_it_fly(q,w):\n\n### Test\nassert candidate([3, 2, 3], 9) is True\nassert candidate([1, 2], 5) is False\nassert candidate([3], 5) is True",
    "timestamp": "2025-08-18T06:41:02.525433",
    "response_time": "3.37"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 73,
    "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from start and end moving towards center\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):\n\n### Test\nassert candidate([1,2,3,5,4,7,9,6]) == 4\nassert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\nassert candidate([1, 4, 2]) == 1\nassert candidate([1, 4, 4, 2]) == 1  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-18T06:41:05.131090",
    "response_time": "2.60"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 74,
    "solution": "def total_match(lst1, lst2):\n    # Create a list to store matching elements\n    matches = []\n    \n    # Create a dictionary to count occurrences in lst2\n    count_lst2 = {}\n    for item in lst2:\n        count_lst2[item] = count_lst2.get(item, 0) + 1\n    \n    # Create a dictionary to track how many times we've matched each element\n    used_matches = {}\n    \n    # Check each element in lst1\n    for item in lst1:\n        # If item exists in lst2 and we haven't exceeded its count in lst2\n        if item in count_lst2 and used_matches.get(item, 0) < count_lst2[item]:\n            matches.append(item)\n            used_matches[item] = used_matches.get(item, 0) + 1\n            \n    return matches",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef total_match(lst1, lst2):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([], []) == []\nassert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\nassert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']",
    "timestamp": "2025-08-18T06:41:11.140418",
    "response_time": "6.00"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 75,
    "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if a < 2:\n        return False\n        \n    prime_factors = []\n    n = a\n    for i in range(2, a + 1):\n        while n % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            n //= i\n        if n == 1:\n            break\n            \n    return len(prime_factors) == 3",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):\n\n### Test\nassert candidate(5) == False\nassert candidate(30) == True\nassert candidate(8) == True\nassert candidate(10) == False\nassert candidate(125) == True",
    "timestamp": "2025-08-18T06:41:15.703572",
    "response_time": "4.56"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 76,
    "solution": "import math\n\ndef is_simple_power(x, n):\n    # Handle special cases\n    if x <= 0 or n <= 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    \n    # Calculate the logarithm of x with base n\n    # If the result is an integer, x is a simple power of n\n    log_val = math.log(x, n)\n    \n    # Check if log_val is (very close to) an integer\n    # Using round to handle floating point precision issues\n    return abs(round(log_val) - log_val) < 1e-10",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):\n\n### Test\nassert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-18T06:41:19.340265",
    "response_time": "3.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 77,
    "solution": "def iscube(a):\n    # Handle negative numbers by taking absolute value for cube root check\n    abs_a = abs(a)\n    \n    # Find the approximate cube root using power of 1/3\n    cube_root = round(abs_a ** (1/3))\n    \n    # Check if cubing the rounded cube root gives us back our original number\n    return cube_root ** 3 == abs_a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef iscube(a):\n\n### Test\nassert candidate(1) == True, \"First test error: \" + str(candidate(1))\nassert candidate(2) == False, \"Second test error: \" + str(candidate(2))\nassert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\nassert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))",
    "timestamp": "2025-08-18T06:41:23.216558",
    "response_time": "3.87"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 78,
    "solution": "def hex_key(num):\n    # Define prime hexadecimal digits (both numeric and alphabetic)\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count occurrences of prime hex digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex)\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):\n\n### Test\nassert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))\nassert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))\nassert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))",
    "timestamp": "2025-08-18T06:41:26.076774",
    "response_time": "2.85"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 79,
    "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    \n    binary = \"\"\n    num = decimal\n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    \n    return \"db\" + binary + \"db\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):\n\n### Test\nassert candidate(0) == \"db0db\"\nassert candidate(32) == \"db100000db\"",
    "timestamp": "2025-08-18T06:41:29.259143",
    "response_time": "3.18"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 80,
    "solution": "def is_happy(s):\n    # Check if length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check each consecutive group of 3 characters\n    for i in range(len(s) - 2):\n        # Get the current 3 characters\n        three_chars = s[i:i+3]\n        # If there are any duplicates in these 3 characters, string is not happy\n        if len(set(three_chars)) != 3:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):\n\n### Test\nassert candidate(\"a\") == False , \"a\"\nassert candidate(\"aa\") == False , \"aa\"\nassert candidate(\"abcd\") == True , \"abcd\"\nassert candidate(\"aabb\") == False , \"aabb\"",
    "timestamp": "2025-08-18T06:41:33.570068",
    "response_time": "4.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_td",
    "dataset_row_id": 81,
    "solution": "def numerical_letter_grade(grades):\n    def get_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    return [get_letter_grade(gpa) for gpa in grades]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):\n\n### Test\nassert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\nassert candidate([1.2]) == ['D+']\nassert candidate([0.5]) == ['D-']",
    "timestamp": "2025-08-18T06:41:38.856674",
    "response_time": "5.28"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 82,
    "solution": "def prime_length(string):\n    length = len(string)\n    \n    # Handle edge cases\n    if length < 2:\n        return False\n    \n    # Check if length is prime\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):\n\n### Test\nassert candidate('Hello') == True\nassert candidate('abcdcba') == True\nassert candidate('kittens') == True\nassert candidate('orange') == False\nassert candidate('wow') == True\nassert candidate('world') == True\nassert candidate('MadaM') == True\nassert candidate('Wow') == True",
    "timestamp": "2025-08-19T04:10:03.237588",
    "response_time": "4.88"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 83,
    "solution": "def starts_one_ends(n):\n    # For n=1, only the number 1 satisfies the condition\n    if n == 1:\n        return 1\n    \n    # For n > 1:\n    # Numbers starting with 1: 1 followed by (n-1) digits = 10^(n-1)\n    # Numbers ending with 1: 9 choices for first digit (1-9) followed by (n-2) digits and 1 = 9 * 10^(n-2)\n    # Need to subtract numbers that are counted twice (numbers that both start and end with 1)\n    # Numbers that start and end with 1: 1 followed by (n-2) digits and 1 = 10^(n-2)\n    \n    start_with_one = 10 ** (n-1)  # Numbers starting with 1\n    end_with_one = 9 * (10 ** (n-2))  # Numbers ending with 1\n    both = 10 ** (n-2)  # Numbers both starting and ending with 1\n    \n    return start_with_one + end_with_one - both",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1) == 1\nassert candidate(2) == 18",
    "timestamp": "2025-08-19T04:10:10.990323",
    "response_time": "7.75"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 84,
    "solution": "def solve(N):\n    # Calculate sum of digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert to binary string and remove '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1000) == \"1\", \"Error\"\nassert candidate(150) == \"110\", \"Error\"",
    "timestamp": "2025-08-19T04:10:14.041898",
    "response_time": "3.05"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 85,
    "solution": "def add(lst):\n    # Sum even numbers at odd indices (index 1, 3, 5, etc.)\n    return sum(num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):\n\n### Test\nassert candidate([4, 88]) == 88\nassert candidate([4, 5, 6, 7, 2, 122]) == 122",
    "timestamp": "2025-08-19T04:10:17.802785",
    "response_time": "3.76"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 86,
    "solution": "def anti_shuffle(s):\n    # Split the string into words while preserving spaces\n    words = s.split(' ')\n    \n    # Process each word\n    ordered_words = []\n    for word in words:\n        if word:  # If word is not empty\n            # Sort the characters in the word\n            sorted_chars = sorted(word)\n            # Join the sorted characters back into a word\n            ordered_word = ''.join(sorted_chars)\n            ordered_words.append(ordered_word)\n        else:  # If word is empty (multiple spaces)\n            ordered_words.append('')\n    \n    # Join the words back together with spaces\n    return ' '.join(ordered_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):\n\n### Test\nassert candidate('Hi') == 'Hi'\nassert candidate('hello') == 'ehllo'\nassert candidate('number') == 'bemnru'\nassert candidate('abcd') == 'abcd'",
    "timestamp": "2025-08-19T04:10:22.339599",
    "response_time": "4.53"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 87,
    "solution": "def get_row(lst, x):\n    coordinates = []\n    \n    # Iterate through each row\n    for row_idx in range(len(lst)):\n        # Find all occurrences of x in current row\n        row_coordinates = [(row_idx, col_idx) for col_idx, val in enumerate(lst[row_idx]) if val == x]\n        # Sort coordinates within row by column in descending order\n        row_coordinates.sort(key=lambda coord: coord[1], reverse=True)\n        coordinates.extend(row_coordinates)\n    \n    # Sort all coordinates by row in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    \n    return coordinates",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):\n\n### Test\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,1,3,4,5,6], [1,2,1,4,5,6], [1,2,3,1,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]",
    "timestamp": "2025-08-19T04:10:26.071203",
    "response_time": "3.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 88,
    "solution": "def sort_array(array):\n    if not array:\n        return []\n    \n    # Calculate sum of first and last elements\n    sum_first_last = array[0] + array[-1] if len(array) > 1 else array[0]\n    \n    # Create a copy of the array\n    sorted_array = array.copy()\n    \n    # Sort based on sum being odd or even\n    if sum_first_last % 2 == 1:\n        # Sort in ascending order if sum is odd\n        sorted_array.sort()\n    else:\n        # Sort in descending order if sum is even\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([]) == [], \"Error\"\nassert candidate([5]) == [5], \"Error\"\nassert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"",
    "timestamp": "2025-08-19T04:10:31.000168",
    "response_time": "4.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 89,
    "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Calculate base (0-25) position of character\n            base = ord(char.lower()) - ord('a')\n            # Shift by 4 positions (2*2)\n            shifted = (base + 4) % 26\n            # Convert back to character\n            result += chr(shifted + ord('a'))\n        else:\n            result += char\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):\n\n### Test\nassert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\" ",
    "timestamp": "2025-08-19T04:10:34.905279",
    "response_time": "3.90"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 90,
    "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n        \n    return unique_sorted[1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):\n\n### Test\nassert candidate([1, 2, 3, 4, 5]) == 2\nassert candidate([5, 1, 4, 3, 2]) == 2\nassert candidate([]) == None\nassert candidate([1, 1]) == None",
    "timestamp": "2025-08-19T04:10:38.372019",
    "response_time": "3.46"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 91,
    "solution": "def is_bored(S):\n    # Split the string into sentences using multiple delimiters\n    sentences = []\n    current = \"\"\n    \n    for char in S:\n        if char in '.?!':\n            current = current.strip()\n            if current:\n                sentences.append(current)\n            current = \"\"\n        else:\n            current += char\n    \n    # Add the last sentence if it exists\n    if current.strip():\n        sentences.append(current.strip())\n    \n    # Count sentences that start with 'I '\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n            \n    return boredom_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):\n\n### Test\nassert candidate(\"Hello world\") == 0, \"Test 1\"\nassert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\nassert candidate(\"I love It !\") == 1, \"Test 3\"",
    "timestamp": "2025-08-19T04:10:43.867547",
    "response_time": "5.49"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 92,
    "solution": "def any_int(x, y, z):\n    # Check if any of the numbers is an integer by comparing it with its floor value\n    return x == int(x) or y == int(y) or z == int(z)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef any_int(x, y, z):\n\n### Test\nassert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\nassert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:10:48.293477",
    "response_time": "4.42"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 93,
    "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    result = ''\n    for char in message:\n        if char in vowels:\n            result += vowel_map[char].swapcase()\n        else:\n            result += char.swapcase()\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):\n\n### Test\nassert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:10:51.707787",
    "response_time": "3.41"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 94,
    "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find largest prime in list\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    # Sum digits of largest prime\n    return sum(int(d) for d in str(largest_prime))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):\n\n### Test\nassert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-19T04:10:57.211490",
    "response_time": "5.50"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 95,
    "solution": "def check_dict_case(dict):\n    if not dict:  # Check if dictionary is empty\n        return False\n        \n    # First check if all keys are strings\n    if not all(isinstance(key, str) for key in dict.keys()):\n        return False\n        \n    # Get the case of first key to compare with others\n    first_key = list(dict.keys())[0]\n    is_upper = first_key.isupper()\n    is_lower = first_key.islower()\n    \n    # If first key is neither fully upper nor fully lower, return False\n    if not (is_upper or is_lower):\n        return False\n        \n    # Check all other keys match the case of first key\n    for key in dict.keys():\n        if is_upper and not key.isupper():\n            return False\n        if is_lower and not key.islower():\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):\n\n### Test\nassert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))",
    "timestamp": "2025-08-19T04:11:02.507710",
    "response_time": "5.29"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 96,
    "solution": "def count_up_to(n):\n    if n < 2:\n        return []\n    \n    # Create a boolean array for marking non-prime numbers\n    is_composite = [False] * n\n    primes = []\n    \n    # Using Sieve of Eratosthenes algorithm\n    for i in range(2, n):\n        if not is_composite[i]:\n            primes.append(i)\n            # Mark multiples of current prime as composite\n            for j in range(i * i, n, i):\n                if j < n:\n                    is_composite[j] = True\n    \n    return primes",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):\n\n### Test\nassert candidate(5) == [2,3]\nassert candidate(6) == [2,3,5]\nassert candidate(7) == [2,3,5]\nassert candidate(10) == [2,3,5,7]\nassert candidate(0) == []",
    "timestamp": "2025-08-19T04:11:06.524604",
    "response_time": "4.01"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 97,
    "solution": "def multiply(a, b):\n    # Get unit digits by taking absolute value and modulo 10\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    # Return their product\n    return unit_a * unit_b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):\n\n### Test\nassert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))\nassert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))\nassert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\nassert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))",
    "timestamp": "2025-08-19T04:11:09.003857",
    "response_time": "2.48"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 98,
    "solution": "def count_upper(s):\n    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):\n\n### Test\nassert candidate('aBCdEf')  == 1\nassert candidate('abcdefg') == 0\nassert candidate('dBBE') == 0\nassert candidate('B')  == 0",
    "timestamp": "2025-08-19T04:11:10.728407",
    "response_time": "1.72"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 99,
    "solution": "def closest_integer(value):\n    return round(float(value))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef closest_integer(value):\n\n### Test\nassert candidate(\"10\") == 10, \"Test 1\"\nassert candidate(\"14.5\") == 15, \"Test 2\"",
    "timestamp": "2025-08-19T04:11:13.247228",
    "response_time": "2.52"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 100,
    "solution": "def make_a_pile(n):\n    result = []\n    current = n\n    \n    for i in range(n):\n        result.append(current)\n        # If current number is even, add 2 to get next even\n        # If current number is odd, add 2 to get next odd\n        current += 2\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):\n\n### Test\nassert candidate(3) == [3, 5, 7], \"Test 3\"\nassert candidate(4) == [4,6,8,10], \"Test 4\"\nassert candidate(5) == [5, 7, 9, 11, 13]",
    "timestamp": "2025-08-19T04:11:15.575294",
    "response_time": "2.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 101,
    "solution": "def words_string(s):\n    # Replace commas with spaces and split by whitespace\n    words = s.replace(',', ' ').split()\n    return words",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]",
    "timestamp": "2025-08-19T04:11:18.209590",
    "response_time": "2.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 102,
    "solution": "def choose_num(x, y):\n    # If x is greater than y, no valid range exists\n    if x > y:\n        return -1\n    \n    # Start from the larger number and work backwards\n    # to find the first even number in range\n    start = min(x, y)\n    end = max(x, y)\n    \n    # If the larger number is even, return it\n    if end % 2 == 0:\n        return end\n    \n    # If the larger number is odd, check the next smaller even number\n    if end - 1 >= start and (end - 1) % 2 == 0:\n        return end - 1\n        \n    return -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):\n\n### Test\nassert candidate(12, 15) == 14\nassert candidate(13, 12) == -1\nassert candidate(33, 12354) == 12354\nassert candidate(5234, 5233) == -1",
    "timestamp": "2025-08-19T04:11:22.560366",
    "response_time": "4.35"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 103,
    "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of numbers from n to m\n    count = m - n + 1\n    total = (n + m) * count // 2\n    \n    # Calculate average and round to nearest integer\n    avg = (total + (count // 2)) // count\n    \n    # Convert to binary string\n    return bin(avg)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):\n\n### Test\nassert candidate(1, 5) == \"0b11\"\nassert candidate(7, 13) == \"0b1010\"\nassert candidate(964,977) == \"0b1111001010\"\nassert candidate(996,997) == \"0b1111100100\"\nassert candidate(560,851) == \"0b1011000010\"\nassert candidate(185,546) == \"0b101101110\"",
    "timestamp": "2025-08-19T04:11:25.089042",
    "response_time": "2.53"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 104,
    "solution": "def unique_digits(x):\n    def has_no_even_digits(num):\n        return all(int(digit) % 2 == 1 for digit in str(num))\n    \n    result = [num for num in x if has_no_even_digits(num)]\n    return sorted(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):\n\n### Test\nassert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nassert candidate([152, 323, 1422, 10]) == []",
    "timestamp": "2025-08-19T04:11:27.924075",
    "response_time": "2.83"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 105,
    "solution": "def by_length(arr):\n    # Filter numbers between 1 and 9\n    filtered = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort and reverse\n    filtered.sort(reverse=True)\n    \n    # Number to word mapping\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Convert numbers to words\n    return [num_to_word[num] for num in filtered]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\nassert candidate([]) == [], \"Error\"",
    "timestamp": "2025-08-19T04:11:32.914109",
    "response_time": "4.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 106,
    "solution": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial for even numbers\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum for odd numbers\n            sum_to_i = sum(range(1, i + 1))\n            result.append(sum_to_i)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):\n\n### Test\nassert candidate(5) == [1, 2, 6, 24, 15]\nassert candidate(7) == [1, 2, 6, 24, 15, 720, 28]",
    "timestamp": "2025-08-19T04:11:36.310454",
    "response_time": "3.40"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 107,
    "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):\n\n### Test\nassert candidate(123) == (8, 13)\nassert candidate(12) == (4, 6)\nassert candidate(3) == (1, 2)\nassert candidate(63) == (6, 8)",
    "timestamp": "2025-08-19T04:11:40.190927",
    "response_time": "3.88"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 108,
    "solution": "def count_nums(arr):\n    def sum_digits(num):\n        # Convert number to string to process digits\n        num_str = str(abs(num))\n        total = 0\n        \n        # If number is negative, make first digit negative\n        if num < 0:\n            total -= int(num_str[0])\n            # Add remaining digits normally\n            total += sum(int(d) for d in num_str[1:])\n        else:\n            # Add all digits for positive numbers\n            total = sum(int(d) for d in num_str)\n            \n        return total\n    \n    # Count numbers where sum of digits is greater than 0\n    return sum(1 for num in arr if sum_digits(num) > 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):\n\n### Test\nassert candidate([]) == 0\nassert candidate([-1, -2, 0]) == 0\nassert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\nassert candidate([1, 6, 9, -6, 0, 1, 5]) == 5",
    "timestamp": "2025-08-19T04:11:44.180538",
    "response_time": "3.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 109,
    "solution": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    # Find the number of rotations needed\n    rotation_point = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            rotation_point = i\n            break\n    \n    if rotation_point == 0:\n        # Array is already sorted\n        return True\n    \n    # Create rotated array\n    rotated = arr[rotation_point:] + arr[:rotation_point]\n    \n    # Check if rotated array is sorted\n    for i in range(1, n):\n        if rotated[i] < rotated[i-1]:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):\n\n### Test\nassert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([3, 5, 10, 1, 2])==True",
    "timestamp": "2025-08-19T04:11:47.524979",
    "response_time": "3.34"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 110,
    "solution": "def exchange(lst1, lst2):\n    # Count total even numbers available in both lists\n    total_even = sum(1 for x in lst1 + lst2 if x % 2 == 0)\n    \n    # Count how many numbers we need in lst1\n    needed = len(lst1)\n    \n    # If we have enough even numbers to fill lst1, return \"YES\"\n    if total_even >= needed:\n        return \"YES\"\n    return \"NO\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):\n\n### Test\nassert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\nassert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"",
    "timestamp": "2025-08-19T04:11:49.981207",
    "response_time": "2.45"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 111,
    "solution": "from collections import Counter\n\ndef histogram(test):\n    # Split the string into list of letters\n    letters = test.split()\n    \n    # Count occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Create dictionary with letters that have the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    # If all letters appear same number of times, return counts for all letters\n    if len(result) == 1:\n        return letter_counts\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):\n\n### Test\nassert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:11:55.010307",
    "response_time": "5.03"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 112,
    "solution": "def reverse_delete(s,c):\n    # Remove all characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the resulting string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):\n\n### Test\nassert candidate(\"abcde\",\"ae\") == ('bcd',False)\nassert candidate(\"abcdef\", \"b\") == ('acdef',False)\nassert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\nassert candidate(\"dwik\",\"w\") == ('dik',False)",
    "timestamp": "2025-08-19T04:11:56.883070",
    "response_time": "1.87"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 113,
    "solution": "def odd_count(lst):\n    result = []\n    for i, num_str in enumerate(lst):\n        odd_count = sum(1 for digit in num_str if int(digit) % 2 == 1)\n        template = \"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\"\n        result.append(template.format(odd_count))\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):\n\n### Test\nassert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\nassert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"",
    "timestamp": "2025-08-19T04:12:01.730442",
    "response_time": "4.85"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 114,
    "solution": "def minSubArraySum(nums):\n    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # Handle single element case\n    if n == 1:\n        return nums[0]\n    \n    # Kadane's algorithm modified to find minimum sum\n    for i in range(n):\n        # Start new subarray if current sum becomes positive\n        if curr_sum > 0:\n            curr_sum = nums[i]\n        else:\n            curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        \n        # Also consider single elements\n        min_sum = min(min_sum, nums[i])\n    \n    return min_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):\n\n### Test\nassert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-1, -2, -3]) == -6\nassert candidate([-1, -2, -3, 2, -10]) == -14\nassert candidate([-9999999999999999]) == -9999999999999999\nassert candidate([0, 10, 20, 1000000]) == 0\nassert candidate([-1, -2, -3, 10, -5]) == -6",
    "timestamp": "2025-08-19T04:12:07.274663",
    "response_time": "5.54"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 115,
    "solution": "def max_fill(grid, capacity):\n    # Count total water units and calculate number of bucket operations needed\n    total_operations = 0\n    \n    # Process each well (row) separately\n    for well in grid:\n        # Count water units in current well\n        water_units = sum(well)\n        \n        # If there's water in the well, calculate bucket operations needed\n        if water_units > 0:\n            # Calculate how many times we need to lower the bucket\n            # Using ceiling division to handle cases where water units\n            # don't divide evenly by capacity\n            operations = (water_units + capacity - 1) // capacity\n            total_operations += operations\n    \n    return total_operations",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\nassert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"",
    "timestamp": "2025-08-19T04:12:11.384457",
    "response_time": "4.11"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 116,
    "solution": "def sort_array(arr):\n    def count_ones(n):\n        # Convert negative numbers to positive for binary counting\n        num = abs(n)\n        return bin(num).count('1')\n    \n    # Sort based on number of 1's in binary representation\n    # For equal counts, sort by the original number\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\nassert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\nassert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\nassert candidate([]) == []",
    "timestamp": "2025-08-19T04:12:14.890667",
    "response_time": "3.51"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 117,
    "solution": "def select_words(s, n):\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    result = []\n    \n    # Split the string into words\n    words = s.split()\n    \n    for word in words:\n        # Count consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):\n\n### Test\nassert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))\nassert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))\nassert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))",
    "timestamp": "2025-08-19T04:12:19.207602",
    "response_time": "4.32"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 118,
    "solution": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    \n    # Need at least 3 characters to have a vowel between consonants\n    if len(word) < 3:\n        return \"\"\n    \n    # Iterate from right to left\n    for i in range(len(word)-2, 0, -1):\n        # Check if current character is a vowel\n        if word[i] in vowels:\n            # Check if surrounded by consonants\n            if (word[i-1] not in vowels) and (word[i+1] not in vowels):\n                return word[i]\n    \n    return \"\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):\n\n### Test\nassert candidate(\"yogurt\") == \"u\"\nassert candidate(\"full\") == \"u\"\nassert candidate(\"easy\") == \"\"\nassert candidate(\"eAsy\") == \"\"\nassert candidate(\"ali\") == \"\"\nassert candidate(\"bad\") == \"a\"\nassert candidate(\"most\") == \"o\"",
    "timestamp": "2025-08-19T04:12:23.794872",
    "response_time": "4.59"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 119,
    "solution": "def match_parens(lst):\n    # Combine all strings in the list\n    combined = ''.join(lst)\n    \n    # Count opening and closing parentheses\n    open_count = combined.count('(')\n    close_count = combined.count(')')\n    \n    # If the total number of opening and closing parentheses are equal,\n    # then it's possible to form valid parentheses by rearranging\n    if open_count == close_count:\n        return 'Yes'\n    return 'No'",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef match_parens(lst):\n\n### Test\nassert candidate(['()(', ')']) == 'Yes'\nassert candidate([')', ')']) == 'No'\nassert candidate(['(()(())', '())())']) == 'No'\nassert candidate([')())', '(()()(']) == 'Yes'\nassert candidate(['(())))', '(()())((']) == 'Yes'\nassert candidate(['()', '())']) == 'No'",
    "timestamp": "2025-08-19T04:12:27.578972",
    "response_time": "3.78"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 120,
    "solution": "def maximum(arr, k):\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    # Return the last k elements (largest k numbers)\n    return sorted_arr[-k:]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):\n\n### Test\nassert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nassert candidate([4, -4, 4], 2) == [4, 4]\nassert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\nassert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\nassert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]",
    "timestamp": "2025-08-19T04:12:29.783250",
    "response_time": "2.20"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 121,
    "solution": "def solution(lst):\n    # Sum elements at even indices (0-based) that are odd\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):\n\n### Test\nassert candidate([5, 8, 7, 1])    == 12\nassert candidate([3, 3, 3, 3, 3]) == 9\nassert candidate([30, 13, 24, 321]) == 0",
    "timestamp": "2025-08-19T04:12:32.191274",
    "response_time": "2.40"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 122,
    "solution": "def add_elements(arr, k):\n    # Take first k elements\n    elements = arr[:k]\n    \n    # Sum elements that have at most 2 digits (absolute value between 0 and 99)\n    total = 0\n    for num in elements:\n        if abs(num) <= 99:\n            total += num\n            \n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):\n\n### Test\nassert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\nassert candidate([111,121,3,4000,5,6], 2) == 0",
    "timestamp": "2025-08-19T04:12:35.868542",
    "response_time": "3.67"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 123,
    "solution": "def get_odd_collatz(n):\n    sequence = []\n    current = n\n    \n    while current != 1:\n        if current % 2 == 1:  # if number is odd\n            sequence.append(current)\n        if current % 2 == 0:  # if even\n            current = current // 2\n        else:  # if odd\n            current = 3 * current + 1\n    \n    sequence.append(1)  # add the final 1\n    return sorted(sequence)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):\n\n### Test\nassert candidate(14) == [1, 5, 7, 11, 13, 17]\nassert candidate(5) == [1, 5]",
    "timestamp": "2025-08-19T04:12:38.966411",
    "response_time": "3.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 124,
    "solution": "def valid_date(date):\n    if not date:\n        return False\n    \n    try:\n        # Split the date string into components\n        month, day, year = map(int, date.split('-'))\n        \n        # Check month validity\n        if month < 1 or month > 12:\n            return False\n            \n        # Check day validity based on month\n        if month in [4, 6, 9, 11]:  # 30 days months\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:  # February\n            if day < 1 or day > 29:\n                return False\n        else:  # 31 days months\n            if day < 1 or day > 31:\n                return False\n                \n        return True\n        \n    except:\n        return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):\n\n### Test\nassert candidate('03-11-2000') == True \nassert candidate('15-01-2012') == False \nassert candidate('04-0-2040') == False \nassert candidate('06-04-2020') == True \nassert candidate('01-01-2007') == True \nassert candidate('03-32-2011') == False \nassert candidate('') == False \nassert candidate('04-31-3000') == False ",
    "timestamp": "2025-08-19T04:12:42.617697",
    "response_time": "3.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 125,
    "solution": "def split_words(txt):\n    words = []\n    current_word = \"\"\n    \n    for char in txt:\n        if char == \" \":\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n        else:\n            current_word += char\n            \n    if current_word:\n        words.append(current_word)\n        \n    return words",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef split_words(txt):\n\n### Test\nassert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\nassert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]",
    "timestamp": "2025-08-19T04:12:47.564855",
    "response_time": "4.94"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 126,
    "solution": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef is_sorted(lst):\n\n### Test\nassert candidate([5]) == True\nassert candidate([1, 2, 3, 4, 5]) == True\nassert candidate([1, 3, 2, 4, 5]) == False\nassert candidate([1, 2, 3, 4, 5, 6]) == True\nassert candidate([1, 2, 3, 4, 5, 6, 7]) == True\nassert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:12:49.716733",
    "response_time": "2.15"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 127,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Find the intersection points\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If no intersection or single point intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start\n    \n    # For closed intervals, add 1 to include both endpoints\n    length += 1\n    \n    # Check if length is prime\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):\n\n### Test\nassert candidate((1, 2), (2, 3)) == \"NO\"\nassert candidate((-1, 1), (0, 4)) == \"NO\"\nassert candidate((-3, -1), (-5, 5)) == \"YES\"\nassert candidate((-2, 2), (-4, 0)) == \"YES\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-19T04:12:53.103067",
    "response_time": "3.38"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 128,
    "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n        \n    magnitude_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        # Calculate sum of magnitudes\n        magnitude_sum += abs(num)\n        \n        # Calculate product of signs\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:  # num == 0\n            sign = 0\n        sign_product *= sign\n        \n        # If we encounter a zero, the whole product will be zero\n        if sign_product == 0:\n            return 0\n            \n    return magnitude_sum * sign_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1, 2, 2, -4]) == -9\nassert candidate([0, 1]) == 0\nassert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\nassert candidate([]) == None",
    "timestamp": "2025-08-19T04:12:56.843954",
    "response_time": "3.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 129,
    "solution": "def minPath(grid, k):\n    n = len(grid)\n    # Create flat list of positions with their values\n    positions = []\n    for i in range(n):\n        for j in range(n):\n            positions.append((grid[i][j], i, j))\n    \n    # Sort positions by value\n    positions.sort()\n    \n    # Get minimum and maximum value positions\n    min_pos = positions[0]\n    max_pos = positions[-1]\n    \n    # For k steps, alternate between 1 (min) and the maximum possible difference\n    result = []\n    max_diff = abs(max_pos[0] - min_pos[0])\n    \n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(max_diff)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):\n\n### Test\nassert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\nassert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\nassert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\nassert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]",
    "timestamp": "2025-08-19T04:13:05.123181",
    "response_time": "8.28"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 130,
    "solution": "def tri(n):\n    # Initialize the sequence with first element\n    sequence = [1]\n    \n    # Helper function to calculate tribonacci value for a position\n    def calculate_tri(pos):\n        if pos == 1:\n            return 3\n        if pos % 2 == 0:  # even numbers\n            return 1 + pos / 2\n        else:  # odd numbers\n            # For odd numbers, we need values of n-1, n-2, and n+1\n            return sequence[pos-1] + sequence[pos-2] + calculate_tri(pos+1)\n    \n    # Generate sequence up to n\n    for i in range(1, n+1):\n        sequence.append(calculate_tri(i))\n    \n    return sequence",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):\n\n### Test\nassert candidate(3) == [1, 3, 2.0, 8.0]\nassert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\nassert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\nassert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nassert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]",
    "timestamp": "2025-08-19T04:13:17.444019",
    "response_time": "12.32"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 131,
    "solution": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:  # if digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):\n\n### Test\nassert candidate(5) == 5\nassert candidate(54) == 5\nassert candidate(120) ==1",
    "timestamp": "2025-08-19T04:13:20.485509",
    "response_time": "3.04"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 132,
    "solution": "def is_nested(string):\n    if not isinstance(string, str):\n        return False\n    \n    # Initialize stack to keep track of brackets\n    stack = []\n    # Keep track of nesting level\n    max_level = 0\n    current_level = 0\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ']':\n            if not stack:  # If stack is empty but we find closing bracket\n                return False\n            stack.pop()\n            current_level -= 1\n            \n    # Check if all brackets are matched and if we achieved nesting\n    return len(stack) == 0 and max_level > 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef is_nested(string):\n\n### Test\nassert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('[]]]]]]][[[[[]') == False\nassert candidate('[][]') == False\nassert candidate(('[]')) == False\nassert candidate('[[[[]]]]') == True\nassert candidate('[]]]]]]]]]]') == False\nassert candidate('[][][[]]') == True",
    "timestamp": "2025-08-19T04:13:27.805698",
    "response_time": "7.32"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 133,
    "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\" \nassert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:13:30.196823",
    "response_time": "2.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 134,
    "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove trailing whitespace\n    txt = txt.rstrip()\n    \n    # If string is empty after stripping, return False\n    if not txt:\n        return False\n    \n    # Get the last character\n    last_char = txt[-1]\n    \n    # Check if it's a letter\n    return last_char.isalpha()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef check_if_last_char_is_a_letter(txt):\n\n### Test\nassert candidate(\"apple\") == False\nassert candidate(\"apple pi e\") == True\nassert candidate(\"eeeee\") == False\nassert candidate(\"A\") == True\nassert candidate(\"Pumpkin pie \") == False",
    "timestamp": "2025-08-19T04:13:35.183568",
    "response_time": "4.98"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 135,
    "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):\n\n### Test\nassert candidate([1,2,4,3,5])==3\nassert candidate([1,2,4,5])==-1",
    "timestamp": "2025-08-19T04:13:38.438389",
    "response_time": "3.25"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 136,
    "solution": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    negative_nums = [x for x in lst if x < 0]\n    positive_nums = [x for x in lst if x > 0]\n    \n    max_negative = max(negative_nums) if negative_nums else None\n    min_positive = min(positive_nums) if positive_nums else None\n    \n    return (max_negative, min_positive)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef largest_smallest_integers(lst):\n\n### Test\nassert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\nassert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\nassert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\nassert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\nassert candidate([]) == (None, None)",
    "timestamp": "2025-08-19T04:13:41.185562",
    "response_time": "2.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 137,
    "solution": "def compare_one(a, b):\n    # Convert strings to numbers if needed\n    def convert_value(val):\n        if isinstance(val, str):\n            # Handle both . and , as decimal separators\n            try:\n                return float(val.replace(',', '.'))\n            except ValueError:\n                return val\n        return val\n    \n    # Convert inputs\n    val_a = convert_value(a)\n    val_b = convert_value(b)\n    \n    # Compare numeric values\n    try:\n        if val_a == val_b:\n            return None\n        elif val_a > val_b:\n            return a\n        else:\n            return b\n    except TypeError:\n        # If comparison fails (e.g., different types that can't be compared)\n        return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):\n\n### Test\nassert candidate(1, 2) == 2\nassert candidate(1, 2.5) == 2.5\nassert candidate(2, 3) == 3\nassert candidate(5, 6) == 6",
    "timestamp": "2025-08-19T04:13:44.899095",
    "response_time": "3.71"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 138,
    "solution": "def is_equal_to_sum_even(n):\n    # If n is less than 8 (minimum sum of 4 even numbers: 2+2+2+2), return False\n    if n < 8:\n        return False\n    \n    # If n is odd, it can't be sum of even numbers\n    if n % 2 != 0:\n        return False\n    \n    # For n >= 8 and even, it's always possible to represent as sum of 4 even numbers\n    # Because we can always use combination of 2's and larger even numbers\n    # Example: 8 = 2+2+2+2\n    # Example: 10 = 2+2+2+4\n    # Example: 12 = 2+2+4+4\n    # and so on...\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):\n\n### Test\nassert candidate(4) == False\nassert candidate(6) == False\nassert candidate(8) == True\nassert candidate(10) == True",
    "timestamp": "2025-08-19T04:13:49.090134",
    "response_time": "4.19"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 139,
    "solution": "def special_factorial(n):\n    def factorial(x):\n        if x <= 1:\n            return 1\n        return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):\n\n### Test\nassert candidate(4) == 288, \"Test 4\"\nassert candidate(5) == 34560, \"Test 5\"",
    "timestamp": "2025-08-19T04:13:53.427326",
    "response_time": "4.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 140,
    "solution": "def fix_spaces(text):\n    # First, handle cases with more than 2 consecutive spaces\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    \n    # Then replace remaining single spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):\n\n### Test\nassert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:13:56.360394",
    "response_time": "2.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 141,
    "solution": "def file_name_check(file_name):\n    # Check if there's exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if name is empty\n    if not name:\n        return 'No'\n    \n    # Check if extension is valid\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if first character is a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Count digits in name\n    digit_count = sum(1 for c in name if c.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):\n\n### Test\nassert candidate(\"example.txt\") == 'Yes'\nassert candidate(\"1example.dll\") == 'No'\nassert candidate('s1sdf3.asd') == 'No'\nassert candidate('K.dll') == 'Yes'\nassert candidate('MY16FILE3.exe') == 'Yes'\nassert candidate('His12FILE94.exe') == 'No'\nassert candidate('_Y.txt') == 'No'\nassert candidate('?aREYA.exe') == 'No'\nassert candidate('/this_is_valid.dll') == 'No'\nassert candidate('this_is_valid.wow') == 'No'\nassert candidate('this_is_valid.txt') == 'Yes'\nassert candidate('this_is_valid.txtexe') == 'No'\nassert candidate('#this2_i4s_5valid.ten') == 'No'",
    "timestamp": "2025-08-19T04:14:02.200666",
    "response_time": "5.84"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 142,
    "solution": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3]) == 6\nassert candidate([1,4,9]) == 14\nassert candidate([]) == 0\nassert candidate([1,1,1,1,1,1,1,1,1]) == 9\nassert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3",
    "timestamp": "2025-08-19T04:14:08.804098",
    "response_time": "6.60"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 143,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):\n\n### Test\nassert candidate(\"This is a test\") == \"is\"\nassert candidate(\"lets go for swimming\") == \"go for\"\nassert candidate(\"there is no place available here\") == \"there is no place\"",
    "timestamp": "2025-08-19T04:14:12.957448",
    "response_time": "4.15"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 144,
    "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert string fractions to Fraction objects\n    frac_x = Fraction(*map(int, x.split('/')))\n    frac_n = Fraction(*map(int, n.split('/')))\n    \n    # Multiply the fractions\n    result = frac_x * frac_n\n    \n    # Check if the result is a whole number\n    return result.denominator == 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):\n\n### Test\nassert candidate(\"1/5\", \"5/1\") == True, 'test1'\nassert candidate(\"1/6\", \"2/1\") == False, 'test2'\nassert candidate(\"5/1\", \"3/1\") == True, 'test3'\nassert candidate(\"7/10\", \"10/2\") == False, 'test4'\nassert candidate(\"2/10\", \"50/10\") == True, 'test5'\nassert candidate(\"7/2\", \"4/2\") == True, 'test6'",
    "timestamp": "2025-08-19T04:14:15.409729",
    "response_time": "2.45"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 145,
    "solution": "def order_by_points(nums):\n    def digit_sum(n):\n        # Convert to absolute value to handle negative numbers\n        n = abs(n)\n        total = 0\n        while n:\n            total += n % 10\n            n //= 10\n        return total\n    \n    # Create list of tuples with (original_index, number, digit_sum)\n    indexed_nums = list(enumerate(nums))\n    # Sort by digit sum first, then by original index for stable sort\n    sorted_nums = sorted(indexed_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n    # Extract only the numbers from sorted list\n    return [x[1] for x in sorted_nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):\n\n### Test\nassert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nassert candidate([]) == []",
    "timestamp": "2025-08-19T04:14:18.891750",
    "response_time": "3.48"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 146,
    "solution": "def specialFilter(nums):\n    def is_first_last_odd(num):\n        # Convert number to string, handling negative numbers\n        num_str = str(abs(num))\n        \n        # Get first and last digits\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        \n        # Check if both first and last digits are odd\n        return first_digit % 2 == 1 and last_digit % 2 == 1\n    \n    # Count numbers that are > 10 and have odd first and last digits\n    count = sum(1 for num in nums if abs(num) > 10 and is_first_last_odd(num))\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):\n\n### Test\nassert candidate([5, -2, 1, -5]) == 0\nassert candidate([15, -73, 14, -15]) == 1\nassert candidate([33, -2, -3, 45, 21, 109]) == 2",
    "timestamp": "2025-08-19T04:14:22.955027",
    "response_time": "4.06"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 147,
    "solution": "def get_max_triples(n):\n    # Create array a according to formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counter for valid triples\n    count = 0\n    \n    # Check all possible triples where i < j < k\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):\n\n### Test\nassert candidate(5) == 1\nassert candidate(6) == 4",
    "timestamp": "2025-08-19T04:14:27.002173",
    "response_time": "4.05"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 148,
    "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    # Get indices of input planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    # Return planets between the two indices\n    if idx1 < idx2:\n        return tuple(planets[idx1 + 1:idx2])\n    else:\n        return tuple(planets[idx2 + 1:idx1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef bf(planet1, planet2):\n\n### Test\nassert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))\nassert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))\nassert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))",
    "timestamp": "2025-08-19T04:14:33.132217",
    "response_time": "6.13"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 149,
    "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort first by length, then alphabetically\n    return sorted(even_length_strings, key=lambda x: (len(x), x))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):\n\n### Test\nassert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\nassert candidate([\"d\", \"b\", \"c\", \"a\"]) == []",
    "timestamp": "2025-08-19T04:14:35.439469",
    "response_time": "2.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 150,
    "solution": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    \n    # Check if n is prime\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    \n    return x",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):\n\n### Test\nassert candidate(7, 34, 12) == 34\nassert candidate(15, 8, 5) == 5\nassert candidate(3, 33, 5212) == 33\nassert candidate(1259, 3, 52) == 3\nassert candidate(7919, -1, 12) == -1",
    "timestamp": "2025-08-19T04:14:38.729889",
    "response_time": "3.28"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 151,
    "solution": "def double_the_difference(lst):\n    \"\"\"\n    Takes a list of numbers and returns the sum of squares of all positive integers in the list.\n    Floating point numbers and negative numbers are ignored.\n    \"\"\"\n    return sum(x * x for x in lst if isinstance(x, int) and x > 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef double_the_difference(lst):\n\n### Test\nassert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:14:43.089851",
    "response_time": "4.36"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 152,
    "solution": "def compare(game,guess):\n    result = []\n    for g, s in zip(game, guess):\n        result.append(abs(g - s))\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):\n\n### Test\nassert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:14:46.019086",
    "response_time": "2.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 153,
    "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(ext):\n        uppercase = sum(1 for c in ext if c.isupper())\n        lowercase = sum(1 for c in ext if c.islower())\n        return uppercase - lowercase\n\n    if not extensions:\n        return class_name\n\n    strongest = extensions[0]\n    max_strength = calculate_strength(strongest)\n\n    for ext in extensions[1:]:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest = ext\n\n    return f\"{class_name}.{strongest}\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):\n\n### Test\nassert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\nassert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\nassert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nassert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'",
    "timestamp": "2025-08-19T04:14:50.845339",
    "response_time": "4.82"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 154,
    "solution": "def cycpattern_check(a, b):\n    if not a or not b or len(b) > len(a):\n        return False\n    \n    # Generate all possible rotations of b\n    b_length = len(b)\n    rotations = [b[i:] + b[:i] for i in range(b_length)]\n    \n    # Check if any rotation is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n            \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):\n\n### Test\nassert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\nassert  candidate(\"yello\",\"ell\") == True , \"test #1\"\nassert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"",
    "timestamp": "2025-08-19T04:14:54.046892",
    "response_time": "3.20"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 155,
    "solution": "def even_odd_count(num):\n    # Convert number to positive if negative\n    num = abs(num)\n    \n    # Convert number to string to process each digit\n    num_str = str(num)\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd digits\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):\n\n### Test\nassert candidate(7) == (0, 1)\nassert candidate(-78) == (1, 1)\nassert candidate(3452) == (2, 2)\nassert candidate(346211) == (3, 3)",
    "timestamp": "2025-08-19T04:14:57.248737",
    "response_time": "3.20"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 156,
    "solution": "def int_to_mini_roman(number):\n    roman_values = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_values:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):\n\n### Test\nassert candidate(19) == 'xix'\nassert candidate(152) == 'clii'\nassert candidate(251) == 'ccli'\nassert candidate(426) == 'cdxxvi'\nassert candidate(500) == 'd'\nassert candidate(1) == 'i'\nassert candidate(4) == 'iv'",
    "timestamp": "2025-08-19T04:15:00.517107",
    "response_time": "3.27"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 157,
    "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the longest side is c\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if it satisfies the Pythagorean theorem\n    # a\u00b2 + b\u00b2 = c\u00b2\n    return a*a + b*b == c*c",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef right_angle_triangle(a, b, c):\n\n### Test\nassert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1, 2, 3) == False\nassert candidate(10, 6, 8) == True\nassert candidate(2, 2, 2) == False\nassert candidate(7, 24, 25) == True",
    "timestamp": "2025-08-19T04:15:04.924405",
    "response_time": "4.40"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 158,
    "solution": "def find_max(words):\n    max_unique = 0\n    result = None\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n        elif unique_chars == max_unique:\n            result = min(result, word)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):\n\n### Test\nassert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\nassert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\nassert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\nassert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\nassert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'",
    "timestamp": "2025-08-19T04:15:14.106454",
    "response_time": "9.18"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 159,
    "solution": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate total carrots eaten and remaining after meals\n    \n    Args:\n        number (int): Number of carrots already eaten\n        need (int): Number of additional carrots needed\n        remaining (int): Number of carrots available\n        \n    Returns:\n        list: [total carrots eaten, carrots remaining]\n    \"\"\"\n    # Calculate how many carrots can actually be eaten\n    carrots_to_eat = min(need, remaining)\n    \n    # Calculate total eaten (previous + new)\n    total_eaten = number + carrots_to_eat\n    \n    # Calculate remaining carrots\n    carrots_left = remaining - carrots_to_eat\n    \n    return [total_eaten, carrots_left]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(5, 6, 10) == [11, 4], \"Error\"\nassert candidate(4, 8, 9) == [12, 1], \"Error\"\nassert candidate(1, 10, 10) == [11, 0], \"Error\"",
    "timestamp": "2025-08-19T04:15:18.839436",
    "response_time": "4.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 160,
    "solution": "def do_algebra(operator, operand):\n    result = operand[0]\n    op_index = 0\n    \n    for i in range(1, len(operand)):\n        current_op = operator[op_index]\n        if current_op == '+':\n            result += operand[i]\n        elif current_op == '-':\n            result -= operand[i]\n        elif current_op == '*':\n            result *= operand[i]\n        elif current_op == '/':\n            result /= operand[i]\n        elif current_op == '**':\n            result **= operand[i]\n        op_index += 1\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):\n\n### Test\nassert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nassert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9",
    "timestamp": "2025-08-19T04:15:21.630633",
    "response_time": "2.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 161,
    "solution": "def solve(s):\n    # Check if string contains any letters\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    \n    # If letters exist, swap case for letters and keep other characters as is\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):\n\n### Test\nassert candidate(\"AsDf\") == \"aSdF\"\nassert candidate(\"1234\") == \"4321\"\nassert candidate(\"ab\") == \"AB\"\nassert candidate(\"#a@C\") == \"#A@c\"",
    "timestamp": "2025-08-19T04:15:26.234972",
    "response_time": "4.60"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 162,
    "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):\n\n### Test\nassert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nassert candidate('') == None",
    "timestamp": "2025-08-19T04:15:28.015522",
    "response_time": "1.77"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half_td",
    "dataset_row_id": 163,
    "solution": "def generate_integers(a, b):\n    # Ensure a is smaller than b\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Create a list of even digits between start and end\n    result = [num for num in range(start, end + 1) if num < 10 and num % 2 == 0]\n    \n    # Sort in ascending order\n    result.sort()\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):\n\n### Test\nassert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\nassert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"",
    "timestamp": "2025-08-19T04:15:31.908692",
    "response_time": "3.89"
  }
]