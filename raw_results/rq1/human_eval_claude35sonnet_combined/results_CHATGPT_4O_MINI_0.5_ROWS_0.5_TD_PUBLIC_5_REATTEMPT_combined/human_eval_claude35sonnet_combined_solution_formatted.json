[
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 0,
    "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
    "timestamp": "2025-08-18T06:37:00.037990",
    "response_time": "5.51"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 1,
    "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    current_group = []\n    depth = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            \n            # When depth becomes 0, we've completed a group\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n                \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
    "timestamp": "2025-08-18T06:37:04.669621",
    "response_time": "4.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 2,
    "solution": "def truncate_number(number: float) -> float:\n    # Get the integer part using floor division\n    integer_part = number // 1\n    # Return the decimal part by subtracting integer part\n    return number - integer_part",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
    "timestamp": "2025-08-18T06:37:07.759766",
    "response_time": "3.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
    "timestamp": "2025-08-18T06:37:09.549891",
    "response_time": "1.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 4,
    "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n        \n    # Calculate mean\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute deviations from mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate average of absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
    "timestamp": "2025-08-18T06:37:13.143459",
    "response_time": "3.59"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 5,
    "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    \n    return result if numbers else []",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
    "timestamp": "2025-08-18T06:37:15.798518",
    "response_time": "2.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 6,
    "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n                \n        result.append(max_depth)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
    "timestamp": "2025-08-18T06:37:19.128756",
    "response_time": "3.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
    "timestamp": "2025-08-18T06:37:21.078501",
    "response_time": "1.95"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 8,
    "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (total_sum, product)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
    "timestamp": "2025-08-18T06:37:23.521775",
    "response_time": "2.44"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n        \n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-08-18T06:37:26.730739",
    "response_time": "3.21"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 10,
    "solution": "def make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    \n    # Helper function to check if a string is palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    # Find the longest palindrome suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            # Get the prefix that needs to be reversed and appended\n            prefix = string[:i]\n            # Return original string + reversed prefix\n            return string + prefix[::-1]\n    \n    # If no palindrome suffix found (shouldn't happen as single char is palindrome)\n    return string + string[:-1][::-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
    "timestamp": "2025-08-18T06:37:31.690926",
    "response_time": "4.96"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 11,
    "solution": "def string_xor(a: str, b: str) -> str:\n    # Convert strings to integers using base 2, perform XOR, then convert back to binary string\n    result = int(a, 2) ^ int(b, 2)\n    # Convert back to binary string and remove '0b' prefix\n    # zfill ensures the result has same length as input by padding with zeros if needed\n    return bin(result)[2:].zfill(len(a))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
    "timestamp": "2025-08-18T06:37:35.928193",
    "response_time": "4.23"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 12,
    "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    return max(strings, key=len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
    "timestamp": "2025-08-18T06:37:37.576294",
    "response_time": "1.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 13,
    "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
    "timestamp": "2025-08-18T06:37:40.554550",
    "response_time": "2.97"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 14,
    "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
    "timestamp": "2025-08-18T06:37:43.933585",
    "response_time": "3.37"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 15,
    "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
    "timestamp": "2025-08-18T06:37:46.372419",
    "response_time": "2.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 16,
    "solution": "def count_distinct_characters(string: str) -> int:\n    # Convert string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Use set to get unique characters and return its length\n    return len(set(string))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
    "timestamp": "2025-08-18T06:37:50.030657",
    "response_time": "3.66"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 17,
    "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        return []\n    \n    result = []\n    current_count = 0\n    \n    for char in music_string:\n        if char == '0':\n            # End of current note\n            if current_count > 0:\n                result.append(current_count)\n            current_count = 0\n        elif char == '|':\n            # Count the beat\n            current_count += 1\n    \n    # Add the last note if string doesn't end with 0\n    if current_count > 0:\n        result.append(current_count)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
    "timestamp": "2025-08-18T06:37:53.774163",
    "response_time": "3.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 18,
    "solution": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
    "timestamp": "2025-08-18T06:37:56.819349",
    "response_time": "3.04"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 19,
    "solution": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split input string into list of words\n    number_words = numbers.split()\n    \n    # Sort based on their numeric values\n    sorted_words = sorted(number_words, key=lambda x: number_map[x])\n    \n    # Join back into space-separated string\n    return ' '.join(sorted_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
    "timestamp": "2025-08-18T06:38:01.220080",
    "response_time": "4.40"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 20,
    "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    # Sort the list to make comparison easier\n    sorted_nums = sorted(numbers)\n    \n    # Compare adjacent numbers in sorted list\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
    "timestamp": "2025-08-18T06:38:06.485781",
    "response_time": "5.26"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 21,
    "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        return numbers\n        \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Handle case where all numbers are the same\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    \n    # Apply linear transformation: (x - min) / (max - min)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
    "timestamp": "2025-08-18T06:38:09.623025",
    "response_time": "3.13"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 22,
    "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
    "timestamp": "2025-08-18T06:38:11.646977",
    "response_time": "2.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 23,
    "solution": "def strlen(string: str) -> int:\n    return len(string)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
    "timestamp": "2025-08-18T06:38:13.395126",
    "response_time": "1.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 24,
    "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
    "timestamp": "2025-08-18T06:38:16.128852",
    "response_time": "2.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 25,
    "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n        \n        # Optimization: if divisor squared is greater than n,\n        # then n is prime if it's greater than 1\n        if divisor * divisor > n and n > 1:\n            factors.append(n)\n            break\n            \n    return factors",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
    "timestamp": "2025-08-18T06:38:20.097455",
    "response_time": "3.96"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 26,
    "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Count occurrences of each number\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Keep only numbers that appear once\n    return [num for num in numbers if count_dict[num] == 1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-08-18T06:38:23.280345",
    "response_time": "3.18"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 27,
    "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
    "timestamp": "2025-08-18T06:38:25.595923",
    "response_time": "2.31"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 28,
    "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
    "timestamp": "2025-08-18T06:38:27.333421",
    "response_time": "1.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 29,
    "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
    "timestamp": "2025-08-18T06:38:30.075760",
    "response_time": "2.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 30,
    "solution": "def get_positive(l: list):\n    return [num for num in l if num > 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
    "timestamp": "2025-08-18T06:38:32.044160",
    "response_time": "1.96"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 31,
    "solution": "def is_prime(n):\n    # 1 is not prime by definition\n    if n <= 1:\n        return False\n    \n    # 2 is prime\n    if n == 2:\n        return True\n    \n    # Even numbers greater than 2 are not prime\n    if n > 2 and n % 2 == 0:\n        return False\n    \n    # Check odd numbers up to square root of n\n    # We only need to check up to sqrt(n) because if n is divisible by a number greater than its square root,\n    # it would have already been divisible by a smaller number\n    max_divisor = int(n ** 0.5) + 1\n    for i in range(3, max_divisor, 2):\n        if n % i == 0:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
    "timestamp": "2025-08-18T06:38:37.091399",
    "response_time": "5.03"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 32,
    "solution": "def poly(xs: list, x: float):\n    result = 0\n    power = 1\n    for coef in xs:\n        result += coef * power\n        power *= x\n    return result\n\ndef find_zero(xs: list):\n    # Binary search for zero point\n    # We know solution exists because of problem constraints\n    # (even number of coefficients and largest non-zero coefficient)\n    \n    # Find reasonable search bounds\n    # For polynomial with leading coefficient positive,\n    # value becomes positive for large enough x\n    # and follows sign of constant term for very negative x\n    if xs[-1] > 0:\n        left = -1000\n        right = 1000\n    else:\n        left = -1000\n        right = 1000\n        \n    # Binary search\n    for _ in range(50):  # 50 iterations gives good precision\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:  # Close enough to zero\n            return mid\n            \n        if val > 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
    "timestamp": "2025-08-18T06:38:43.874305",
    "response_time": "6.78"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 33,
    "solution": "def sort_third(l: list):\n    # Get indices divisible by 3\n    third_indices = [i for i in range(0, len(l)) if i % 3 == 0]\n    \n    # Get values at those indices and sort them\n    third_values = sorted([l[i] for i in third_indices])\n    \n    # Create a copy of the original list\n    result = l.copy()\n    \n    # Replace values at indices divisible by 3 with sorted values\n    for index, value in zip(third_indices, third_values):\n        result[index] = value\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
    "timestamp": "2025-08-18T06:38:46.852756",
    "response_time": "2.97"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 34,
    "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements from input list\"\"\"\n    return sorted(set(l))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
    "timestamp": "2025-08-18T06:38:48.835485",
    "response_time": "1.98"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 35,
    "solution": "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
    "timestamp": "2025-08-18T06:38:50.765074",
    "response_time": "1.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 36,
    "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert number to string and count occurrences of '7'\n            count += str(i).count('7')\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
    "timestamp": "2025-08-18T06:38:54.095549",
    "response_time": "3.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 37,
    "solution": "def sort_even(l: list):\n    # Extract values at even indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even-indexed values\n    even_indices.sort()\n    \n    # Create result list by keeping odd indices same and replacing even indices with sorted values\n    result = []\n    even_counter = 0\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_counter])\n            even_counter += 1\n        else:\n            result.append(l[i])\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
    "timestamp": "2025-08-18T06:38:57.893252",
    "response_time": "3.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 38,
    "solution": "def encode_cyclic(s: str):\n    if not s:\n        return \"\"\n    \n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        # Pad with spaces if group is less than 3 chars\n        group = group.ljust(3)\n        \n        # Cycle the group: abc -> bca\n        cycled = group[1] + group[2] + group[0]\n        result.append(cycled)\n    \n    # Join and strip any padding spaces from the end\n    return ''.join(result).rstrip()\n\ndef decode_cyclic(s: str):\n    if not s:\n        return \"\"\n    \n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        # Pad with spaces if group is less than 3 chars\n        group = group.ljust(3)\n        \n        # Reverse cycle the group: bca -> abc\n        decycled = group[2] + group[0] + group[1]\n        result.append(decycled)\n    \n    # Join and strip any padding spaces from the end\n    return ''.join(result).rstrip()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
    "timestamp": "2025-08-18T06:39:02.891816",
    "response_time": "4.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 39,
    "solution": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    if n < 1:\n        return None\n        \n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for fib in fib_generator():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
    "timestamp": "2025-08-18T06:39:08.104533",
    "response_time": "5.21"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 40,
    "solution": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    # Need at least 3 elements to form a triple\n    if n < 3:\n        return False\n    \n    # Sort the list for efficient searching\n    l.sort()\n    \n    # Fix the first element and use two pointers for the remaining two elements\n    for i in range(n-2):\n        # Skip duplicates for first element\n        if i > 0 and l[i] == l[i-1]:\n            continue\n            \n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
    "timestamp": "2025-08-18T06:39:12.626377",
    "response_time": "4.52"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 41,
    "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Calculate number of collisions between n cars moving left to right\n    and n cars moving right to left.\n    \n    Args:\n        n: Number of cars moving in each direction\n        \n    Returns:\n        Total number of collisions that will occur\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    # So total collisions = n * n\n    return n * n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):",
    "timestamp": "2025-08-18T06:39:16.516836",
    "response_time": "3.89"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 42,
    "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):",
    "timestamp": "2025-08-18T06:39:18.738186",
    "response_time": "2.22"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 43,
    "solution": "def pairs_sum_to_zero(l):\n    # Create a set to store seen numbers\n    seen = set()\n    \n    # Iterate through each number in the list\n    for num in l:\n        # If we've seen the negative of current number, we found a pair\n        if -num in seen:\n            return True\n        # Add current number to seen set\n        seen.add(num)\n    \n    # No pairs found that sum to zero\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):",
    "timestamp": "2025-08-18T06:39:21.827215",
    "response_time": "3.08"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 44,
    "solution": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    num = x\n    \n    while num > 0:\n        result = str(num % base) + result\n        num //= base\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):",
    "timestamp": "2025-08-18T06:39:25.205395",
    "response_time": "3.37"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 45,
    "solution": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of a side and height.\n    \n    Args:\n        a (float): Length of the base side\n        h (float): Height/altitude of the triangle\n    \n    Returns:\n        float: Area of the triangle\n    \"\"\"\n    return (a * h) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):",
    "timestamp": "2025-08-18T06:39:27.436934",
    "response_time": "2.23"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 46,
    "solution": "def fib4(n: int):\n    if n < 0:\n        return 0\n    \n    # Handle base cases\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n        \n    # Initialize first 4 numbers\n    dp = [0, 0, 2, 0]\n    \n    # Calculate subsequent numbers using the previous 4 numbers\n    for i in range(4, n + 1):\n        next_num = dp[0] + dp[1] + dp[2] + dp[3]\n        # Shift the window by removing first element and adding new one\n        dp.pop(0)\n        dp.append(next_num)\n    \n    return dp[-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):",
    "timestamp": "2025-08-18T06:39:32.272536",
    "response_time": "4.83"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 47,
    "solution": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 0:\n        # If even length, average the two middle values\n        mid_right = n // 2\n        mid_left = mid_right - 1\n        return (sorted_list[mid_left] + sorted_list[mid_right]) / 2\n    else:\n        # If odd length, return the middle value\n        return sorted_list[n // 2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):",
    "timestamp": "2025-08-18T06:39:34.891898",
    "response_time": "2.61"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 48,
    "solution": "def is_palindrome(text: str):\n    # Empty string is considered palindrome\n    if not text:\n        return True\n    \n    # Compare characters from start and end moving inward\n    left = 0\n    right = len(text) - 1\n    \n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n        \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):",
    "timestamp": "2025-08-18T06:39:38.166572",
    "response_time": "3.27"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 49,
    "solution": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    \n    # Use binary exponentiation to calculate 2^n mod p efficiently\n    result = 1\n    base = 2\n    \n    while n > 0:\n        # If current bit is 1, multiply result with current base\n        if n & 1:\n            result = (result * base) % p\n        # Square the base for next bit\n        base = (base * base) % p\n        # Right shift n by 1 to process next bit\n        n >>= 1\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):",
    "timestamp": "2025-08-18T06:39:41.254724",
    "response_time": "3.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 50,
    "solution": "def encode_shift(s: str):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Determine the base (97 for lowercase, 65 for uppercase)\n            base = 97 if char.islower() else 65\n            # Convert to 0-25 range, shift by 5, mod 26 to wrap around, then back to ASCII\n            shifted = chr((ord(char) - base + 5) % 26 + base)\n            result += shifted\n        else:\n            result += char\n    return result\n\ndef decode_shift(s: str):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Determine the base (97 for lowercase, 65 for uppercase)\n            base = 97 if char.islower() else 65\n            # Convert to 0-25 range, shift back by 5, mod 26 to wrap around, then back to ASCII\n            shifted = chr((ord(char) - base - 5) % 26 + base)\n            result += shifted\n        else:\n            result += char\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):",
    "timestamp": "2025-08-18T06:39:47.811848",
    "response_time": "6.56"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 51,
    "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):",
    "timestamp": "2025-08-18T06:39:49.697478",
    "response_time": "1.88"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 52,
    "solution": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):",
    "timestamp": "2025-08-18T06:39:51.073533",
    "response_time": "1.37"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 53,
    "solution": "def add(x: int, y: int):\n    return x + y",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):",
    "timestamp": "2025-08-18T06:39:53.246104",
    "response_time": "2.17"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 54,
    "solution": "def same_chars(s0: str, s1: str):\n    # Convert strings to sets to get unique characters\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Compare the sets - they should be equal if they have same characters\n    return set0 == set1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):",
    "timestamp": "2025-08-18T06:39:56.223956",
    "response_time": "2.97"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 55,
    "solution": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):",
    "timestamp": "2025-08-18T06:39:58.419046",
    "response_time": "2.19"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 56,
    "solution": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-08-18T06:40:00.805090",
    "response_time": "2.38"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 57,
    "solution": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n        \n    # Check if monotonically increasing\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    \n    # Check if monotonically decreasing\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):",
    "timestamp": "2025-08-18T06:40:03.712272",
    "response_time": "2.91"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 58,
    "solution": "def common(l1: list, l2: list):\n    # Convert lists to sets to get unique elements and find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    # Get common elements and convert back to sorted list\n    return sorted(set1.intersection(set2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):",
    "timestamp": "2025-08-18T06:40:07.455266",
    "response_time": "3.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 59,
    "solution": "def largest_prime_factor(n: int):\n    # Start with smallest prime factor 2\n    factor = 2\n    \n    # Keep dividing by factor as long as possible\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            # If current factor doesn't divide n anymore, increment\n            # For odd numbers, we can skip even numbers after 2\n            factor = factor + 1 if factor == 2 else factor + 2\n            \n    # The last factor used is the largest prime factor\n    return factor",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):",
    "timestamp": "2025-08-18T06:40:12.240525",
    "response_time": "4.77"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 60,
    "solution": "def sum_to_n(n: int):\n    \"\"\"\n    Calculate the sum of all integers from 1 to n inclusive.\n    \n    Args:\n        n (int): The upper bound of the sequence\n        \n    Returns:\n        int: The sum of all numbers from 1 to n\n    \"\"\"\n    return (n * (n + 1)) // 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):",
    "timestamp": "2025-08-18T06:40:14.927513",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 61,
    "solution": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:  # closing bracket before opening bracket\n            return False\n    return count == 0  # True if all brackets are matched",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-08-18T06:40:17.731020",
    "response_time": "2.80"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 62,
    "solution": "def derivative(xs: list):\n    if len(xs) <= 1:\n        return [0] * (len(xs) - 1)\n    \n    # For each term, multiply coefficient by its power and reduce power by 1\n    result = []\n    for power, coef in enumerate(xs[1:], 1):\n        result.append(power * coef)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):",
    "timestamp": "2025-08-18T06:40:22.319906",
    "response_time": "4.58"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 63,
    "solution": "def fibfib(n: int):\n    # Base cases\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n        \n    # Initialize first three numbers\n    a, b, c = 0, 0, 1\n    \n    # Calculate next numbers using previous three\n    for i in range(3, n + 1):\n        d = a + b + c\n        # Shift values\n        a = b\n        b = c\n        c = d\n        \n    return c",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):",
    "timestamp": "2025-08-18T06:40:25.671763",
    "response_time": "3.35"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 64,
    "solution": "def vowels_count(s):\n    vowels = set('aeiou')\n    count = 0\n    \n    # Count regular vowels\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    \n    # Check if 'y' is at the end and count it if it is\n    if s and s[-1].lower() == 'y':\n        count += 1\n        \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):",
    "timestamp": "2025-08-18T06:40:28.436048",
    "response_time": "2.76"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 65,
    "solution": "def circular_shift(x, shift):\n    # Convert number to string for easier manipulation\n    num_str = str(x)\n    length = len(num_str)\n    \n    # If shift is greater than length, just reverse the string\n    if shift >= length:\n        return num_str[::-1]\n    \n    # Calculate effective shift (in case shift > length)\n    effective_shift = shift % length\n    \n    # Perform circular shift\n    return num_str[-effective_shift:] + num_str[:-effective_shift]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):",
    "timestamp": "2025-08-18T06:40:31.343903",
    "response_time": "2.91"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 66,
    "solution": "def digitSum(s):\n    # Initialize sum for uppercase ASCII values\n    ascii_sum = 0\n    \n    # Iterate through each character in string\n    for char in s:\n        # Check if character is uppercase\n        if char.isupper():\n            # Add ASCII value of uppercase character to sum\n            ascii_sum += ord(char)\n            \n    return ascii_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):",
    "timestamp": "2025-08-18T06:40:33.820395",
    "response_time": "2.47"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 67,
    "solution": "import re\n\ndef fruit_distribution(s, n):\n    # Extract numbers before 'apples' and 'oranges' using regex\n    numbers = re.findall(r'(\\d+)\\s*(?:apples|oranges)', s)\n    \n    # Convert extracted numbers to integers\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate mangoes by subtracting apples and oranges from total\n    mangoes = n - apples - oranges\n    \n    return mangoes",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):",
    "timestamp": "2025-08-18T06:40:36.410751",
    "response_time": "2.59"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 68,
    "solution": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    # Find smallest even number and its index\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    \n    # If no even number found, return -1\n    if smallest_even_index == -1:\n        return -1\n        \n    return smallest_even",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):",
    "timestamp": "2025-08-18T06:40:39.482319",
    "response_time": "3.07"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 69,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef search(lst):",
    "timestamp": "2025-08-18T06:40:44.037934",
    "response_time": "4.55"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 70,
    "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    result = []\n    temp = lst.copy()\n    \n    while temp:\n        # Get max and min alternately\n        if len(result) % 2 == 0:\n            current = max(temp)\n        else:\n            current = min(temp)\n            \n        result.append(current)\n        temp.remove(current)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef strange_sort_list(lst):",
    "timestamp": "2025-08-18T06:40:46.670628",
    "response_time": "2.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if triangle is possible using triangle inequality theorem\n    if (a + b <= c) or (b + c <= a) or (a + c <= b):\n        return 0\n    \n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef triangle_area(a, b, c):",
    "timestamp": "2025-08-18T06:40:49.562357",
    "response_time": "2.89"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 72,
    "solution": "def will_it_fly(q, w):\n    # Check if list is empty or weight limit is 0\n    if not q or w <= 0:\n        return False\n        \n    # Check if list is symmetric\n    left = 0\n    right = len(q) - 1\n    while left < right:\n        if q[left] != q[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    # Check if total weight is within limit\n    if sum(q) > w:\n        return False\n        \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef will_it_fly(q,w):",
    "timestamp": "2025-08-18T06:40:52.505888",
    "response_time": "2.94"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 73,
    "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from start and end moving towards center\n    for i in range(n // 2):\n        # If elements at mirror positions are different, need to change one\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):",
    "timestamp": "2025-08-18T06:40:56.413340",
    "response_time": "3.90"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 74,
    "solution": "def total_match(lst1, lst2):\n    # Create frequency dictionaries for both lists\n    freq1 = {}\n    freq2 = {}\n    \n    # Count frequencies in first list\n    for num in lst1:\n        freq1[num] = freq1.get(num, 0) + 1\n        \n    # Count frequencies in second list\n    for num in lst2:\n        freq2[num] = freq2.get(num, 0) + 1\n    \n    # Count total matches considering frequencies\n    matches = 0\n    for num in freq1:\n        if num in freq2:\n            # Take minimum frequency from both lists\n            matches += min(freq1[num], freq2[num])\n            \n    return matches",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef total_match(lst1, lst2):",
    "timestamp": "2025-08-18T06:41:01.461102",
    "response_time": "5.05"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 75,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n        \n    # Find prime factors\n    factors = []\n    n = a\n    for i in range(2, a + 1):\n        if not is_prime(i):\n            continue\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:\n            break\n            \n    # Check if exactly 3 prime factors\n    return len(factors) == 3",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):",
    "timestamp": "2025-08-18T06:41:04.691190",
    "response_time": "3.22"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 76,
    "solution": "import math\n\ndef is_simple_power(x, n):\n    # Handle special cases\n    if x == 1:\n        return True\n    if n == 1 or x < 1 or n < 1:\n        return False\n    \n    # Calculate the logarithm of x with base n\n    # If the result is an integer, x is a simple power of n\n    log_val = math.log(x, n)\n    \n    # Check if log_val is effectively an integer\n    # Using round to handle floating point precision issues\n    return abs(round(log_val) - log_val) < 1e-10 and n ** int(round(log_val)) == x",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):",
    "timestamp": "2025-08-18T06:41:08.810713",
    "response_time": "4.12"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 77,
    "solution": "def iscube(a):\n    # Check if negative\n    if a < 0:\n        return False\n    \n    # Find cube root using exponent 1/3\n    cube_root = round(a ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the original number\n    return cube_root ** 3 == a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef iscube(a):",
    "timestamp": "2025-08-18T06:41:12.501926",
    "response_time": "3.69"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 78,
    "solution": "def hex_key(num):\n    # Define prime hex digits (both numeric and alpha)\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count occurrences of prime hex digits in input string\n    count = sum(1 for digit in num if digit in prime_hex)\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):",
    "timestamp": "2025-08-18T06:41:15.597466",
    "response_time": "3.09"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 79,
    "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    \n    binary = \"\"\n    num = abs(decimal)\n    \n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n        \n    if decimal < 0:\n        # Handle negative numbers by adding a minus sign\n        binary = \"-\" + binary\n        \n    return binary",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):",
    "timestamp": "2025-08-18T06:41:18.620029",
    "response_time": "3.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 80,
    "solution": "def is_happy(s):\n    # Check if length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check each window of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Get the current window of 3 characters\n        window = s[i:i+3]\n        # If any character repeats in the window, string is not happy\n        if len(set(window)) != 3:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):",
    "timestamp": "2025-08-18T06:41:21.338882",
    "response_time": "2.71"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 81,
    "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n            \n    return letter_grades",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):",
    "timestamp": "2025-08-18T06:41:25.867012",
    "response_time": "4.52"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 82,
    "solution": "def prime_length(string):\n    length = len(string)\n    \n    # Handle edge cases\n    if length < 2:\n        return False\n        \n    # Check if length is prime\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):",
    "timestamp": "2025-08-19T04:10:08.248341",
    "response_time": "9.90"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 83,
    "solution": "def starts_one_ends(n):\n    # For n-digit numbers, range is from 10^(n-1) to 10^n - 1\n    # Count numbers that start with 1: 1xxxx where x can be 0-9\n    # Count numbers that end with 1: xxxx1 where x can be 1-9\n    # Need to handle overlap for numbers that both start and end with 1\n    \n    # Numbers starting with 1\n    start_with_1 = 10 ** (n-1)  # 1 followed by n-1 digits (0-9)\n    \n    # Numbers ending with 1\n    end_with_1 = 9 * 10 ** (n-1)  # n-1 digits (1-9) followed by 1\n    \n    # Numbers both starting and ending with 1\n    both_1 = 10 ** (n-2)  # 1xxxx1 where x can be 0-9\n    \n    # Total count = start_with_1 + end_with_1 - both_1\n    # We subtract both_1 because these numbers were counted twice\n    return start_with_1 + end_with_1 - both_1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):",
    "timestamp": "2025-08-19T04:10:16.927108",
    "response_time": "8.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 84,
    "solution": "def solve(N):\n    # Convert N to string to process digits\n    digits = str(N)\n    \n    # Calculate sum of digits\n    digit_sum = sum(int(d) for d in digits)\n    \n    # Convert sum to binary string and remove '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):",
    "timestamp": "2025-08-19T04:10:19.856593",
    "response_time": "2.93"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 85,
    "solution": "def add(lst):\n    # Initialize sum to 0\n    even_sum = 0\n    \n    # Iterate through odd indices (1, 3, 5, etc)\n    for i in range(1, len(lst), 2):\n        # If element at odd index is even, add it to sum\n        if lst[i] % 2 == 0:\n            even_sum += lst[i]\n            \n    return even_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):",
    "timestamp": "2025-08-19T04:10:24.022691",
    "response_time": "4.16"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 86,
    "solution": "def anti_shuffle(s):\n    # Split the string into words while preserving spaces\n    words = s.split(' ')\n    \n    # Process each word\n    ordered_words = []\n    for word in words:\n        if word:  # If word is not empty\n            # Sort the characters in the word\n            sorted_chars = sorted(word)\n            # Join the sorted characters back into a word\n            ordered_word = ''.join(sorted_chars)\n            ordered_words.append(ordered_word)\n        else:  # If word is empty (multiple spaces)\n            ordered_words.append('')\n    \n    # Join the words back together with spaces\n    return ' '.join(ordered_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):",
    "timestamp": "2025-08-19T04:10:27.240745",
    "response_time": "3.22"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 87,
    "solution": "def get_row(lst, x):\n    # Create list to store coordinates\n    coordinates = []\n    \n    # Iterate through each row\n    for row_idx in range(len(lst)):\n        # Iterate through each column in current row\n        for col_idx in range(len(lst[row_idx])):\n            # If value matches x, add coordinates\n            if lst[row_idx][col_idx] == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort coordinates by row ascending, then by column descending\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):",
    "timestamp": "2025-08-19T04:10:36.822387",
    "response_time": "9.58"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 88,
    "solution": "def sort_array(array):\n    # Handle empty array case\n    if not array:\n        return []\n    \n    # Calculate sum of first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Create a copy of the array to avoid modifying original\n    result = array.copy()\n    \n    # Sort ascending if sum is odd, descending if sum is even\n    if sum_first_last % 2 == 1:\n        result.sort()  # ascending order\n    else:\n        result.sort(reverse=True)  # descending order\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):",
    "timestamp": "2025-08-19T04:10:42.354014",
    "response_time": "5.53"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 89,
    "solution": "def encrypt(s):\n    # Create shifted alphabet mapping\n    original = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 4  # 2 * 2 places\n    shifted = original[shift:] + original[:shift]\n    \n    # Create translation dictionary\n    trans_dict = str.maketrans(original, shifted)\n    \n    # Return encrypted string using translation\n    return s.translate(trans_dict)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):",
    "timestamp": "2025-08-19T04:10:44.981069",
    "response_time": "2.62"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 90,
    "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort\n    unique_sorted = sorted(set(lst))\n    \n    # If we have at least 2 unique elements, return the second one\n    if len(unique_sorted) >= 2:\n        return unique_sorted[1]\n    \n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):",
    "timestamp": "2025-08-19T04:10:47.667244",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 91,
    "solution": "def is_bored(S):\n    # Split into sentences using multiple delimiters\n    sentences = []\n    current = \"\"\n    \n    for char in S:\n        if char in '.?!':\n            current = current.strip()\n            if current:\n                sentences.append(current)\n            current = \"\"\n        else:\n            current += char\n    \n    # Add the last sentence if it exists\n    if current.strip():\n        sentences.append(current.strip())\n    \n    # Count sentences that start with 'I '\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n            \n    return boredom_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):",
    "timestamp": "2025-08-19T04:10:54.317510",
    "response_time": "6.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 92,
    "solution": "def any_int(x, y, z):\n    \"\"\"\n    Returns True if any of the three input parameters is an integer, False otherwise.\n    \"\"\"\n    return any(isinstance(num, int) for num in (x, y, z))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef any_int(x, y, z):",
    "timestamp": "2025-08-19T04:10:57.489812",
    "response_time": "3.17"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 93,
    "solution": "def encode(message):\n    # Vowels mapping - 2 letters ahead\n    vowel_map = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    result = \"\"\n    for char in message:\n        # If it's a vowel, replace with mapped letter\n        if char in vowel_map:\n            result += vowel_map[char]\n        # If it's not a vowel, swap case\n        else:\n            result += char.swapcase()\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):",
    "timestamp": "2025-08-19T04:11:03.073606",
    "response_time": "5.58"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 94,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    # Find largest prime in list\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    # If no prime found, return 0\n    if largest_prime == -1:\n        return 0\n    \n    # Sum digits of largest prime\n    return sum(int(d) for d in str(largest_prime))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):",
    "timestamp": "2025-08-19T04:11:08.097070",
    "response_time": "5.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 95,
    "solution": "def check_dict_case(dict):\n    # Return False if dictionary is empty\n    if not dict:\n        return False\n    \n    # Get all keys from dictionary\n    keys = list(dict.keys())\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in keys):\n        return False\n        \n    # Check if first key is upper or lower case\n    first_key = keys[0]\n    is_upper = first_key.isupper()\n    is_lower = first_key.islower()\n    \n    # If first key is neither upper nor lower, return False\n    if not (is_upper or is_lower):\n        return False\n    \n    # Check all other keys match the case of first key\n    for key in keys[1:]:\n        if is_upper and not key.isupper():\n            return False\n        if is_lower and not key.islower():\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):",
    "timestamp": "2025-08-19T04:11:13.400611",
    "response_time": "5.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 96,
    "solution": "def count_up_to(n):\n    if n <= 2:\n        return []\n        \n    # Initialize array to track prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Sieve of Eratosthenes algorithm\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Collect all prime numbers less than n\n    return [i for i in range(n) if is_prime[i]]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):",
    "timestamp": "2025-08-19T04:11:17.705097",
    "response_time": "4.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 97,
    "solution": "def multiply(a, b):\n    # Get absolute values to handle negative numbers\n    a, b = abs(a), abs(b)\n    \n    # Extract unit digits using modulo 10\n    unit_a = a % 10\n    unit_b = b % 10\n    \n    # Return their product\n    return unit_a * unit_b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):",
    "timestamp": "2025-08-19T04:11:19.838438",
    "response_time": "2.13"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 98,
    "solution": "def count_upper(s):\n    # Define uppercase vowels\n    upper_vowels = set('AEIOU')\n    \n    # Count uppercase vowels at even indices\n    count = sum(1 for i in range(0, len(s), 2) if s[i] in upper_vowels)\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):",
    "timestamp": "2025-08-19T04:11:21.776684",
    "response_time": "1.94"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 99,
    "solution": "def closest_integer(value):\n    # Get the decimal part by subtracting the integer part\n    decimal_part = abs(value - int(value))\n    \n    # If decimal part is exactly 0.5\n    if decimal_part == 0.5:\n        # For positive numbers, round up\n        if value > 0:\n            return int(value) + 1\n        # For negative numbers, round toward zero\n        else:\n            return int(value)\n    \n    # For all other cases, use built-in round function\n    return round(value)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef closest_integer(value):",
    "timestamp": "2025-08-19T04:11:28.619448",
    "response_time": "6.84"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 100,
    "solution": "def make_a_pile(n):\n    result = [n]  # First level has n stones\n    current = n\n    \n    # Build remaining n-1 levels\n    for _ in range(n-1):\n        # If current number is even, get next even number\n        if current % 2 == 0:\n            current += 2\n        # If current number is odd, get next odd number\n        else:\n            current += 2\n        result.append(current)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):",
    "timestamp": "2025-08-19T04:11:31.169255",
    "response_time": "2.55"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 101,
    "solution": "def words_string(s):\n    # Replace commas with spaces to handle both separators\n    s = s.replace(',', ' ')\n    # Split by spaces and filter out empty strings\n    return [word for word in s.split() if word]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):",
    "timestamp": "2025-08-19T04:11:34.788962",
    "response_time": "3.62"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 102,
    "solution": "def choose_num(x, y):\n    # Convert x to next even number if x is odd\n    if x % 2 != 0:\n        x = x + 1\n    \n    # If x is now greater than y, no even numbers in range\n    if x > y:\n        return -1\n    \n    # Find largest even number less than or equal to y\n    if y % 2 == 0:\n        return y\n    else:\n        return y - 1 if y - 1 >= x else -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):",
    "timestamp": "2025-08-19T04:11:38.443918",
    "response_time": "3.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 103,
    "solution": "def rounded_avg(n, m):\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the sum of numbers from n to m\n    total = sum(range(n, m + 1))\n    \n    # Calculate the count of numbers\n    count = m - n + 1\n    \n    # Calculate average and round to nearest integer\n    avg = round(total / count)\n    \n    # Convert to binary string\n    return bin(avg)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):",
    "timestamp": "2025-08-19T04:11:41.161726",
    "response_time": "2.72"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 104,
    "solution": "def unique_digits(x):\n    def has_no_even_digits(num):\n        # Convert number to string to check each digit\n        return all(int(digit) % 2 == 1 for digit in str(num))\n    \n    # Filter numbers that have no even digits and sort the result\n    return sorted([num for num in x if has_no_even_digits(num)])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):",
    "timestamp": "2025-08-19T04:11:44.818457",
    "response_time": "3.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 105,
    "solution": "def by_length(arr):\n    # Dictionary mapping numbers to their word representations\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter numbers between 1 and 9, sort them, and reverse\n    filtered_nums = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Convert numbers to words\n    return [num_to_word[num] for num in filtered_nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):",
    "timestamp": "2025-08-19T04:11:47.653559",
    "response_time": "2.83"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 106,
    "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # even index\n            # Calculate factorial\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # odd index\n            # Calculate sum from 1 to i\n            sum_to_i = sum(range(1, i+1))\n            result.append(sum_to_i)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):",
    "timestamp": "2025-08-19T04:11:49.931322",
    "response_time": "2.28"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 107,
    "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):",
    "timestamp": "2025-08-19T04:11:54.054879",
    "response_time": "4.12"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 108,
    "solution": "def count_nums(arr):\n    def sum_digits(num):\n        # Convert number to string, handling negative numbers\n        num_str = str(abs(num))\n        total = 0\n        \n        # Handle first digit for negative numbers\n        if num < 0:\n            total -= int(num_str[0])\n            num_str = num_str[1:]\n        \n        # Sum remaining digits\n        for digit in num_str:\n            total += int(digit)\n            \n        return total\n    \n    # Count numbers where sum of digits > 0\n    return sum(1 for num in arr if sum_digits(num) > 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):",
    "timestamp": "2025-08-19T04:11:59.359621",
    "response_time": "5.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 109,
    "solution": "def move_one_ball(arr):\n    # If array is empty or has 1 element, it's already sorted\n    if len(arr) <= 1:\n        return True\n    \n    # Find the number of elements\n    n = len(arr)\n    \n    # Find the index where the array first becomes unsorted\n    break_point = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            break_point = i\n            break\n    \n    # If no break point found, array is already sorted\n    if break_point == -1:\n        return True\n    \n    # Check if we can make array sorted by right rotations\n    # For this, the first part (after rotation) should be less than or equal to last part\n    # And array should be sorted in both parts\n    for i in range(break_point, n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    # Check if first element of rotated part is less than or equal to last element of non-rotated part\n    if arr[n-1] > arr[0]:\n        return False\n    \n    # Check if last part of array can connect with first part\n    for i in range(break_point-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):",
    "timestamp": "2025-08-19T04:12:05.946197",
    "response_time": "6.59"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 110,
    "solution": "def exchange(lst1, lst2):\n    # Count total even numbers in both lists\n    total_even = sum(1 for x in lst1 + lst2 if x % 2 == 0)\n    \n    # Count how many numbers we need in lst1\n    needed = len(lst1)\n    \n    # If we have enough even numbers to fill lst1, return \"YES\"\n    # Otherwise, return \"NO\"\n    return \"YES\" if total_even >= needed else \"NO\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):",
    "timestamp": "2025-08-19T04:12:10.190936",
    "response_time": "4.24"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 111,
    "solution": "from collections import Counter\n\ndef histogram(test):\n    # Split the string into individual letters\n    letters = test.split()\n    \n    # Count occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    if not letter_counts:\n        return {}\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Create dictionary with letters having maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):",
    "timestamp": "2025-08-19T04:12:15.112822",
    "response_time": "4.92"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 112,
    "solution": "def reverse_delete(s,c):\n    # Remove all characters from s that appear in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if result is palindrome by comparing with its reverse\n    is_palindrome = result == result[::-1]\n    \n    # Return tuple with result string and palindrome boolean\n    return (result, is_palindrome)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):",
    "timestamp": "2025-08-19T04:12:19.007220",
    "response_time": "3.89"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 113,
    "solution": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 == 1)\n        result.append(odd_count)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):",
    "timestamp": "2025-08-19T04:12:21.326692",
    "response_time": "2.32"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 114,
    "solution": "def minSubArraySum(nums):\n    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # For each starting position\n    for i in range(n):\n        curr_sum = nums[i]\n        min_sum = min(min_sum, curr_sum)\n        \n        # Extend subarray to the right\n        for j in range(i + 1, n):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n    \n    return min_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):",
    "timestamp": "2025-08-19T04:12:25.625900",
    "response_time": "4.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 115,
    "solution": "def max_fill(grid, capacity):\n    # Calculate total operations needed for each well\n    operations = []\n    \n    # For each well (row)\n    for well in grid:\n        # Count water units (1s) in the well\n        water_units = sum(well)\n        \n        # Calculate number of bucket operations needed\n        # Using ceiling division to handle partial fills\n        if water_units == 0:\n            ops = 0\n        else:\n            ops = (water_units + capacity - 1) // capacity\n            \n        operations.append(ops)\n    \n    # Return maximum operations needed among all wells\n    return max(operations) if operations else 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):",
    "timestamp": "2025-08-19T04:12:30.442347",
    "response_time": "4.82"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 116,
    "solution": "def sort_array(arr):\n    # Create tuples of (number, count of 1s in binary) for each number\n    binary_counts = [(num, bin(num).count('1')) for num in arr]\n    \n    # Sort first by count of 1s, then by decimal value\n    sorted_nums = sorted(binary_counts, key=lambda x: (x[1], x[0]))\n    \n    # Return just the numbers in sorted order\n    return [num for num, _ in sorted_nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):",
    "timestamp": "2025-08-19T04:12:33.202404",
    "response_time": "2.76"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 117,
    "solution": "def select_words(s, n):\n    # Define consonants\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # If string is empty, return empty list\n    if not s:\n        return []\n    \n    # Split string into words\n    words = s.split()\n    result = []\n    \n    # Check each word\n    for word in words:\n        # Count consonants in word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If consonant count matches n, add word to result\n        if consonant_count == n:\n            result.append(word)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):",
    "timestamp": "2025-08-19T04:12:37.310535",
    "response_time": "4.10"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 118,
    "solution": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    \n    # Iterate through the word from right to left\n    for i in range(len(word)-2, 0, -1):\n        # Check if current character is a vowel\n        if word[i] in vowels:\n            # Check if surrounded by consonants\n            if (word[i-1] not in vowels) and (word[i+1] not in vowels):\n                return word[i]\n    \n    return \"\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):",
    "timestamp": "2025-08-19T04:12:40.739613",
    "response_time": "3.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 119,
    "solution": "def match_parens(lst):\n    stack = []\n    \n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if not stack:  # Stack is empty but found closing parenthesis\n                return False\n            stack.pop()\n    \n    return len(stack) == 0  # True if all parentheses matched (stack is empty)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef match_parens(lst):",
    "timestamp": "2025-08-19T04:12:44.525659",
    "response_time": "3.78"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 120,
    "solution": "def maximum(arr, k):\n    # Sort array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return first k elements\n    return sorted_arr[:k]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):",
    "timestamp": "2025-08-19T04:12:46.478782",
    "response_time": "1.95"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 121,
    "solution": "def solution(lst):\n    # Sum odd numbers at even indices (0-based indexing)\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):",
    "timestamp": "2025-08-19T04:12:48.719558",
    "response_time": "2.24"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 122,
    "solution": "def add_elements(arr, k):\n    # Ensure k doesn't exceed array length\n    k = min(k, len(arr))\n    \n    # Initialize sum\n    total = 0\n    \n    # Check first k elements\n    for i in range(k):\n        # Convert number to string to check number of digits\n        num_str = str(abs(arr[i]))  # abs to handle negative numbers\n        # Add to total if number has 1 or 2 digits\n        if len(num_str) <= 2:\n            total += arr[i]\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):",
    "timestamp": "2025-08-19T04:12:53.513257",
    "response_time": "4.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 123,
    "solution": "def get_odd_collatz(n):\n    # Initialize result list to store odd numbers\n    result = []\n    \n    # Add first number if odd\n    if n % 2 == 1:\n        result.append(n)\n    \n    # Continue while n is not 1\n    while n != 1:\n        if n % 2 == 0:\n            # If even, divide by 2\n            n = n // 2\n        else:\n            # If odd, multiply by 3 and add 1\n            n = 3 * n + 1\n        \n        # Add to result if odd\n        if n % 2 == 1:\n            result.append(n)\n    \n    # Sort the result list\n    result.sort()\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):",
    "timestamp": "2025-08-19T04:12:57.048659",
    "response_time": "3.53"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 124,
    "solution": "import re\nfrom datetime import datetime\n\ndef valid_date(date):\n    if not date:  # Check if date string is empty\n        return False\n    \n    # Check if format matches mm-dd-yyyy\n    pattern = r'^\\d{2}-\\d{2}-\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        \n        # Check month range\n        if month < 1 or month > 12:\n            return False\n            \n        # Check days based on month\n        if month in [4, 6, 9, 11]:  # 30 days months\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:  # February\n            if day < 1 or day > 29:\n                return False\n        else:  # 31 days months\n            if day < 1 or day > 31:\n                return False\n                \n        # Final validation using datetime\n        datetime(year, month, day)\n        return True\n        \n    except ValueError:\n        return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):",
    "timestamp": "2025-08-19T04:13:03.198285",
    "response_time": "6.14"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 125,
    "solution": "def split_words(txt):\n    # Handle empty or None input\n    if not txt:\n        return []\n    \n    # Split on whitespace and filter out empty strings\n    words = [word.strip('.,!?:;\"\\'()[]{}') for word in txt.split()]\n    return [word for word in words if word]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef split_words(txt):",
    "timestamp": "2025-08-19T04:13:07.283038",
    "response_time": "4.08"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 126,
    "solution": "def is_sorted(lst):\n    if not lst:  # Handle empty list\n        return True\n        \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef is_sorted(lst):",
    "timestamp": "2025-08-19T04:13:10.226019",
    "response_time": "2.94"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 127,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Find intersection points\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is prime\n    return \"YES\" if is_prime(length) else \"NO\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):",
    "timestamp": "2025-08-19T04:13:13.637119",
    "response_time": "3.41"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 128,
    "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n        \n    magnitude_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        # Calculate sum of magnitudes\n        magnitude_sum += abs(num)\n        \n        # Calculate product of signs\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        sign_product *= sign\n        \n        # If we encounter a zero, the whole product will be zero\n        if sign_product == 0:\n            return 0\n            \n    return magnitude_sum * sign_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):",
    "timestamp": "2025-08-19T04:13:18.601859",
    "response_time": "4.96"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 129,
    "solution": "from collections import deque\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> int:\n    N = len(grid)\n    target = k\n    \n    # Create position map for all numbers\n    pos = {}\n    for i in range(N):\n        for j in range(N):\n            pos[grid[i][j]] = (i, j)\n    \n    def manhattan_distance(pos1, pos2):\n        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n    \n    # Initialize dp with large value\n    dp = {}\n    \n    def solve(curr_num, prev_i, prev_j):\n        if curr_num > target:\n            return 0\n            \n        state = (curr_num, prev_i, prev_j)\n        if state in dp:\n            return dp[state]\n            \n        next_i, next_j = pos[curr_num]\n        dist = manhattan_distance((prev_i, prev_j), (next_i, next_j))\n        \n        dp[state] = dist + solve(curr_num + 1, next_i, next_j)\n        return dp[state]\n    \n    # Find minimum starting point\n    min_path = float('inf')\n    start_num = 1\n    start_pos = pos[start_num]\n    \n    # Calculate minimum path starting from each corner\n    corners = [(0, 0), (0, N-1), (N-1, 0), (N-1, N-1)]\n    for corner_i, corner_j in corners:\n        path_length = manhattan_distance((corner_i, corner_j), start_pos)\n        path_length += solve(start_num + 1, start_pos[0], start_pos[1])\n        min_path = min(min_path, path_length)\n    \n    return min_path",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):",
    "timestamp": "2025-08-19T04:13:27.174168",
    "response_time": "8.57"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 130,
    "solution": "def tri(n):\n    # Base case - return empty list if n < 0\n    if n < 0:\n        return []\n    \n    # Initialize result list with first n+1 positions\n    result = [0] * (n + 1)\n    \n    # Helper function to calculate tribonacci value for a position\n    def calculate_tri(pos):\n        # Base cases\n        if pos == 1:\n            return 3\n        elif pos % 2 == 0:  # Even numbers\n            return 1 + pos / 2\n        else:  # Odd numbers\n            return calculate_tri(pos - 1) + calculate_tri(pos - 2) + calculate_tri(pos + 1)\n    \n    # Fill the result list\n    for i in range(n + 1):\n        result[i] = calculate_tri(i) if i > 0 else 1\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):",
    "timestamp": "2025-08-19T04:13:31.164509",
    "response_time": "3.99"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 131,
    "solution": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:  # if digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):",
    "timestamp": "2025-08-19T04:13:33.915075",
    "response_time": "2.75"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 132,
    "solution": "def is_nested(string):\n    stack = []\n    pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    \n    for char in string:\n        if char in pairs:  # Opening bracket\n            stack.append(char)\n        elif char in pairs.values():  # Closing bracket\n            if not stack:  # Stack is empty but we found closing bracket\n                return False\n            if char != pairs[stack.pop()]:  # Mismatch between opening and closing\n                return False\n    \n    return len(stack) == 0  # True if all brackets were matched",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef is_nested(string):",
    "timestamp": "2025-08-19T04:13:38.477011",
    "response_time": "4.56"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 133,
    "solution": "import math\n\ndef sum_squares(lst):\n    # Round up each number using math.ceil and square it\n    squared_nums = [math.ceil(x) ** 2 for x in lst]\n    # Return sum of squared numbers\n    return sum(squared_nums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-08-19T04:13:40.284762",
    "response_time": "1.80"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 134,
    "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # Check if string is empty\n        return False\n    return txt[-1].isalpha()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef check_if_last_char_is_a_letter(txt):",
    "timestamp": "2025-08-19T04:13:42.312403",
    "response_time": "2.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 135,
    "solution": "def can_arrange(arr):\n    if len(arr) <= 1:\n        return -1\n        \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n            \n    return -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):",
    "timestamp": "2025-08-19T04:13:44.062922",
    "response_time": "1.75"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 136,
    "solution": "def largest_smallest_integers(lst):\n    if not lst:\n        return None\n    return (max(lst), min(lst))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef largest_smallest_integers(lst):",
    "timestamp": "2025-08-19T04:13:46.226328",
    "response_time": "2.16"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 137,
    "solution": "def compare_one(a, b):\n    # Convert strings with comma to dot decimal separator\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        is_a_str = True\n    else:\n        is_a_str = False\n        \n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n        is_b_str = True\n    else:\n        is_b_str = False\n    \n    # Convert to float for comparison\n    a_float = float(a)\n    b_float = float(b)\n    \n    # Return None if equal\n    if a_float == b_float:\n        return None\n        \n    # Determine which is larger and return in original type\n    if a_float > b_float:\n        if is_a_str:\n            return str(a_float)\n        return type(a)(a_float)\n    else:\n        if is_b_str:\n            return str(b_float)\n        return type(b)(b_float)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):",
    "timestamp": "2025-08-19T04:13:50.274661",
    "response_time": "4.05"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 138,
    "solution": "def is_equal_to_sum_even(n):\n    # If n is less than 8 (minimum sum of 4 even numbers: 2+2+2+2), return False\n    if n < 8:\n        return False\n    \n    # If n is odd, it cannot be sum of even numbers\n    if n % 2 != 0:\n        return False\n    \n    # For n >= 8 and even, it's always possible to represent as sum of 4 even numbers\n    # This is because any even number >= 8 can be broken down as:\n    # Case 1: n = 2 + 2 + 2 + (n-6) where (n-6) is even and >= 2\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):",
    "timestamp": "2025-08-19T04:13:54.584906",
    "response_time": "4.31"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 139,
    "solution": "def special_factorial(n):\n    if n <= 0:\n        return 0\n    \n    result = 1\n    for i in range(1, n + 1):\n        # Calculate factorial for current number i\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        # Multiply the result with current factorial\n        result *= factorial\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):",
    "timestamp": "2025-08-19T04:13:58.070364",
    "response_time": "3.48"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 140,
    "solution": "def fix_spaces(text):\n    # First, handle cases with more than 2 consecutive spaces\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    \n    # Then replace remaining single/double spaces with underscore\n    text = re.sub(r' {1,2}', '_', text)\n    \n    return text",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):",
    "timestamp": "2025-08-19T04:14:00.815597",
    "response_time": "2.74"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 141,
    "solution": "def file_name_check(file_name):\n    # Check if there's exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if name is empty\n    if not name:\n        return 'No'\n    \n    # Check if extension is valid\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if name starts with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Count digits in name\n    digit_count = sum(1 for char in name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):",
    "timestamp": "2025-08-19T04:14:05.210039",
    "response_time": "4.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 142,
    "solution": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            # Square numbers at indices that are multiples of 3\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            # Cube numbers at indices that are multiples of 4 (but not 3)\n            result += lst[i] ** 3\n        else:\n            # Add numbers at other indices unchanged\n            result += lst[i]\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-08-19T04:14:09.069582",
    "response_time": "3.86"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 143,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):",
    "timestamp": "2025-08-19T04:14:11.510142",
    "response_time": "2.44"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 144,
    "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert string fractions to Fraction objects\n    x_frac = Fraction(*map(int, x.split('/')))\n    n_frac = Fraction(*map(int, n.split('/')))\n    \n    # Multiply the fractions\n    result = x_frac * n_frac\n    \n    # Check if the result is a whole number\n    # A fraction is a whole number if its denominator is 1\n    return result.denominator == 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):",
    "timestamp": "2025-08-19T04:14:15.533916",
    "response_time": "4.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 145,
    "solution": "def order_by_points(nums):\n    # Helper function to calculate sum of digits\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Create list of tuples with (original_index, number, digit_sum)\n    indexed_nums = list(enumerate(nums))\n    \n    # Sort based on digit sum first, then original index for stable sort\n    sorted_nums = sorted(indexed_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n    \n    # Return just the numbers in sorted order\n    return [num for _, num in sorted_nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):",
    "timestamp": "2025-08-19T04:14:19.555555",
    "response_time": "4.02"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 146,
    "solution": "def specialFilter(nums):\n    def is_first_last_odd(num):\n        # Convert to positive number for processing\n        num = abs(num)\n        # Convert to string to easily get first and last digits\n        num_str = str(num)\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return first_digit % 2 == 1 and last_digit % 2 == 1\n\n    # Count numbers that are > 10 and have odd first and last digits\n    count = sum(1 for num in nums if abs(num) > 10 and is_first_last_odd(num))\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):",
    "timestamp": "2025-08-19T04:14:23.308333",
    "response_time": "3.75"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 147,
    "solution": "def get_max_triples(n):\n    # Create array a according to formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counter for valid triples\n    count = 0\n    \n    # Check all possible triples where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if sum is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):",
    "timestamp": "2025-08-19T04:14:29.672618",
    "response_time": "6.36"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 148,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef bf(planet1, planet2):",
    "timestamp": "2025-08-19T04:14:33.365976",
    "response_time": "3.69"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 149,
    "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort first by length, then alphabetically\n    return sorted(even_length_strings, key=lambda x: (len(x), x))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):",
    "timestamp": "2025-08-19T04:14:36.177834",
    "response_time": "2.81"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 150,
    "solution": "def x_or_y(n, x, y):\n    # Handle special cases\n    if n < 2:\n        return y\n    \n    # Check if n is prime\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    \n    return x",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):",
    "timestamp": "2025-08-19T04:14:39.772581",
    "response_time": "3.59"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 151,
    "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        # Check if number is perfect square\n        if isinstance(num, int) and num > 0:\n            root = int(num ** 0.5)\n            if root * root != num:  # if not a perfect square\n                result += num\n    \n    return result * 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef double_the_difference(lst):",
    "timestamp": "2025-08-19T04:14:43.336574",
    "response_time": "3.56"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 152,
    "solution": "def compare(game,guess):\n    # Initialize empty result array\n    result = []\n    \n    # Iterate through both arrays simultaneously\n    for actual_score, guessed_score in zip(game, guess):\n        # Calculate absolute difference between actual and guessed score\n        difference = abs(actual_score - guessed_score)\n        # Add difference to result array\n        result.append(difference)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):",
    "timestamp": "2025-08-19T04:14:47.974900",
    "response_time": "4.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 153,
    "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        return uppercase_count - lowercase_count\n    \n    if not extensions:\n        return class_name\n        \n    # Find extension with maximum strength\n    max_strength_extension = extensions[0]\n    max_strength = calculate_strength(extensions[0])\n    \n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            max_strength_extension = extension\n            \n    return f\"{class_name}.{max_strength_extension}\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):",
    "timestamp": "2025-08-19T04:14:51.627216",
    "response_time": "3.65"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 154,
    "solution": "def cycpattern_check(a, b):\n    # Get length of pattern b\n    n = len(b)\n    \n    # Generate all possible rotations of b\n    rotations = [b[i:] + b[:i] for i in range(n)]\n    \n    # Check if any rotation is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n            \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):",
    "timestamp": "2025-08-19T04:14:54.669810",
    "response_time": "3.04"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 155,
    "solution": "def even_odd_count(num):\n    # Convert number to positive if negative\n    num = abs(num)\n    \n    # Convert number to string to process digits\n    num_str = str(num)\n    \n    # Count even and odd digits\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    \n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):",
    "timestamp": "2025-08-19T04:14:58.401970",
    "response_time": "3.73"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 156,
    "solution": "def int_to_mini_roman(number):\n    roman_values = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_values:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):",
    "timestamp": "2025-08-19T04:15:03.114668",
    "response_time": "4.71"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 157,
    "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure c is the longest\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if it's a valid triangle\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c:\n        return False\n        \n    # Check if it's a right angle triangle using Pythagorean theorem\n    # a\u00b2 + b\u00b2 = c\u00b2\n    return abs(a*a + b*b - c*c) < 0.000001  # Using small epsilon for float comparison",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n### Signature\ndef right_angle_triangle(a, b, c):",
    "timestamp": "2025-08-19T04:15:07.644129",
    "response_time": "4.53"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 158,
    "solution": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n        elif unique_chars == max_unique:\n            result = min(result, word)\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):",
    "timestamp": "2025-08-19T04:15:10.325496",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 159,
    "solution": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate carrots eaten and remaining after meals\n    \n    Args:\n        number: int - carrots already eaten\n        need: int - additional carrots needed\n        remaining: int - carrots available to eat\n    \n    Returns:\n        list - [total carrots eaten, carrots remaining]\n    \"\"\"\n    # If remaining carrots are enough for need\n    if remaining >= need:\n        return [number + need, remaining - need]\n    # If not enough carrots, eat all remaining\n    else:\n        return [number + remaining, 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):",
    "timestamp": "2025-08-19T04:15:13.834078",
    "response_time": "3.50"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 160,
    "solution": "def do_algebra(operator, operand):\n    expression = str(operand[0])  # Start with first number\n    \n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    \n    return eval(expression)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):",
    "timestamp": "2025-08-19T04:15:15.890353",
    "response_time": "2.05"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 161,
    "solution": "def solve(s):\n    # Check if string contains any letters\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    \n    # If letters exist, swap case for letters and keep other chars as is\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):",
    "timestamp": "2025-08-19T04:15:19.554931",
    "response_time": "3.66"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 162,
    "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):",
    "timestamp": "2025-08-19T04:15:23.873973",
    "response_time": "4.31"
  },
  {
    "dataset_name": "human_eval_claude35sonnet_second_half",
    "dataset_row_id": 163,
    "solution": "def generate_integers(a, b):\n    # Create a list to store even digits\n    result = []\n    \n    # Iterate through range from a to b inclusive\n    for num in range(a, b + 1):\n        # Check if number is even\n        if num % 2 == 0:\n            result.append(num)\n            \n    # Return sorted list of even numbers\n    return sorted(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):",
    "timestamp": "2025-08-19T04:15:26.343561",
    "response_time": "2.47"
  }
]