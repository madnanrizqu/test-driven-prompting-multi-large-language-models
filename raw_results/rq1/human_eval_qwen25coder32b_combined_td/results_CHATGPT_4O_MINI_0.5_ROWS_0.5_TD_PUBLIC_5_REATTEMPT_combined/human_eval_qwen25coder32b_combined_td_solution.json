[
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 0,
    "solution": "===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True",
    "timestamp": "2025-08-17T17:03:15.144232",
    "response_time": "12.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 1,
    "solution": "===START===\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [ '(()())', '((()))', '()', '((())()())' ]\nassert candidate('() (()) ((())) (((())))') == [ '()', '(())', '((()))', '(((())))' ]",
    "timestamp": "2025-08-17T17:03:23.450671",
    "response_time": "8.30"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 2,
    "solution": "===START===\nfrom math import modf\n\ndef truncate_number(number: float) -> float:\n    decimal_part, _ = modf(number)\n    return decimal_part\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:\n\n### Test\nassert candidate(3.5) == 0.5",
    "timestamp": "2025-08-17T17:03:27.217599",
    "response_time": "3.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 3,
    "solution": "===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:\n\n### Test\nassert candidate([]) == False\nassert candidate([1, 2, -3, 1, 2, -3]) == False\nassert candidate([1, 2, -4, 5, 6]) == True",
    "timestamp": "2025-08-17T17:03:31.745183",
    "response_time": "4.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 4,
    "solution": "===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\n### Test\nassert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6",
    "timestamp": "2025-08-17T17:03:37.557132",
    "response_time": "5.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 5,
    "solution": "===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n### Test\nassert candidate([], 7) == []",
    "timestamp": "2025-08-17T17:03:42.803514",
    "response_time": "5.25"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 6,
    "solution": "===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
    "timestamp": "2025-08-17T17:03:51.403277",
    "response_time": "8.60"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 7,
    "solution": "===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []\nassert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
    "timestamp": "2025-08-17T17:03:56.712434",
    "response_time": "5.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 8,
    "solution": "===START===\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return (total_sum, total_product)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\n### Test\nassert candidate([]) == (0, 1)\nassert candidate([1, 1, 1]) == (3, 1)",
    "timestamp": "2025-08-17T17:04:03.172244",
    "response_time": "6.45"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 9,
    "solution": "===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    \n    return max_list\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []\nassert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]",
    "timestamp": "2025-08-17T17:04:09.193628",
    "response_time": "6.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 10,
    "solution": "===START===\ndef make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    if not string:\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    \n    return string + string[::-1]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('x') == 'x'",
    "timestamp": "2025-08-17T17:04:16.226011",
    "response_time": "7.03"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 11,
    "solution": "===START===\ndef string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        result.append('1' if a[i] != b[i] else '0')\n    return ''.join(result)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:\n\n### Test\nassert candidate('111000', '101010') == '010010'",
    "timestamp": "2025-08-17T17:04:20.805211",
    "response_time": "4.58"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 12,
    "solution": "===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:\n\n### Test\nassert candidate([]) == None",
    "timestamp": "2025-08-17T17:04:26.505624",
    "response_time": "5.70"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 13,
    "solution": "===START===\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n### Test\nassert candidate(3, 7) == 1\nassert candidate(10, 15) == 5",
    "timestamp": "2025-08-17T17:04:30.077482",
    "response_time": "3.57"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 14,
    "solution": "===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:\n\n### Test\nassert candidate('') == []",
    "timestamp": "2025-08-17T17:04:34.294309",
    "response_time": "4.21"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 15,
    "solution": "===START===\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:\n\n### Test\nassert candidate(0) == '0'",
    "timestamp": "2025-08-17T17:04:37.186813",
    "response_time": "2.89"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 16,
    "solution": "===START===\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:\n\n### Test\nassert candidate('') == 0\nassert candidate('abcde') == 5",
    "timestamp": "2025-08-17T17:04:39.451683",
    "response_time": "2.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 17,
    "solution": "===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4 if note == 'o' else 0 for note in notes]\n    return beats\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:\n\n### Test\nassert candidate('') == []\nassert candidate('o o o o') == [4, 4, 4, 4]",
    "timestamp": "2025-08-17T17:04:44.086647",
    "response_time": "4.63"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 18,
    "solution": "===START===\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:\n\n### Test\nassert candidate('', 'x') == 0\nassert candidate('xyxyxyx', 'x') == 4",
    "timestamp": "2025-08-17T17:04:51.016069",
    "response_time": "6.93"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 19,
    "solution": "===START===\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    if not numbers:\n        return numbers\n    \n    num_list: List[str] = numbers.split()\n    num_list.sort(key=lambda x: num_map[x])\n    \n    return ' '.join(num_list)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('three') == 'three'",
    "timestamp": "2025-08-17T17:05:01.762486",
    "response_time": "10.74"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 20,
    "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)",
    "timestamp": "2025-08-17T17:05:12.575486",
    "response_time": "10.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 21,
    "solution": "===START===\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\n### Test\nassert candidate([2.0, 49.9]) == [0.0, 1.0]\nassert candidate([100.0, 49.9]) == [1.0, 0.0]",
    "timestamp": "2025-08-17T17:05:18.100679",
    "response_time": "5.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 22,
    "solution": "===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-17T17:05:21.862337",
    "response_time": "3.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 23,
    "solution": "===START===\ndef strlen(string: str) -> int:\n    return len(string)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:\n\n### Test\nassert candidate('') == 0",
    "timestamp": "2025-08-17T17:05:23.768791",
    "response_time": "1.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 24,
    "solution": "===START===\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:\n\n### Test\nassert candidate(3) == 1\nassert candidate(7) == 1",
    "timestamp": "2025-08-17T17:05:27.551294",
    "response_time": "3.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 25,
    "solution": "===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:\n\n### Test\nassert candidate(2) == [2]\nassert candidate(4) == [2, 2]\nassert candidate(8) == [2, 2, 2]\nassert candidate(3 * 19) == [3, 19]",
    "timestamp": "2025-08-17T17:05:33.177190",
    "response_time": "5.62"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 26,
    "solution": "===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        if number in counts:\n            counts[number] += 1\n        else:\n            counts[number] = 1\n    return [number for number in numbers if counts[number] == 1]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-17T17:05:39.493274",
    "response_time": "6.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 27,
    "solution": "===START===\ndef flip_case(string: str) -> str:\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:\n\n### Test\nassert candidate('') == ''",
    "timestamp": "2025-08-17T17:05:44.775761",
    "response_time": "5.28"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 28,
    "solution": "===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:\n\n### Test\nassert candidate([]) == ''",
    "timestamp": "2025-08-17T17:05:47.155444",
    "response_time": "2.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 29,
    "solution": "===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []",
    "timestamp": "2025-08-17T17:05:50.709532",
    "response_time": "3.55"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 30,
    "solution": "===START===\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):\n\n### Test\nassert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\nassert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]",
    "timestamp": "2025-08-17T17:05:53.375502",
    "response_time": "2.66"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 31,
    "solution": "===START===\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):\n\n### Test\nassert candidate(6) == False\nassert candidate(101) == True\nassert candidate(11) == True\nassert candidate(13441) == True\nassert candidate(61) == True\nassert candidate(4) == False",
    "timestamp": "2025-08-17T17:06:01.684941",
    "response_time": "8.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 32,
    "solution": "===START===\nimport math\n\ndef poly(xs: list, x: float):\n    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * (x ** i)\n    return result\n\ndef find_zero(xs: list):\n    def derivative(xs, x):\n        result = 0\n        for i in range(1, len(xs)):\n            result += i * xs[i] * (x ** (i - 1))\n        return result\n\n    x = 0.0\n    for _ in range(1000):\n        px = poly(xs, x)\n        if abs(px) < 1e-4:\n            return x\n        dx = derivative(xs, x)\n        if dx == 0:\n            break\n        x -= px / dx\n    return x\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):\n\n### Test\nassert math.fabs(poly(coeffs, solution)) < 1e-4 ",
    "timestamp": "2025-08-17T17:06:16.047730",
    "response_time": "14.36"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 33,
    "solution": "===START===\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = l[:]\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three[sorted_index]\n            sorted_index += 1\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\nassert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\nassert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))",
    "timestamp": "2025-08-17T17:06:27.818957",
    "response_time": "11.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 34,
    "solution": "===START===\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):\n\n### Test\nassert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] ",
    "timestamp": "2025-08-17T17:06:31.199217",
    "response_time": "3.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 35,
    "solution": "===START===\ndef max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):\n\n### Test\nassert candidate([1, 2, 3]) == 3",
    "timestamp": "2025-08-17T17:06:36.063680",
    "response_time": "4.86"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 36,
    "solution": "===START===\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):\n\n### Test\nassert candidate(50) == 0\nassert candidate(78) == 2\nassert candidate(79) == 3\nassert candidate(100) == 3",
    "timestamp": "2025-08-17T17:06:41.036553",
    "response_time": "4.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 37,
    "solution": "===START===\ndef sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    \n    result = l[:]\n    for idx, value in zip(even_indices, even_values):\n        result[idx] = value\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])",
    "timestamp": "2025-08-17T17:06:48.214090",
    "response_time": "7.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 38,
    "solution": "===START===\ndef encode_cyclic(s: str):\n    import itertools\n    result = []\n    for group in itertools.zip_longest(*[iter(s)]*3, fillvalue=''):\n        result.append(''.join(group[::-1]))\n    return ''.join(result)\n\ndef decode_cyclic(s: str):\n    import itertools\n    result = []\n    for group in itertools.zip_longest(*[iter(s)]*3, fillvalue=''):\n        result.append(''.join(group[::-1]))\n    return ''.join(result)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):\n\n### Test\nassert candidate(encoded_str) == str ",
    "timestamp": "2025-08-17T17:06:56.660366",
    "response_time": "8.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 39,
    "solution": "===START===\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fibonacci_generator()\n    count = 0\n    while True:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num) and fib_num > 1:\n            count += 1\n            if count == n:\n                return fib_num\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):\n\n### Test\nassert candidate(1) == 2\nassert candidate(2) == 3\nassert candidate(3) == 5\nassert candidate(4) == 13\nassert candidate(5) == 89",
    "timestamp": "2025-08-17T17:07:12.477110",
    "response_time": "15.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 40,
    "solution": "===START===\ndef triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):\n\n### Test\nassert candidate([1, 3, 5, 0]) == False\nassert candidate([1, 3, 5, -1]) == False\nassert candidate([1, 3, -2, 1]) == True\nassert candidate([1, 2, 3, 7]) == False",
    "timestamp": "2025-08-17T17:07:18.534855",
    "response_time": "6.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 41,
    "solution": "===START===\ndef car_race_collision(n: int):\n    return n * n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):\n\n### Test\nassert candidate(2) == 4\nassert candidate(3) == 9",
    "timestamp": "2025-08-17T17:07:20.359221",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 42,
    "solution": "===START===\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):\n\n### Test\nassert candidate([]) == []",
    "timestamp": "2025-08-17T17:07:22.593102",
    "response_time": "2.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 43,
    "solution": "===START===\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):\n\n### Test\nassert candidate([1, 3, 5, 0]) == False\nassert candidate([1, 3, -2, 1]) == False\nassert candidate([1, 2, 3, 7]) == False\nassert candidate([2, 4, -5, 3, 5, 7]) == True",
    "timestamp": "2025-08-17T17:07:26.322030",
    "response_time": "3.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 44,
    "solution": "===START===\ndef change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(x) for x in digits[::-1])\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):\n\n### Test\nassert candidate(8, 3) == \"22\"\nassert candidate(9, 3) == \"100\"\nassert candidate(234, 2) == \"11101010\"",
    "timestamp": "2025-08-17T17:07:31.424538",
    "response_time": "5.10"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 45,
    "solution": "===START===\ndef triangle_area(a, h):\n    return 0.5 * a * h\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):\n\n### Test\nassert candidate(5, 3) == 7.5",
    "timestamp": "2025-08-17T17:07:34.448584",
    "response_time": "3.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 46,
    "solution": "===START===\ndef fib4(n: int):\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):\n\n### Test\nassert candidate(5) == 4\nassert candidate(8) == 28",
    "timestamp": "2025-08-17T17:07:44.010653",
    "response_time": "9.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 47,
    "solution": "===START===\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2.0\n    else:\n        return sorted_l[mid]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):\n\n### Test\nassert candidate([3, 1, 2, 4, 5]) == 3\nassert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0",
    "timestamp": "2025-08-17T17:07:50.541005",
    "response_time": "6.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 48,
    "solution": "===START===\ndef is_palindrome(text: str):\n    return text == text[::-1]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):\n\n### Test\nassert candidate('') == True\nassert candidate('aba') == True\nassert candidate('aaaaa') == True",
    "timestamp": "2025-08-17T17:07:52.553427",
    "response_time": "2.01"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 49,
    "solution": "===START===\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):\n\n### Test\nassert candidate(3, 5) == 3\nassert candidate(1101, 101) == 2\nassert candidate(0, 101) == 1",
    "timestamp": "2025-08-17T17:07:54.935411",
    "response_time": "2.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 50,
    "solution": "===START===\ndef encode_shift(s: str):\n    encoded_chars = []\n    for char in s:\n        if char.isalpha():\n            shift = 5\n            if char.islower():\n                encoded_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encoded_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encoded_chars.append(encoded_char)\n        else:\n            encoded_chars.append(char)\n    return ''.join(encoded_chars)\n\ndef decode_shift(s: str):\n    decoded_chars = []\n    for char in s:\n        if char.isalpha():\n            shift = 21  # 26 - 5\n            if char.islower():\n                decoded_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                decoded_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            decoded_chars.append(decoded_char)\n        else:\n            decoded_chars.append(char)\n    return ''.join(decoded_chars)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):\n\n### Test\nassert candidate(copy.deepcopy(encoded_str)) == str ",
    "timestamp": "2025-08-17T17:08:13.305550",
    "response_time": "18.37"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 51,
    "solution": "===START===\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):\n\n### Test\nassert candidate('') == ''\nassert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert candidate('fedcba') == 'fdcb'",
    "timestamp": "2025-08-17T17:08:16.500775",
    "response_time": "3.19"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 52,
    "solution": "===START===\ndef below_threshold(l: list, t: int):\n    for number in l:\n        if number >= t:\n            return False\n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):\n\n### Test\nassert candidate([1, 2, 4, 10], 100)\nassert not candidate([1, 20, 4, 10], 5)\nassert candidate([1, 20, 4, 10], 21)",
    "timestamp": "2025-08-17T17:08:19.657233",
    "response_time": "3.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 53,
    "solution": "===START===\ndef add(x: int, y: int):\n    return x + y\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):\n\n### Test\nassert candidate(0, 1) == 1\nassert candidate(1, 0) == 1\nassert candidate(2, 3) == 5",
    "timestamp": "2025-08-17T17:08:21.574502",
    "response_time": "1.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 54,
    "solution": "===START===\nfrom collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):\n\n### Test\nassert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert candidate('abcd', 'dddddddabc') == True\nassert candidate('dddddddabc', 'abcd') == True",
    "timestamp": "2025-08-17T17:08:24.774012",
    "response_time": "3.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 55,
    "solution": "===START===\ndef fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):\n\n### Test\nassert candidate(10) == 55\nassert candidate(1) == 1",
    "timestamp": "2025-08-17T17:08:31.367527",
    "response_time": "6.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 56,
    "solution": "===START===\ndef correct_bracketing(brackets: str):\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):\n\n### Test\nassert candidate(\"<>\")\nassert candidate(\"<<><>>\")\nassert candidate(\"<><><<><>><>\")\nassert candidate(\"<><><<<><><>><>><<><><<>>>\")\nassert not candidate(\"<<<><>>>>\")\nassert not candidate(\"><<>\")",
    "timestamp": "2025-08-17T17:08:36.836830",
    "response_time": "5.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 57,
    "solution": "===START===\ndef monotonic(l: list):\n    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):\n\n### Test\nassert candidate([1, 2, 4, 10]) == True\nassert candidate([1, 2, 4, 20]) == True\nassert candidate([1, 20, 4, 10]) == False\nassert candidate([4, 1, 0, -10]) == True",
    "timestamp": "2025-08-17T17:08:44.616647",
    "response_time": "7.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 58,
    "solution": "===START===\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(common_elements)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):\n\n### Test\nassert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]",
    "timestamp": "2025-08-17T17:08:49.340777",
    "response_time": "4.72"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 59,
    "solution": "===START===\ndef largest_prime_factor(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_factor = None\n    factor = 2\n    while n % factor == 0:\n        largest_factor = factor\n        n //= factor\n\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):\n\n### Test\nassert candidate(15) == 5\nassert candidate(27) == 3",
    "timestamp": "2025-08-17T17:09:04.814279",
    "response_time": "15.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 60,
    "solution": "===START===\ndef sum_to_n(n: int):\n    return n * (n + 1) // 2\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):\n\n### Test\nassert candidate(1) == 1\nassert candidate(6) == 21",
    "timestamp": "2025-08-17T17:09:07.387928",
    "response_time": "2.57"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 61,
    "solution": "===START===\ndef correct_bracketing(brackets: str):\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):\n\n### Test\nassert candidate(\"()\")\nassert candidate(\"(()())\")\nassert candidate(\"()()(()())()\")\nassert candidate(\"()()((()()())())(()()(()))\")\nassert not candidate(\"((()())))\")\nassert not candidate(\")(()\")",
    "timestamp": "2025-08-17T17:09:13.422535",
    "response_time": "6.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 62,
    "solution": "===START===\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):\n\n### Test\nassert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert candidate([1, 2, 3]) == [2, 6]",
    "timestamp": "2025-08-17T17:09:15.901642",
    "response_time": "2.48"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 63,
    "solution": "===START===\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):\n\n### Test\nassert candidate(2) == 1\nassert candidate(1) == 0\nassert candidate(5) == 4",
    "timestamp": "2025-08-17T17:09:23.683691",
    "response_time": "7.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 64,
    "solution": "===START===\ndef vowels_count(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):\n\n### Test\nassert candidate(\"abcde\") == 2, \"Test 1\"\nassert candidate(\"Alone\") == 3, \"Test 2\"\nassert candidate(\"key\") == 2, \"Test 3\"\nassert candidate(\"bye\") == 1, \"Test 4\"",
    "timestamp": "2025-08-17T17:09:31.030541",
    "response_time": "7.34"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 65,
    "solution": "===START===\ndef circular_shift(x, shift):\n    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        return digits[::-1]\n    \n    shift = shift % num_digits\n    return digits[-shift:] + digits[:-shift]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):\n\n### Test\nassert candidate(100, 2) == \"001\"\nassert candidate(12, 2) == \"12\"",
    "timestamp": "2025-08-17T17:09:35.766765",
    "response_time": "4.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 66,
    "solution": "===START===\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"\") == 0, \"Error\"\nassert candidate(\"abAB\") == 131, \"Error\"\nassert candidate(\"abcCd\") == 67, \"Error\"\nassert candidate(\"helloE\") == 69, \"Error\"",
    "timestamp": "2025-08-17T17:09:38.201707",
    "response_time": "2.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 67,
    "solution": "===START===\nimport re\n\ndef fruit_distribution(s, n):\n    numbers = list(map(int, re.findall(r'\\d+', s)))\n    return n - sum(numbers)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):\n\n### Test\nassert candidate(\"5 apples and 6 oranges\",19) == 8\nassert candidate(\"5 apples and 6 oranges\",21) == 10\nassert candidate(\"0 apples and 1 oranges\",3) == 2",
    "timestamp": "2025-08-17T17:09:42.086082",
    "response_time": "3.87"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 68,
    "solution": "===START===\ndef pluck(arr):\n    min_even_value = float('inf')\n    min_index = -1\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_value = value\n            min_index = index\n    if min_index == -1:\n        return []\n    else:\n        return [min_even_value, min_index]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([4,2,3]) == [2, 1], \"Error\"\nassert candidate([1,2,3]) == [2, 1], \"Error\"\nassert candidate([]) == [], \"Error\"\nassert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-17T17:09:48.784754",
    "response_time": "6.69"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 69,
    "solution": "===START===\nfrom collections import Counter\n\ndef search(lst):\n    count = Counter(lst)\n    for num in lst:\n        if count[num] == 1:\n            return num\n    return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef search(lst):\n\n### Test\nassert candidate([5, 5, 5, 5, 1]) == 1\nassert candidate([4, 1, 4, 1, 4, 4]) == 4\nassert candidate([3, 3]) == -1\nassert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\nassert candidate([2, 3, 3, 2, 2]) == 2  # automatically generated tests\nassert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\nassert candidate([3, 2, 8, 2]) == 2\nassert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\nassert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\nassert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\nassert candidate([1, 9, 10, 1, 3]) == 1\nassert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5",
    "timestamp": "2025-08-17T17:09:52.458782",
    "response_time": "3.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 70,
    "solution": "===START===\ndef strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef strange_sort_list(lst):\n\n### Test\nassert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\nassert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\nassert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]",
    "timestamp": "2025-08-17T17:09:59.615812",
    "response_time": "7.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 71,
    "solution": "===START===\nimport math\n\ndef triangle_area(a, b, c):\n    # Check if the sides can form a triangle using the triangle inequality theorem\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal places\n    return round(area, 2)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef triangle_area(a, b, c):\n\n### Test\nassert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1, 2, 10) == -1\nassert candidate(4, 8, 5) == 8.18\nassert candidate(2, 2, 2) == 1.73",
    "timestamp": "2025-08-17T17:10:09.939083",
    "response_time": "10.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 72,
    "solution": "===START===\ndef will_it_fly(q, w):\n    return sum(q) <= w\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef will_it_fly(q,w):\n\n### Test\nassert candidate([3, 2, 3], 9) is True\nassert candidate([1, 2], 5) is False\nassert candidate([3], 5) is True",
    "timestamp": "2025-08-17T17:10:12.057389",
    "response_time": "2.12"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 73,
    "solution": "===START===\ndef smallest_change(arr):\n    import math\n    changes = 0\n    n = len(arr)\n    for i in range(math.floor(n / 2)):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):\n\n### Test\nassert candidate([1,2,3,5,4,7,9,6]) == 4\nassert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\nassert candidate([1, 4, 2]) == 1\nassert candidate([1, 4, 4, 2]) == 1  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-17T17:10:17.002752",
    "response_time": "4.94"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 74,
    "solution": "===START===\ndef total_match(lst1, lst2):\n    return [item for item in lst1 if item in lst2]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef total_match(lst1, lst2):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([], []) == []\nassert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\nassert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']",
    "timestamp": "2025-08-17T17:10:19.664586",
    "response_time": "2.66"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 75,
    "solution": "===START===\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):\n\n### Test\nassert candidate(5) == False\nassert candidate(30) == True\nassert candidate(8) == True\nassert candidate(10) == False\nassert candidate(125) == True",
    "timestamp": "2025-08-17T17:10:33.397694",
    "response_time": "13.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 76,
    "solution": "===START===\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):\n\n### Test\nassert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-17T17:10:38.944600",
    "response_time": "5.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 77,
    "solution": "===START===\nimport math\n\ndef iscube(a):\n    if a < 0:\n        a = -a\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef iscube(a):\n\n### Test\nassert candidate(1) == True, \"First test error: \" + str(candidate(1))\nassert candidate(2) == False, \"Second test error: \" + str(candidate(2))\nassert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\nassert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))",
    "timestamp": "2025-08-17T17:10:42.910758",
    "response_time": "3.96"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 78,
    "solution": "===START===\ndef hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):\n\n### Test\nassert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))\nassert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))\nassert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))",
    "timestamp": "2025-08-17T17:10:48.432666",
    "response_time": "5.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 79,
    "solution": "===START===\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):\n\n### Test\nassert candidate(0) == \"db0db\"\nassert candidate(32) == \"db100000db\"",
    "timestamp": "2025-08-17T17:10:53.672994",
    "response_time": "5.24"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 80,
    "solution": "===START===\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):\n\n### Test\nassert candidate(\"a\") == False , \"a\"\nassert candidate(\"aa\") == False , \"aa\"\nassert candidate(\"abcd\") == True , \"abcd\"\nassert candidate(\"aabb\") == False , \"aabb\"",
    "timestamp": "2025-08-17T17:10:59.605582",
    "response_time": "5.93"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_td",
    "dataset_row_id": 81,
    "solution": "===START===\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):\n\n### Test\nassert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\nassert candidate([1.2]) == ['D+']\nassert candidate([0.5]) == ['D-']",
    "timestamp": "2025-08-17T17:11:19.567165",
    "response_time": "19.96"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 82,
    "solution": "===START===\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    length = len(string)\n    return is_prime(length)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):\n\n### Test\nassert candidate('Hello') == True\nassert candidate('abcdcba') == True\nassert candidate('kittens') == True\nassert candidate('orange') == False\nassert candidate('wow') == True\nassert candidate('world') == True\nassert candidate('MadaM') == True\nassert candidate('Wow') == True",
    "timestamp": "2025-08-19T04:27:31.947921",
    "response_time": "5.30"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 83,
    "solution": "===START===\ndef starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        # Count numbers starting with 1: 1XXXX... (n-1 X's) -> 10^(n-1) possibilities\n        # Count numbers ending with 1: XXXX...1 (n-1 X's) -> 9 * 10^(n-2) possibilities (first digit cannot be 0)\n        # Subtract the overlap (numbers that both start and end with 1): 1XXXX...1 -> 10^(n-2) possibilities\n        return 10**(n-1) + 9 * 10**(n-2) - 10**(n-2)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1) == 1\nassert candidate(2) == 18",
    "timestamp": "2025-08-19T04:27:36.806264",
    "response_time": "4.86"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 84,
    "solution": "===START===\ndef solve(N):\n    # Convert the number to binary, remove the '0b' prefix, and sum the digits\n    binary_representation = bin(N)[2:]\n    digit_sum = sum(int(digit) for digit in binary_representation)\n    # Convert the sum of digits back to binary and return\n    return bin(digit_sum)[2:]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1000) == \"1\", \"Error\"\nassert candidate(150) == \"110\", \"Error\"",
    "timestamp": "2025-08-19T04:27:40.094239",
    "response_time": "3.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 85,
    "solution": "===START===\ndef add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):\n\n### Test\nassert candidate([4, 88]) == 88\nassert candidate([4, 5, 6, 7, 2, 122]) == 122",
    "timestamp": "2025-08-19T04:27:41.474618",
    "response_time": "1.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 86,
    "solution": "===START===\ndef anti_shuffle(s):\n    import re\n    words = re.split(r'(\\s+)', s)\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ''.join(sorted_words)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):\n\n### Test\nassert candidate('Hi') == 'Hi'\nassert candidate('hello') == 'ehllo'\nassert candidate('number') == 'bemnru'\nassert candidate('abcd') == 'abcd'",
    "timestamp": "2025-08-19T04:27:43.329225",
    "response_time": "1.85"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 87,
    "solution": "===START===\ndef get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    # Sort by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):\n\n### Test\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,1,3,4,5,6], [1,2,1,4,5,6], [1,2,3,1,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]",
    "timestamp": "2025-08-19T04:27:46.587971",
    "response_time": "3.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 88,
    "solution": "===START===\ndef sort_array(array):\n    if not array:\n        return array\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([]) == [], \"Error\"\nassert candidate([5]) == [5], \"Error\"\nassert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"",
    "timestamp": "2025-08-19T04:27:48.487326",
    "response_time": "1.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 89,
    "solution": "===START===\ndef encrypt(s):\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(shift_char(c) for c in s)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):\n\n### Test\nassert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\" ",
    "timestamp": "2025-08-19T04:27:51.881015",
    "response_time": "3.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 90,
    "solution": "===START===\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    first, second = float('inf'), float('inf')\n    for number in lst:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    \n    return second if second != float('inf') else None\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):\n\n### Test\nassert candidate([1, 2, 3, 4, 5]) == 2\nassert candidate([5, 1, 4, 3, 2]) == 2\nassert candidate([]) == None\nassert candidate([1, 1]) == None",
    "timestamp": "2025-08-19T04:27:54.633835",
    "response_time": "2.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 91,
    "solution": "===START===\nimport re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        stripped_sentence = sentence.strip()\n        if stripped_sentence.startswith(\"I \"):\n            count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):\n\n### Test\nassert candidate(\"Hello world\") == 0, \"Test 1\"\nassert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\nassert candidate(\"I love It !\") == 1, \"Test 3\"",
    "timestamp": "2025-08-19T04:27:56.895004",
    "response_time": "2.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 92,
    "solution": "===START===\ndef any_int(x, y, z):\n    return any(isinstance(i, int) for i in (x, y, z))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef any_int(x, y, z):\n\n### Test\nassert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\nassert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:27:58.125575",
    "response_time": "1.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 93,
    "solution": "===START===\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    shifted_vowels = {v: chr(ord(v) + 2) for v in vowels}\n    encoded_message = []\n\n    for char in message:\n        if char in shifted_vowels:\n            new_char = shifted_vowels[char]\n        else:\n            new_char = char\n        encoded_message.append(new_char.swapcase())\n\n    return ''.join(encoded_message)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):\n\n### Test\nassert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:28:01.270546",
    "response_time": "3.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 94,
    "solution": "===START===\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):\n\n### Test\nassert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-19T04:28:06.453230",
    "response_time": "5.18"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 95,
    "solution": "===START===\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_lower = all_upper = True\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):\n\n### Test\nassert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))",
    "timestamp": "2025-08-19T04:28:09.157384",
    "response_time": "2.70"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 96,
    "solution": "===START===\ndef count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):\n\n### Test\nassert candidate(5) == [2,3]\nassert candidate(6) == [2,3,5]\nassert candidate(7) == [2,3,5]\nassert candidate(10) == [2,3,5,7]\nassert candidate(0) == []",
    "timestamp": "2025-08-19T04:28:13.475207",
    "response_time": "4.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 97,
    "solution": "===START===\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):\n\n### Test\nassert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))\nassert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))\nassert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\nassert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))",
    "timestamp": "2025-08-19T04:28:14.806918",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 98,
    "solution": "===START===\ndef count_upper(s):\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):\n\n### Test\nassert candidate('aBCdEf')  == 1\nassert candidate('abcdefg') == 0\nassert candidate('dBBE') == 0\nassert candidate('B')  == 0",
    "timestamp": "2025-08-19T04:28:17.081176",
    "response_time": "2.27"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 99,
    "solution": "===START===\nimport math\n\ndef closest_integer(value):\n    return round(float(value))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef closest_integer(value):\n\n### Test\nassert candidate(\"10\") == 10, \"Test 1\"\nassert candidate(\"14.5\") == 15, \"Test 2\"",
    "timestamp": "2025-08-19T04:28:17.951887",
    "response_time": "0.87"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 100,
    "solution": "===START===\ndef make_a_pile(n):\n    import itertools\n    \n    # Determine the starting number and the step (odd or even)\n    start = n\n    step = 2 if n % 2 == 0 else 2\n    \n    # Generate the sequence of stone counts for each level\n    return list(itertools.islice(itertools.count(start, step), n))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):\n\n### Test\nassert candidate(3) == [3, 5, 7], \"Test 3\"\nassert candidate(4) == [4,6,8,10], \"Test 4\"\nassert candidate(5) == [5, 7, 9, 11, 13]",
    "timestamp": "2025-08-19T04:28:20.627271",
    "response_time": "2.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 101,
    "solution": "===START===\nimport re\n\ndef words_string(s):\n    return re.split(r'[,\\s]+', s.strip())\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]",
    "timestamp": "2025-08-19T04:28:21.747673",
    "response_time": "1.12"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 102,
    "solution": "===START===\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if (y - 1) >= x:\n        return y - 1\n    return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):\n\n### Test\nassert candidate(12, 15) == 14\nassert candidate(13, 12) == -1\nassert candidate(33, 12354) == 12354\nassert candidate(5234, 5233) == -1",
    "timestamp": "2025-08-19T04:28:24.275298",
    "response_time": "2.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 103,
    "solution": "===START===\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):\n\n### Test\nassert candidate(1, 5) == \"0b11\"\nassert candidate(7, 13) == \"0b1010\"\nassert candidate(964,977) == \"0b1111001010\"\nassert candidate(996,997) == \"0b1111100100\"\nassert candidate(560,851) == \"0b1011000010\"\nassert candidate(185,546) == \"0b101101110\"",
    "timestamp": "2025-08-19T04:28:26.657841",
    "response_time": "2.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 104,
    "solution": "===START===\ndef unique_digits(x):\n    def has_no_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    result = [num for num in x if has_no_even_digit(num)]\n    result.sort()\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):\n\n### Test\nassert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nassert candidate([152, 323, 1422, 10]) == []",
    "timestamp": "2025-08-19T04:28:29.360394",
    "response_time": "2.70"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 105,
    "solution": "===START===\ndef by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted((x for x in arr if 1 <= x <= 9), reverse=True)\n    return [digit_names[x] for x in filtered_sorted_reversed]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\nassert candidate([]) == [], \"Error\"",
    "timestamp": "2025-08-19T04:28:32.873472",
    "response_time": "3.51"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 106,
    "solution": "===START===\ndef f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    def sum_to(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):\n\n### Test\nassert candidate(5) == [1, 2, 6, 24, 15]\nassert candidate(7) == [1, 2, 6, 24, 15, 720, 28]",
    "timestamp": "2025-08-19T04:28:36.931013",
    "response_time": "4.05"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 107,
    "solution": "===START===\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):\n\n### Test\nassert candidate(123) == (8, 13)\nassert candidate(12) == (4, 6)\nassert candidate(3) == (1, 2)\nassert candidate(63) == (6, 8)",
    "timestamp": "2025-08-19T04:28:40.410421",
    "response_time": "3.48"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 108,
    "solution": "===START===\ndef count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n        else:\n            return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):\n\n### Test\nassert candidate([]) == 0\nassert candidate([-1, -2, 0]) == 0\nassert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\nassert candidate([1, 6, 9, -6, 0, 1, 5]) == 5",
    "timestamp": "2025-08-19T04:28:43.480155",
    "response_time": "3.07"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 109,
    "solution": "===START===\ndef move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    # Find the number of places where the current element is greater than the next element\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    \n    # If there is at most one such place, the array can be sorted by right shifting\n    return count <= 1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):\n\n### Test\nassert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([3, 5, 10, 1, 2])==True",
    "timestamp": "2025-08-19T04:28:46.975481",
    "response_time": "3.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 110,
    "solution": "===START===\ndef exchange(lst1, lst2):\n    # Check if there are any odd numbers in lst1\n    odd_in_lst1 = any(num % 2 != 0 for num in lst1)\n    \n    # If there are no odd numbers in lst1, it's already all even\n    if not odd_in_lst1:\n        return \"YES\"\n    \n    # Check if there are any even numbers in lst2\n    even_in_lst2 = any(num % 2 == 0 for num in lst2)\n    \n    # If there are even numbers in lst2, we can exchange to make lst1 all even\n    if even_in_lst2:\n        return \"YES\"\n    \n    # If there are odd numbers in lst1 and no even numbers in lst2, it's not possible\n    return \"NO\"\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):\n\n### Test\nassert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\nassert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"",
    "timestamp": "2025-08-19T04:28:52.354864",
    "response_time": "5.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 111,
    "solution": "===START===\nfrom collections import defaultdict\n\ndef histogram(test):\n    letter_counts = defaultdict(int)\n    for letter in test.split():\n        letter_counts[letter] += 1\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):\n\n### Test\nassert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:28:54.651015",
    "response_time": "2.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 112,
    "solution": "===START===\ndef reverse_delete(s,c):\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):\n\n### Test\nassert candidate(\"abcde\",\"ae\") == ('bcd',False)\nassert candidate(\"abcdef\", \"b\") == ('acdef',False)\nassert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\nassert candidate(\"dwik\",\"w\") == ('dik',False)",
    "timestamp": "2025-08-19T04:28:56.398371",
    "response_time": "1.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 113,
    "solution": "===START===\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):\n\n### Test\nassert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\nassert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"",
    "timestamp": "2025-08-19T04:28:59.041082",
    "response_time": "2.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 114,
    "solution": "===START===\ndef minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):\n\n### Test\nassert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-1, -2, -3]) == -6\nassert candidate([-1, -2, -3, 2, -10]) == -14\nassert candidate([-9999999999999999]) == -9999999999999999\nassert candidate([0, 10, 20, 1000000]) == 0\nassert candidate([-1, -2, -3, 10, -5]) == -6",
    "timestamp": "2025-08-19T04:29:01.712714",
    "response_time": "2.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 115,
    "solution": "===START===\ndef max_fill(grid, capacity):\n    from math import ceil\n    total_drops = 0\n    for row in grid:\n        total_water = sum(row)\n        total_drops += ceil(total_water / capacity)\n    return total_drops\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\nassert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"",
    "timestamp": "2025-08-19T04:29:03.773899",
    "response_time": "2.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 116,
    "solution": "===START===\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\nassert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\nassert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\nassert candidate([]) == []",
    "timestamp": "2025-08-19T04:29:04.948764",
    "response_time": "1.17"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 117,
    "solution": "===START===\nimport re\n\ndef select_words(s, n):\n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):\n\n### Test\nassert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))\nassert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))\nassert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))",
    "timestamp": "2025-08-19T04:29:07.619882",
    "response_time": "2.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 118,
    "solution": "===START===\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):\n\n### Test\nassert candidate(\"yogurt\") == \"u\"\nassert candidate(\"full\") == \"u\"\nassert candidate(\"easy\") == \"\"\nassert candidate(\"eAsy\") == \"\"\nassert candidate(\"ali\") == \"\"\nassert candidate(\"bad\") == \"a\"\nassert candidate(\"most\") == \"o\"",
    "timestamp": "2025-08-19T04:29:10.626642",
    "response_time": "3.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 119,
    "solution": "===START===\ndef match_parens(lst):\n    def count_parens(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return float('-inf')\n        return balance\n\n    total_balance = 0\n    for s in lst:\n        total_balance += count_parens(s)\n        if total_balance < 0:\n            return 'No'\n    \n    return 'Yes' if total_balance == 0 else 'No'\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef match_parens(lst):\n\n### Test\nassert candidate(['()(', ')']) == 'Yes'\nassert candidate([')', ')']) == 'No'\nassert candidate(['(()(())', '())())']) == 'No'\nassert candidate([')())', '(()()(']) == 'Yes'\nassert candidate(['(())))', '(()())((']) == 'Yes'\nassert candidate(['()', '())']) == 'No'",
    "timestamp": "2025-08-19T04:29:14.645495",
    "response_time": "4.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 120,
    "solution": "===START===\nfrom heapq import nlargest\n\ndef maximum(arr, k):\n    return sorted(nlargest(k, arr))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):\n\n### Test\nassert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nassert candidate([4, -4, 4], 2) == [4, 4]\nassert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\nassert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\nassert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]",
    "timestamp": "2025-08-19T04:29:15.759079",
    "response_time": "1.11"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 121,
    "solution": "===START===\ndef solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):\n\n### Test\nassert candidate([5, 8, 7, 1])    == 12\nassert candidate([3, 3, 3, 3, 3]) == 9\nassert candidate([30, 13, 24, 321]) == 0",
    "timestamp": "2025-08-19T04:29:17.130588",
    "response_time": "1.37"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 122,
    "solution": "===START===\ndef add_elements(arr, k):\n    from functools import reduce\n    return reduce(lambda acc, x: acc + x if -99 <= x <= 99 else acc, arr[:k], 0)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):\n\n### Test\nassert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\nassert candidate([111,121,3,4000,5,6], 2) == 0",
    "timestamp": "2025-08-19T04:29:18.838756",
    "response_time": "1.71"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 123,
    "solution": "===START===\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Add 1 as it is the last number in the sequence and is odd\n    return sorted(odd_numbers)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):\n\n### Test\nassert candidate(14) == [1, 5, 7, 11, 13, 17]\nassert candidate(5) == [1, 5]",
    "timestamp": "2025-08-19T04:29:22.575051",
    "response_time": "3.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 124,
    "solution": "===START===\nimport re\n\ndef valid_date(date):\n    if not date:\n        return False\n    \n    # Check the format mm-dd-yyyy\n    if not re.match(r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\", date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    # Days in each month\n    days_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n                     7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid for the given month\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):\n\n### Test\nassert candidate('03-11-2000') == True \nassert candidate('15-01-2012') == False \nassert candidate('04-0-2040') == False \nassert candidate('06-04-2020') == True \nassert candidate('01-01-2007') == True \nassert candidate('03-32-2011') == False \nassert candidate('') == False \nassert candidate('04-31-3000') == False ",
    "timestamp": "2025-08-19T04:29:29.579736",
    "response_time": "7.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 125,
    "solution": "===START===\nimport re\n\ndef split_words(txt):\n    return re.split(r'(\\s+)', txt.strip()) if ' ' in txt else [txt]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef split_words(txt):\n\n### Test\nassert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\nassert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]",
    "timestamp": "2025-08-19T04:29:30.995967",
    "response_time": "1.41"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 126,
    "solution": "===START===\ndef is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef is_sorted(lst):\n\n### Test\nassert candidate([5]) == True\nassert candidate([1, 2, 3, 4, 5]) == True\nassert candidate([1, 3, 2, 4, 5]) == False\nassert candidate([1, 2, 3, 4, 5, 6]) == True\nassert candidate([1, 2, 3, 4, 5, 6, 7]) == True\nassert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:29:32.633484",
    "response_time": "1.63"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 127,
    "solution": "===START===\ndef intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return \"NO\"\n    intersection_length = intersection_end - intersection_start + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):\n\n### Test\nassert candidate((1, 2), (2, 3)) == \"NO\"\nassert candidate((-1, 1), (0, 4)) == \"NO\"\nassert candidate((-3, -1), (-5, 5)) == \"YES\"\nassert candidate((-2, 2), (-4, 0)) == \"YES\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-08-19T04:29:38.510828",
    "response_time": "5.87"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 128,
    "solution": "===START===\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_of_magnitudes = 0\n    product_of_signs = 1\n    \n    for num in arr:\n        sum_of_magnitudes += abs(num)\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    \n    return sum_of_magnitudes * product_of_signs\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1, 2, 2, -4]) == -9\nassert candidate([0, 1]) == 0\nassert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\nassert candidate([]) == None",
    "timestamp": "2025-08-19T04:29:42.020384",
    "response_time": "3.50"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 129,
    "solution": "===START===\nfrom collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = [[False] * N for _ in range(N)]\n    queue = deque([(0, 0, [1])])  # (row, col, path)\n    visited[0][0] = True\n    \n    while queue:\n        row, col, path = queue.popleft()\n        \n        if len(path) == k:\n            return path\n        \n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < N and 0 <= new_col < N and not visited[new_row][new_col]:\n                visited[new_row][new_col] = True\n                queue.append((new_row, new_col, path + [grid[new_row][new_col]]))\n    \n    return []\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):\n\n### Test\nassert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\nassert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\nassert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\nassert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]",
    "timestamp": "2025-08-19T04:29:48.404357",
    "response_time": "6.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 130,
    "solution": "===START===\ndef tri(n):\n    if n < 0:\n        return []\n    \n    sequence = [1] * (n + 1)\n    if n >= 1:\n        sequence[1] = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        else:\n            if i + 1 <= n:\n                sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n            else:\n                sequence[i] = sequence[i - 1] + sequence[i - 2] + (1 + (i + 1) / 2)\n    \n    return sequence\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):\n\n### Test\nassert candidate(3) == [1, 3, 2.0, 8.0]\nassert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\nassert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\nassert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nassert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]",
    "timestamp": "2025-08-19T04:29:53.525205",
    "response_time": "5.12"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 131,
    "solution": "===START===\ndef digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):\n\n### Test\nassert candidate(5) == 5\nassert candidate(54) == 5\nassert candidate(120) ==1",
    "timestamp": "2025-08-19T04:29:56.084453",
    "response_time": "2.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 132,
    "solution": "===START===\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0 and string.count('[') > 1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef is_nested(string):\n\n### Test\nassert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('[]]]]]]][[[[[]') == False\nassert candidate('[][]') == False\nassert candidate(('[]')) == False\nassert candidate('[[[[]]]]') == True\nassert candidate('[]]]]]]]]]]') == False\nassert candidate('[][][[]]') == True",
    "timestamp": "2025-08-19T04:29:58.392909",
    "response_time": "2.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 133,
    "solution": "===START===\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\" \nassert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:29:59.779157",
    "response_time": "1.38"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 134,
    "solution": "===START===\nimport string\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char in string.ascii_letters\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef check_if_last_char_is_a_letter(txt):\n\n### Test\nassert candidate(\"apple\") == False\nassert candidate(\"apple pi e\") == True\nassert candidate(\"eeeee\") == False\nassert candidate(\"A\") == True\nassert candidate(\"Pumpkin pie \") == False",
    "timestamp": "2025-08-19T04:30:01.528033",
    "response_time": "1.74"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 135,
    "solution": "===START===\ndef can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):\n\n### Test\nassert candidate([1,2,4,3,5])==3\nassert candidate([1,2,4,5])==-1",
    "timestamp": "2025-08-19T04:30:03.293701",
    "response_time": "1.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 136,
    "solution": "===START===\ndef largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    \n    if smallest == 1:\n        largest = None\n    else:\n        largest = None\n        for num in lst:\n            if num > 1 and (largest is None or num < largest):\n                largest = num\n    \n    return (largest, smallest)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef largest_smallest_integers(lst):\n\n### Test\nassert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\nassert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\nassert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\nassert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\nassert candidate([]) == (None, None)",
    "timestamp": "2025-08-19T04:30:06.788964",
    "response_time": "3.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 137,
    "solution": "===START===\ndef compare_one(a, b):\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                return float(value)\n            except ValueError:\n                raise ValueError(f\"Invalid number format: {value}\")\n        return value\n\n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n\n    if parsed_a > parsed_b:\n        return a\n    elif parsed_b > parsed_a:\n        return b\n    else:\n        return None\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):\n\n### Test\nassert candidate(1, 2) == 2\nassert candidate(1, 2.5) == 2.5\nassert candidate(2, 3) == 3\nassert candidate(5, 6) == 6",
    "timestamp": "2025-08-19T04:30:10.399713",
    "response_time": "3.61"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 138,
    "solution": "===START===\ndef is_equal_to_sum_even(n):\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    # Any number less than 8 cannot be expressed as the sum of 4 positive even numbers\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can be expressed as the sum of 4 positive even numbers\n    return n % 2 == 0\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):\n\n### Test\nassert candidate(4) == False\nassert candidate(6) == False\nassert candidate(8) == True\nassert candidate(10) == True",
    "timestamp": "2025-08-19T04:30:14.166793",
    "response_time": "3.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 139,
    "solution": "===START===\ndef special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    brazilian_fact = 1\n    for i in range(1, n + 1):\n        brazilian_fact *= factorial(i)\n    \n    return brazilian_fact\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):\n\n### Test\nassert candidate(4) == 288, \"Test 4\"\nassert candidate(5) == 34560, \"Test 5\"",
    "timestamp": "2025-08-19T04:30:17.492949",
    "response_time": "3.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 140,
    "solution": "===START===\nimport re\n\ndef fix_spaces(text):\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining single or double spaces with '_'\n    text = re.sub(r' {1,2}', '_', text)\n    return text\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):\n\n### Test\nassert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:30:19.916568",
    "response_time": "2.42"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 141,
    "solution": "===START===\nimport re\n\ndef file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed types\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    \n    return 'Yes'\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):\n\n### Test\nassert candidate(\"example.txt\") == 'Yes'\nassert candidate(\"1example.dll\") == 'No'\nassert candidate('s1sdf3.asd') == 'No'\nassert candidate('K.dll') == 'Yes'\nassert candidate('MY16FILE3.exe') == 'Yes'\nassert candidate('His12FILE94.exe') == 'No'\nassert candidate('_Y.txt') == 'No'\nassert candidate('?aREYA.exe') == 'No'\nassert candidate('/this_is_valid.dll') == 'No'\nassert candidate('this_is_valid.wow') == 'No'\nassert candidate('this_is_valid.txt') == 'Yes'\nassert candidate('this_is_valid.txtexe') == 'No'\nassert candidate('#this2_i4s_5valid.ten') == 'No'",
    "timestamp": "2025-08-19T04:30:25.327823",
    "response_time": "5.41"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 142,
    "solution": "===START===\ndef sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3]) == 6\nassert candidate([1,4,9]) == 14\nassert candidate([]) == 0\nassert candidate([1,1,1,1,1,1,1,1,1]) == 9\nassert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3",
    "timestamp": "2025-08-19T04:30:27.878805",
    "response_time": "2.55"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 143,
    "solution": "===START===\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):\n\n### Test\nassert candidate(\"This is a test\") == \"is\"\nassert candidate(\"lets go for swimming\") == \"go for\"\nassert candidate(\"there is no place available here\") == \"there is no place\"",
    "timestamp": "2025-08-19T04:30:32.539323",
    "response_time": "4.65"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 144,
    "solution": "===START===\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):\n\n### Test\nassert candidate(\"1/5\", \"5/1\") == True, 'test1'\nassert candidate(\"1/6\", \"2/1\") == False, 'test2'\nassert candidate(\"5/1\", \"3/1\") == True, 'test3'\nassert candidate(\"7/10\", \"10/2\") == False, 'test4'\nassert candidate(\"2/10\", \"50/10\") == True, 'test5'\nassert candidate(\"7/2\", \"4/2\") == True, 'test6'",
    "timestamp": "2025-08-19T04:30:33.918046",
    "response_time": "1.37"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 145,
    "solution": "===START===\ndef order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):\n\n### Test\nassert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nassert candidate([]) == []",
    "timestamp": "2025-08-19T04:30:35.750789",
    "response_time": "1.83"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 146,
    "solution": "===START===\ndef specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if is_odd_digit(num_str[0]) and is_odd_digit(num_str[-1]):\n                count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):\n\n### Test\nassert candidate([5, -2, 1, -5]) == 0\nassert candidate([15, -73, 14, -15]) == 1\nassert candidate([33, -2, -3, 45, 21, 109]) == 2",
    "timestamp": "2025-08-19T04:30:38.841951",
    "response_time": "3.09"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 147,
    "solution": "===START===\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count_mod = [0, 0, 0]\n    \n    for value in a:\n        count_mod[value % 3] += 1\n    \n    result = 0\n    # Case 1: All three numbers have the same remainder when divided by 3\n    result += count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6\n    result += count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6\n    result += count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6\n    \n    # Case 2: All three numbers have different remainders when divided by 3\n    result += count_mod[0] * count_mod[1] * count_mod[2]\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):\n\n### Test\nassert candidate(5) == 1\nassert candidate(6) == 4",
    "timestamp": "2025-08-19T04:30:46.087340",
    "response_time": "7.24"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 148,
    "solution": "===START===\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef bf(planet1, planet2):\n\n### Test\nassert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))\nassert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))\nassert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))",
    "timestamp": "2025-08-19T04:30:49.487950",
    "response_time": "3.40"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 149,
    "solution": "===START===\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    \n    return even_length_strings\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):\n\n### Test\nassert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\nassert candidate([\"d\", \"b\", \"c\", \"a\"]) == []",
    "timestamp": "2025-08-19T04:30:52.974199",
    "response_time": "3.48"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 150,
    "solution": "===START===\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    if n <= 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n        i += 6\n    return x\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):\n\n### Test\nassert candidate(7, 34, 12) == 34\nassert candidate(15, 8, 5) == 5\nassert candidate(3, 33, 5212) == 33\nassert candidate(1259, 3, 52) == 3\nassert candidate(7919, -1, 12) == -1",
    "timestamp": "2025-08-19T04:30:56.411949",
    "response_time": "3.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 151,
    "solution": "===START===\ndef double_the_difference(lst):\n    if len(lst) < 2:\n        return 0\n    max_val = max(lst)\n    min_val = min(lst)\n    return (max_val - min_val) ** 2\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef double_the_difference(lst):\n\n### Test\nassert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:30:58.233775",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 152,
    "solution": "===START===\ndef compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):\n\n### Test\nassert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-08-19T04:30:59.385972",
    "response_time": "1.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 153,
    "solution": "===START===\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):\n\n### Test\nassert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\nassert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\nassert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nassert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'",
    "timestamp": "2025-08-19T04:31:02.223510",
    "response_time": "2.83"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 154,
    "solution": "===START===\ndef cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_double = b + b\n    return any(a[i:i+len(b)] in b_double for i in range(len(a) - len(b) + 1))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):\n\n### Test\nassert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\nassert  candidate(\"yello\",\"ell\") == True , \"test #1\"\nassert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"",
    "timestamp": "2025-08-19T04:31:04.244249",
    "response_time": "2.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 155,
    "solution": "===START===\ndef even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):\n\n### Test\nassert candidate(7) == (0, 1)\nassert candidate(-78) == (1, 1)\nassert candidate(3452) == (2, 2)\nassert candidate(346211) == (3, 3)",
    "timestamp": "2025-08-19T04:31:06.743723",
    "response_time": "2.50"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 156,
    "solution": "===START===\ndef int_to_mini_roman(number):\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):\n\n### Test\nassert candidate(19) == 'xix'\nassert candidate(152) == 'clii'\nassert candidate(251) == 'ccli'\nassert candidate(426) == 'cdxxvi'\nassert candidate(500) == 'd'\nassert candidate(1) == 'i'\nassert candidate(4) == 'iv'",
    "timestamp": "2025-08-19T04:31:11.493096",
    "response_time": "4.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 157,
    "solution": "===START===\ndef right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the largest is last\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef right_angle_triangle(a, b, c):\n\n### Test\nassert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1, 2, 3) == False\nassert candidate(10, 6, 8) == True\nassert candidate(2, 2, 2) == False\nassert candidate(7, 24, 25) == True",
    "timestamp": "2025-08-19T04:31:13.692205",
    "response_time": "2.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 158,
    "solution": "===START===\ndef find_max(words):\n    max_unique_count = -1\n    result_word = None\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count or (unique_count == max_unique_count and (result_word is None or word < result_word)):\n            max_unique_count = unique_count\n            result_word = word\n    \n    return result_word\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):\n\n### Test\nassert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\nassert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\nassert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\nassert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\nassert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'",
    "timestamp": "2025-08-19T04:31:16.643812",
    "response_time": "2.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 159,
    "solution": "===START===\ndef eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(5, 6, 10) == [11, 4], \"Error\"\nassert candidate(4, 8, 9) == [12, 1], \"Error\"\nassert candidate(1, 10, 10) == [11, 0], \"Error\"",
    "timestamp": "2025-08-19T04:31:18.186429",
    "response_time": "1.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 160,
    "solution": "===START===\ndef do_algebra(operator, operand):\n    from operator import add, sub, mul, truediv, pow\n    \n    ops = {\n        '+': add,\n        '-': sub,\n        '*': mul,\n        '/': truediv,\n        '**': pow\n    }\n    \n    result = operand[0]\n    for i, op in enumerate(operator):\n        result = ops[op](result, operand[i + 1])\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):\n\n### Test\nassert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nassert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9",
    "timestamp": "2025-08-19T04:31:22.103591",
    "response_time": "3.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 161,
    "solution": "===START===\ndef solve(s):\n    has_letters = any(c.isalpha() for c in s)\n    if has_letters:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):\n\n### Test\nassert candidate(\"AsDf\") == \"aSdF\"\nassert candidate(\"1234\") == \"4321\"\nassert candidate(\"ab\") == \"AB\"\nassert candidate(\"#a@C\") == \"#A@c\"",
    "timestamp": "2025-08-19T04:31:24.363672",
    "response_time": "2.25"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 162,
    "solution": "===START===\nimport hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):\n\n### Test\nassert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nassert candidate('') == None",
    "timestamp": "2025-08-19T04:31:25.686389",
    "response_time": "1.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder32b_second_half_td",
    "dataset_row_id": 163,
    "solution": "===START===\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    even_digits = [i for i in range(a, b + 1) if i % 2 == 0]\n    return even_digits\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):\n\n### Test\nassert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\nassert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"",
    "timestamp": "2025-08-19T04:31:27.777249",
    "response_time": "2.09"
  }
]