[
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 0,
    "solution": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
    "timestamp": "2025-09-21T08:48:47.158651",
    "response_time": "2.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 1,
    "solution": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
    "timestamp": "2025-09-21T08:48:48.690263",
    "response_time": "1.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 2,
    "solution": "```python\n===START===\nfrom math import floor\n\ndef truncate_number(number: float) -> float:\n    return floor(number)\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
    "timestamp": "2025-09-21T08:48:49.283519",
    "response_time": "0.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 3,
    "solution": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
    "timestamp": "2025-09-21T08:48:50.147687",
    "response_time": "0.86"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 4,
    "solution": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
    "timestamp": "2025-09-21T08:48:51.174409",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 5,
    "solution": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
    "timestamp": "2025-09-21T08:48:52.154161",
    "response_time": "0.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 6,
    "solution": "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
    "timestamp": "2025-09-21T08:48:53.690303",
    "response_time": "1.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 7,
    "solution": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
    "timestamp": "2025-09-21T08:48:54.387721",
    "response_time": "0.70"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 8,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    \n    return (total_sum, total_product)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
    "timestamp": "2025-09-21T08:48:55.552034",
    "response_time": "1.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 9,
    "solution": "```python\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    max_so_far = numbers[0]\n    rolling_max_list = [max_so_far]\n    \n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_max_list.append(max_so_far)\n    \n    return rolling_max_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-09-21T08:48:56.832115",
    "response_time": "1.28"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 10,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    \n    # Function to check if a string is a palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix to make it a palindrome\n            return string + string[:i][::-1]\n    \n    # If no palindromic suffix is found, return the string with its reverse appended\n    return string + string[::-1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
    "timestamp": "2025-09-21T08:48:58.773590",
    "response_time": "1.94"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 11,
    "solution": "```python\ndef string_xor(a: str, b: str) -> str:\n    # Ensure both strings are of the same length by padding the shorter one with leading zeros\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    # Perform XOR operation bit by bit\n    result = []\n    for bit_a, bit_b in zip(a, b):\n        # XOR operation: 0 ^ 0 = 0, 0 ^ 1 = 1, 1 ^ 0 = 1, 1 ^ 1 = 0\n        xor_result = '0' if bit_a == bit_b else '1'\n        result.append(xor_result)\n    \n    # Join the list of bits into a single string and return\n    return ''.join(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
    "timestamp": "2025-09-21T08:49:01.080944",
    "response_time": "2.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 12,
    "solution": "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
    "timestamp": "2025-09-21T08:49:02.001369",
    "response_time": "0.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 13,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
    "timestamp": "2025-09-21T08:49:02.820606",
    "response_time": "0.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 14,
    "solution": "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
    "timestamp": "2025-09-21T08:49:03.623129",
    "response_time": "0.80"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 15,
    "solution": "```python\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
    "timestamp": "2025-09-21T08:49:04.204733",
    "response_time": "0.58"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 16,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ensure case insensitivity\n    lower_string = string.lower()\n    # Use a set to store distinct characters\n    distinct_chars = set(lower_string)\n    # Return the number of distinct characters\n    return len(distinct_chars)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
    "timestamp": "2025-09-21T08:49:05.382117",
    "response_time": "1.18"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 17,
    "solution": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Define a mapping of note characters to their corresponding beat values\n    note_to_beats = {\n        'A': 4,  # A whole note\n        'B': 3,  # B half note\n        'C': 2,  # C quarter note\n        'D': 1,  # D eighth note\n        'E': 0.5  # E sixteenth note\n    }\n    \n    # Split the input string into individual notes\n    notes = music_string.split()\n    \n    # Convert each note to its corresponding beat value\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
    "timestamp": "2025-09-21T08:49:07.530724",
    "response_time": "2.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 18,
    "solution": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start+len(substring)] == substring:\n            count += 1\n        start += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
    "timestamp": "2025-09-21T08:49:08.575633",
    "response_time": "1.04"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 19,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their corresponding integer values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Convert number words to their integer values\n    number_values = [number_map[word] for word in number_words]\n    \n    # Sort the integer values\n    sorted_values = sorted(number_values)\n    \n    # Convert the sorted integer values back to number words\n    sorted_words = [number_map[key] for key in sorted_values]\n    \n    # Join the sorted number words into a single string\n    sorted_numbers = ' '.join(sorted_words)\n    \n    return sorted_numbers\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
    "timestamp": "2025-09-21T08:49:11.525915",
    "response_time": "2.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 20,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n    \n    # Sort the list to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair and the smallest difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    smallest_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(sorted_numbers) - 1):\n        current_diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
    "timestamp": "2025-09-21T08:49:14.121317",
    "response_time": "2.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 21,
    "solution": "```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    if range_num == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_num) / range_num for x in numbers]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
    "timestamp": "2025-09-21T08:49:15.310152",
    "response_time": "1.19"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 22,
    "solution": "```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
    "timestamp": "2025-09-21T08:49:16.029746",
    "response_time": "0.72"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 23,
    "solution": "```python\ndef strlen(string: str) -> int:\n    return len(string)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
    "timestamp": "2025-09-21T08:49:16.463605",
    "response_time": "0.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 24,
    "solution": "```python\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
    "timestamp": "2025-09-21T08:49:17.361051",
    "response_time": "0.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 25,
    "solution": "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
    "timestamp": "2025-09-21T08:49:18.373200",
    "response_time": "1.01"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 26,
    "solution": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique_numbers = []\n    for number in numbers:\n        if number not in seen:\n            unique_numbers.append(number)\n            seen.add(number)\n    return unique_numbers\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-09-21T08:49:19.302869",
    "response_time": "0.93"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 27,
    "solution": "```python\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
    "timestamp": "2025-09-21T08:49:19.818916",
    "response_time": "0.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 28,
    "solution": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
    "timestamp": "2025-09-21T08:49:20.338277",
    "response_time": "0.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 29,
    "solution": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
    "timestamp": "2025-09-21T08:49:21.047287",
    "response_time": "0.71"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 30,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef get_positive(l: list) -> list:\n    return [x for x in l if x > 0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
    "timestamp": "2025-09-21T08:49:21.763273",
    "response_time": "0.72"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 31,
    "solution": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
    "timestamp": "2025-09-21T08:49:23.173039",
    "response_time": "1.41"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 32,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef poly(xs: list, x: float) -> float:\n    return sum(coef * x**i for i, coef in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Ensure the largest non-zero coefficient is positive\n    max_coeff = max(abs(coef) for coef in xs)\n    if max_coeff == 0:\n        raise ValueError(\"The polynomial has no non-zero coefficients.\")\n    \n    # Use the bisection method to find a zero\n    low, high = -100, 100\n    while high - low > 1e-10:\n        mid = (low + high) / 2\n        if poly(xs, low) * poly(xs, mid) <= 0:\n            high = mid\n        else:\n            low = mid\n    \n    return low\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
    "timestamp": "2025-09-21T08:49:25.962751",
    "response_time": "2.79"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 33,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = l[:]\n    \n    # Replace elements at indices divisible by 3 with the sorted elements\n    for i, value in enumerate(divisible_by_three):\n        result[i * 3] = value\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
    "timestamp": "2025-09-21T08:49:27.804664",
    "response_time": "1.84"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 34,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef unique(l: list) -> list:\n    return sorted(set(l))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
    "timestamp": "2025-09-21T08:49:28.349669",
    "response_time": "0.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 35,
    "solution": "```python\ndef max_element(l: list) -> int:\n    if not l:\n        raise ValueError(\"List is empty\")\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
    "timestamp": "2025-09-21T08:49:29.256057",
    "response_time": "0.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 36,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
    "timestamp": "2025-09-21T08:49:30.365667",
    "response_time": "1.11"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 37,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_even(l: list) -> list:\n    # Extract even-indexed elements\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted even-indexed elements\n    even_elements.sort()\n    \n    # Create a new list with sorted even-indexed elements and original odd-indexed elements\n    sorted_even_list = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_even_list.append(even_elements[even_index])\n            even_index += 1\n        else:\n            sorted_even_list.append(l[i])\n    \n    return sorted_even_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
    "timestamp": "2025-09-21T08:49:32.383326",
    "response_time": "2.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 38,
    "solution": "```python\n===START===\nimport string\n\ndef encode_cyclic(s: str) -> str:\n    # Create a mapping for each character to its cyclically shifted counterpart\n    shift_map = {char: chr((ord(char) - ord('a') + 3) % 26 + ord('a')) for char in string.ascii_lowercase}\n    \n    # Split the string into groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Encode each group\n    encoded_groups = [''.join(shift_map[char] for char in group) for group in groups]\n    \n    # Join the encoded groups back into a single string\n    return ''.join(encoded_groups)\n\ndef decode_cyclic(s: str) -> str:\n    # Create a mapping for each character to its cyclically shifted counterpart\n    shift_map = {char: chr((ord(char) - ord('a') - 3) % 26 + ord('a')) for char in string.ascii_lowercase}\n    \n    # Split the string into groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Decode each group\n    decoded_groups = [''.join(shift_map[char] for char in group) for group in groups]\n    \n    # Join the decoded groups back into a single string\n    return ''.join(decoded_groups)\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
    "timestamp": "2025-09-21T08:49:36.163321",
    "response_time": "3.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 39,
    "solution": "```python\nfrom math import sqrt\n\ndef prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib in fibonacci_generator():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n\n# ===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
    "timestamp": "2025-09-21T08:49:38.704076",
    "response_time": "2.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 40,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    for i in range(n):\n        seen = set()\n        for j in range(i + 1, n):\n            complement = - (l[i] + l[j])\n            if complement in seen:\n                return True\n            seen.add(l[j])\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
    "timestamp": "2025-09-21T08:49:39.991020",
    "response_time": "1.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 41,
    "solution": "```python\nfrom typing import List\n\ndef car_race_collision(n: int) -> int:\n    # Since each car from one direction will collide with each car from the opposite direction,\n    # the total number of collisions is simply the product of the number of cars in each direction.\n    return n * n\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):",
    "timestamp": "2025-09-21T08:49:41.014734",
    "response_time": "1.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 42,
    "solution": "```python\ndef incr_list(l: list) -> list:\n    return [x + 1 for x in l]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):",
    "timestamp": "2025-09-21T08:49:41.536856",
    "response_time": "0.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 43,
    "solution": "```python\n===START===\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):",
    "timestamp": "2025-09-21T08:49:42.313429",
    "response_time": "0.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 44,
    "solution": "```python\ndef change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):",
    "timestamp": "2025-09-21T08:49:43.582994",
    "response_time": "1.27"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 45,
    "solution": "```python\ndef triangle_area(a, h):\n    return 0.5 * a * h\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):",
    "timestamp": "2025-09-21T08:49:44.075940",
    "response_time": "0.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 46,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the base cases\n    fib4_values = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively\n    for i in range(4, n + 1):\n        next_value = sum(fib4_values)\n        fib4_values.pop(0)  # Remove the oldest value\n        fib4_values.append(next_value)  # Add the new value\n    \n    return fib4_values[-1]\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):",
    "timestamp": "2025-09-21T08:49:46.202342",
    "response_time": "2.13"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 47,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef median(l: list) -> float:\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    l.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2.0\n    else:\n        return l[mid]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):",
    "timestamp": "2025-09-21T08:49:47.568103",
    "response_time": "1.36"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 48,
    "solution": "```python\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):",
    "timestamp": "2025-09-21T08:49:48.155877",
    "response_time": "0.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 49,
    "solution": "```python\n===START===\ndef modp(n: int, p: int) -> int:\n    result = 1\n    base = n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):",
    "timestamp": "2025-09-21T08:49:49.387780",
    "response_time": "1.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 50,
    "solution": "```python\n===START===\nimport string\n\ndef encode_shift(s: str) -> str:\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[5:] + alphabet[:5]\n    translation_table = str.maketrans(alphabet, shifted_alphabet)\n    return s.translate(translation_table)\n\ndef decode_shift(s: str) -> str:\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[5:] + alphabet[:5]\n    translation_table = str.maketrans(shifted_alphabet, alphabet)\n    return s.translate(translation_table)\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):",
    "timestamp": "2025-09-21T08:49:51.254998",
    "response_time": "1.87"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 51,
    "solution": "```python\n===START===\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):",
    "timestamp": "2025-09-21T08:49:52.074010",
    "response_time": "0.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 52,
    "solution": "```python\ndef below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):",
    "timestamp": "2025-09-21T08:49:52.687873",
    "response_time": "0.61"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 53,
    "solution": "```python\ndef add(x: int, y: int) -> int:\n    return x + y\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):",
    "timestamp": "2025-09-21T08:49:53.177413",
    "response_time": "0.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 54,
    "solution": "```python\nfrom collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):",
    "timestamp": "2025-09-21T08:49:53.821122",
    "response_time": "0.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 55,
    "solution": "```python\n===START===\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):",
    "timestamp": "2025-09-21T08:49:55.055948",
    "response_time": "1.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 56,
    "solution": "```python\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == \"<\":\n            balance += 1\n        elif char == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-09-21T08:49:56.103971",
    "response_time": "1.05"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 57,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef monotonic(l: list) -> bool:\n    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):",
    "timestamp": "2025-09-21T08:49:57.398515",
    "response_time": "1.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 58,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef common(l1: list, l2: list) -> list:\n    # Convert lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and sort it\n    return sorted(list(common_elements))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):",
    "timestamp": "2025-09-21T08:49:58.785756",
    "response_time": "1.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 59,
    "solution": "```python\nfrom math import sqrt\n\ndef largest_prime_factor(n: int) -> int:\n    largest = -1\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    \n    # n must be odd at this point, so a skip of 2 (i.e., i = i + 2) can be used\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        # While i divides n, store i and divide n\n        while n % i == 0:\n            largest = i\n            n //= i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest = n\n    \n    return largest\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):",
    "timestamp": "2025-09-21T08:50:01.056619",
    "response_time": "2.27"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 60,
    "solution": "```python\ndef sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):",
    "timestamp": "2025-09-21T08:50:01.700423",
    "response_time": "0.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 61,
    "solution": "```python\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-09-21T08:50:02.826739",
    "response_time": "1.13"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 62,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef derivative(xs: list) -> list:\n    return [i * xs[i] for i in range(1, len(xs))]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):",
    "timestamp": "2025-09-21T08:50:03.503609",
    "response_time": "0.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 63,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the base cases\n    fibfib_values = [0, 0, 1]\n    \n    # Compute the fibfib sequence up to the n-th element\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n        fibfib_values.append(next_value)\n    \n    return fibfib_values[n]\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):",
    "timestamp": "2025-09-21T08:50:05.507754",
    "response_time": "2.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 64,
    "solution": "```python\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):",
    "timestamp": "2025-09-21T08:50:06.463168",
    "response_time": "0.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 65,
    "solution": "```python\ndef circular_shift(x, shift):\n    # Convert the integer to a string to easily manipulate digits\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return x_str[::-1]\n    \n    # Calculate the effective shift needed\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    \n    return shifted_str\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):",
    "timestamp": "2025-09-21T08:50:08.153003",
    "response_time": "1.69"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 66,
    "solution": "```python\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):",
    "timestamp": "2025-09-21T08:50:08.653740",
    "response_time": "0.50"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 67,
    "solution": "```python\ndef fruit_distribution(s, n):\n    # Split the string to extract numbers\n    parts = s.split()\n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):",
    "timestamp": "2025-09-21T08:50:09.911342",
    "response_time": "1.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 68,
    "solution": "```python\ndef pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = None\n    \n    # Iterate over the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    # Return the smallest even value if found, otherwise return None\n    return smallest_even if smallest_even is not None else None\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):",
    "timestamp": "2025-09-21T08:50:11.734024",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 69,
    "solution": "```python\n###START===\ndef search(lst):\n    # Implement the search function here\n    pass\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef search(lst):",
    "timestamp": "2025-09-21T08:50:12.244968",
    "response_time": "0.51"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 70,
    "solution": "```python\n### START ===\n\ndef strange_sort_list(lst):\n    # Sort the list based on the sum of the digits of each number\n    return sorted(lst, key=lambda x: sum(int(digit) for digit in str(abs(x))))\n\n### END ===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef strange_sort_list(lst):",
    "timestamp": "2025-09-21T08:50:13.102781",
    "response_time": "0.85"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 71,
    "solution": "```python\nimport math\n\ndef triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef triangle_area(a, b, c):",
    "timestamp": "2025-09-21T08:50:14.227344",
    "response_time": "1.12"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 72,
    "solution": "```python\n###START===\ndef will_it_fly(q, w):\n    # Calculate the total weight of the object\n    total_weight = q + w\n    \n    # Define the maximum weight the object can fly\n    max_weight = 100\n    \n    # Check if the object can fly\n    if total_weight <= max_weight:\n        return True\n    else:\n        return False\n\n# Example usage:\n# result = will_it_fly(50, 50)\n# print(result)  # Output: True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef will_it_fly(q,w):",
    "timestamp": "2025-09-21T08:50:15.748645",
    "response_time": "1.52"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 73,
    "solution": "```python\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):",
    "timestamp": "2025-09-21T08:50:16.646332",
    "response_time": "0.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 74,
    "solution": "```python\ndef total_match(lst1, lst2):\n    # Initialize a counter for matches\n    match_count = 0\n    \n    # Iterate over each element in lst1\n    for item in lst1:\n        # Check if the item is in lst2\n        if item in lst2:\n            # Increment the match counter\n            match_count += 1\n    \n    # Return the total number of matches\n    return match_count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef total_match(lst1, lst2):",
    "timestamp": "2025-09-21T08:50:17.979797",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 75,
    "solution": "```python\n===START===\nfrom math import sqrt\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    prime_factors = 0\n    for i in range(2, int(sqrt(a)) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                prime_factors += 1\n            if is_prime(a // i):\n                prime_factors += 1\n            if prime_factors > 3:\n                return False\n            if i * i == a // i:\n                prime_factors -= 1\n    \n    if is_prime(a):\n        prime_factors += 1\n    \n    return prime_factors == 3\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):",
    "timestamp": "2025-09-21T08:50:21.006380",
    "response_time": "3.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 76,
    "solution": "```python\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):",
    "timestamp": "2025-09-21T08:50:21.870900",
    "response_time": "0.86"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 77,
    "solution": "```python\n###START===\nimport math\n\ndef iscube(a):\n    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef iscube(a):",
    "timestamp": "2025-09-21T08:50:22.792236",
    "response_time": "0.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 78,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef hex_key(num):\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    prime_count = sum(1 for char in num if char in prime_hex_digits)\n    \n    return prime_count\n\n# Example usage:\n# print(hex_key(\"AB\"))  # Output: 1\n# print(hex_key(\"1077E\"))  # Output: 2\n# print(hex_key(\"ABED1A33\"))  # Output: 4\n# print(hex_key(\"123456789ABCDEF0\"))  # Output: 6\n# print(hex_key(\"2020\"))  # Output: 2\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):",
    "timestamp": "2025-09-21T08:50:25.357276",
    "response_time": "2.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 79,
    "solution": "```python\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    \n    return binary\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):",
    "timestamp": "2025-09-21T08:50:26.327581",
    "response_time": "0.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 80,
    "solution": "```python\ndef is_happy(s):\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking every 3 consecutive characters\n    for i in range(len(s) - 2):\n        # If any 3 consecutive characters are the same, return False\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    \n    # If all 3 consecutive characters are distinct, return True\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):",
    "timestamp": "2025-09-21T08:50:27.921501",
    "response_time": "1.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b",
    "dataset_row_id": 81,
    "solution": "```python\n===START===\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):",
    "timestamp": "2025-09-21T08:50:31.296203",
    "response_time": "3.37"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 82,
    "solution": "```python\n===START===\nimport math\n\ndef prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):",
    "timestamp": "2025-09-21T08:48:47.328808",
    "response_time": "2.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 83,
    "solution": "```python\ndef starts_one_ends(n):\n    if n == 1:\n        return 1  # Only '1' itself is a 1-digit number that starts and ends with 1\n    else:\n        # For n > 1, calculate the count\n        # There are 9 options for the first digit (2-9) and 10 options for each of the remaining n-2 digits\n        # However, we need to subtract the count of numbers that both start and end with 1\n        # There are 9 options for the middle digits (2-9) and 1 option for the last digit (1)\n        return 2 * (9 * (10 ** (n - 2))) - (9 * (10 ** (n - 3)))\n\n# Example usage:\n# print(starts_one_ends(1))  # Output: 1\n# print(starts_one_ends(2))  # Output: 18\n# print(starts_one_ends(3))  # Output: 180\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):",
    "timestamp": "2025-09-21T08:48:50.152713",
    "response_time": "2.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 84,
    "solution": "```python\ndef solve(N):\n    # Convert the number to a string to iterate over each digit\n    digits = str(N)\n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in digits)\n    # Convert the sum to binary and return it\n    return bin(digit_sum)[2:]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):",
    "timestamp": "2025-09-21T08:48:51.233012",
    "response_time": "1.08"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 85,
    "solution": "```python\ndef add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):",
    "timestamp": "2025-09-21T08:48:52.039918",
    "response_time": "0.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 86,
    "solution": "```python\ndef anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Define a helper function to sort characters in a word\n    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    # Apply the sort_word function to each word in the list\n    sorted_words = [sort_word(word) for word in words]\n    \n    # Join the sorted words back into a single string with spaces\n    return ' '.join(sorted_words)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):",
    "timestamp": "2025-09-21T08:48:53.605093",
    "response_time": "1.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 87,
    "solution": "```python\ndef get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    # Sort by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):",
    "timestamp": "2025-09-21T08:48:54.943097",
    "response_time": "1.34"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 88,
    "solution": "```python\ndef sort_array(array):\n    if not array:\n        return array\n    \n    # Calculate the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Determine the sorting order based on the sum\n    if sum_first_last % 2 == 0:\n        # Sort in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # Sort in ascending order\n        sorted_array = sorted(array)\n    \n    return sorted_array\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):",
    "timestamp": "2025-09-21T08:48:56.431464",
    "response_time": "1.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 89,
    "solution": "```python\ndef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2  # 4 places\n            if char.islower():\n                index = (alphabet.index(char) + shift) % 26\n                encrypted += alphabet[index]\n            else:\n                index = (alphabet.index(char.lower()) + shift) % 26\n                encrypted += alphabet[index].upper()\n        else:\n            encrypted += char\n    return encrypted\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):",
    "timestamp": "2025-09-21T08:48:58.008163",
    "response_time": "1.58"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 90,
    "solution": "```python\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Use a set to find unique elements\n    unique_elements = set(lst)\n    \n    # If there are less than 2 unique elements, return None\n    if len(unique_elements) < 2:\n        return None\n    \n    # Convert the set back to a sorted list\n    sorted_unique_elements = sorted(unique_elements)\n    \n    # Return the second smallest element\n    return sorted_unique_elements[1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):",
    "timestamp": "2025-09-21T08:48:59.480692",
    "response_time": "1.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 91,
    "solution": "```python\n===START===\nimport re\n\ndef is_bored(S):\n    # Split the input string into sentences using regex\n    sentences = re.split(r'[.?!]\\s*', S)\n    \n    # Count the number of sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    \n    return boredom_count\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):",
    "timestamp": "2025-09-21T08:49:00.773028",
    "response_time": "1.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 92,
    "solution": "```python\ndef any_int(x, y, z):\n    return any(isinstance(i, int) for i in [x, y, z])\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef any_int(x, y, z):",
    "timestamp": "2025-09-21T08:49:01.437875",
    "response_time": "0.66"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 93,
    "solution": "```python\n===START===\nimport string\n\ndef encode(message):\n    # Define vowels and their corresponding replacements\n    vowels = 'aeiouAEIOU'\n    replacements = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Swap case and replace vowels\n    encoded_message = ''.join(\n        replacements.get(char, char.swapcase()) if char in vowels else char\n        for char in message\n    )\n    \n    return encoded_message\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):",
    "timestamp": "2025-09-21T08:49:03.415730",
    "response_time": "1.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 94,
    "solution": "```python\nfrom math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):",
    "timestamp": "2025-09-21T08:49:05.735365",
    "response_time": "2.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 95,
    "solution": "```python\n===START===\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_lower = all(key.islower() for key in dict)\n    all_upper = all(key.isupper() for key in dict)\n    \n    return all_lower or all_upper\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):",
    "timestamp": "2025-09-21T08:49:06.682623",
    "response_time": "0.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 96,
    "solution": "```python\ndef count_up_to(n):\n    if n <= 2:\n        return []\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):",
    "timestamp": "2025-09-21T08:49:08.662190",
    "response_time": "1.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 97,
    "solution": "```python\ndef multiply(a, b):\n    # Get the unit digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):",
    "timestamp": "2025-09-21T08:49:09.655728",
    "response_time": "0.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 98,
    "solution": "```python\ndef count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):",
    "timestamp": "2025-09-21T08:49:10.480651",
    "response_time": "0.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 99,
    "solution": "```python\ndef closest_integer(value):\n    # Convert the input value to an integer\n    integer_value = int(value)\n    \n    # Calculate the floor and ceiling of the integer value\n    floor_value = integer_value - 1\n    ceiling_value = integer_value + 1\n    \n    # Determine which of the two values is closer to the original value\n    if abs(value - floor_value) < abs(value - ceiling_value):\n        return floor_value\n    else:\n        return ceiling_value\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef closest_integer(value):",
    "timestamp": "2025-09-21T08:49:11.938087",
    "response_time": "1.46"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 100,
    "solution": "```python\ndef make_a_pile(n):\n    levels = []\n    current_stones = n\n    for _ in range(n):\n        levels.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return levels\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):",
    "timestamp": "2025-09-21T08:49:13.060454",
    "response_time": "1.12"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 101,
    "solution": "```python\ndef words_string(s):\n    # Split the string by commas or spaces\n    words = s.split(', ')\n    return words\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):",
    "timestamp": "2025-09-21T08:49:13.640221",
    "response_time": "0.58"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 102,
    "solution": "```python\ndef choose_num(x, y):\n    # Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Start from the largest number in the range and move downwards\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):",
    "timestamp": "2025-09-21T08:49:15.032932",
    "response_time": "1.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 103,
    "solution": "```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers from n to m\n    count = m - n + 1\n    \n    # Calculate the average\n    average = total_sum / count\n    \n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    \n    # Convert the rounded average to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):",
    "timestamp": "2025-09-21T08:49:16.777444",
    "response_time": "1.74"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 104,
    "solution": "```python\ndef unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):",
    "timestamp": "2025-09-21T08:49:17.975392",
    "response_time": "1.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 105,
    "solution": "```python\n===START===\nfrom typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    # Filter numbers between 1 and 9\n    filtered_numbers = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered numbers in reverse order\n    sorted_numbers = sorted(filtered_numbers, reverse=True)\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each number with its name\n    result = [number_names[num] for num in sorted_numbers]\n    \n    return result\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):",
    "timestamp": "2025-09-21T08:49:20.417118",
    "response_time": "2.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 106,
    "solution": "```python\ndef f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    def sum_to_n(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):",
    "timestamp": "2025-09-21T08:49:22.153753",
    "response_time": "1.74"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 107,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):",
    "timestamp": "2025-09-21T08:49:23.709024",
    "response_time": "1.55"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 108,
    "solution": "```python\ndef count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            n = -n\n            sign = -1\n        else:\n            sign = 1\n        return sign * sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):",
    "timestamp": "2025-09-21T08:49:24.874421",
    "response_time": "1.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 109,
    "solution": "```python\ndef move_one_ball(arr):\n    # Find the index of the first element that is greater than the next element\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform the right shift operation\n            arr = arr[i + 1:] + arr[:i + 1]\n            return True\n    # If no such element is found, the array is already sorted\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):",
    "timestamp": "2025-09-21T08:49:26.266006",
    "response_time": "1.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 110,
    "solution": "```python\ndef exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):",
    "timestamp": "2025-09-21T08:49:28.051278",
    "response_time": "1.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 111,
    "solution": "```python\nfrom collections import Counter\n\ndef histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum occurrence count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Collect all letters with the maximum occurrence count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):",
    "timestamp": "2025-09-21T08:49:29.566613",
    "response_time": "1.51"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 112,
    "solution": "```python\ndef reverse_delete(s, c):\n    # Create a set of characters to be deleted\n    delete_set = set(c)\n    \n    # Filter out characters in s that are in the delete_set\n    filtered_s = ''.join(char for char in s if char not in delete_set)\n    \n    # Check if the filtered string is a palindrome\n    is_palindrome = filtered_s == filtered_s[::-1]\n    \n    # Return the result as a tuple\n    return (filtered_s, is_palindrome)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):",
    "timestamp": "2025-09-21T08:49:31.082251",
    "response_time": "1.51"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 113,
    "solution": "```python\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements in the string {odd_count} of the input.\")\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):",
    "timestamp": "2025-09-21T08:49:32.209883",
    "response_time": "1.13"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 114,
    "solution": "```python\nfrom typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):",
    "timestamp": "2025-09-21T08:49:33.394914",
    "response_time": "1.18"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 115,
    "solution": "```python\ndef max_fill(grid, capacity):\n    total_buckets = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units > 0:\n            total_buckets += -(-water_units // capacity)  # Ceiling division\n    return total_buckets\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):",
    "timestamp": "2025-09-21T08:49:34.338762",
    "response_time": "0.94"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 116,
    "solution": "```python\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    # Define a helper function to count the number of ones in the binary representation of a number\n    def count_ones(n: int) -> int:\n        return bin(n).count('1')\n    \n    # Sort the array using a custom key\n    # The key is a tuple (number of ones, decimal value)\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):",
    "timestamp": "2025-09-21T08:49:35.894830",
    "response_time": "1.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 117,
    "solution": "```python\n===START===\nimport re\n\ndef select_words(s, n):\n    # Define a regular expression pattern to match words\n    word_pattern = r'\\b\\w+\\b'\n    \n    # Find all words in the string\n    words = re.findall(word_pattern, s)\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Define a set of vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Iterate over each word\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):",
    "timestamp": "2025-09-21T08:49:38.339288",
    "response_time": "2.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 118,
    "solution": "```python\n###START===\nimport string\n\ndef get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set(string.ascii_letters) - vowels\n    closest_vowel = None\n    max_distance = float('-inf')\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i-1] in consonants and word[i+1] in vowels:\n            distance = i - (len(word) - 1)\n            if distance > max_distance:\n                max_distance = distance\n                closest_vowel = word[i]\n    \n    return closest_vowel\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):",
    "timestamp": "2025-09-21T08:49:40.252103",
    "response_time": "1.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 119,
    "solution": "```python\ndef match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef match_parens(lst):",
    "timestamp": "2025-09-21T08:49:41.167900",
    "response_time": "0.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 120,
    "solution": "```python\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return the first k elements from the sorted array\n    return sorted_arr[:k]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):",
    "timestamp": "2025-09-21T08:49:42.141036",
    "response_time": "0.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 121,
    "solution": "```python\ndef solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):",
    "timestamp": "2025-09-21T08:49:42.857908",
    "response_time": "0.72"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 122,
    "solution": "```python\ndef add_elements(arr, k):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add the element to the total sum\n            total_sum += arr[i]\n    \n    # Return the total sum\n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):",
    "timestamp": "2025-09-21T08:49:44.277391",
    "response_time": "1.42"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 123,
    "solution": "```python\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # The sequence always ends with 1\n    odd_numbers.sort()\n    return odd_numbers\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):",
    "timestamp": "2025-09-21T08:49:45.552235",
    "response_time": "1.27"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 124,
    "solution": "```python\nfrom datetime import datetime\n\ndef valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Define the date format\n    date_format = \"%m-%d-%Y\"\n    \n    try:\n        # Try to parse the date string\n        parsed_date = datetime.strptime(date, date_format)\n        \n        # Extract month and day from the parsed date\n        month = parsed_date.month\n        day = parsed_date.day\n        \n        # Check the number of days in the month\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        \n        # If all checks pass, the date is valid\n        return True\n    \n    except ValueError:\n        # If parsing fails, the date is invalid\n        return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):",
    "timestamp": "2025-09-21T08:49:48.466001",
    "response_time": "2.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 125,
    "solution": "```python\ndef split_words(txt):\n    return txt.split()\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef split_words(txt):",
    "timestamp": "2025-09-21T08:49:48.865754",
    "response_time": "0.40"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 126,
    "solution": "```python\ndef is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef is_sorted(lst):",
    "timestamp": "2025-09-21T08:49:49.678293",
    "response_time": "0.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 127,
    "solution": "```python\n===START===\nfrom math import sqrt\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(sqrt(intersection_length)) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):",
    "timestamp": "2025-09-21T08:49:52.074459",
    "response_time": "2.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 128,
    "solution": "```python\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num == 0:\n            product_of_signs = 0\n            break\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * product_of_signs\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):",
    "timestamp": "2025-09-21T08:49:53.519532",
    "response_time": "1.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 129,
    "solution": "```python\ndef minPath(grid, k):\n    N = len(grid)\n    # Initialize the DP table with infinity\n    dp = [[float('inf')] * N for _ in range(N)]\n    \n    # Base case: the first cell\n    dp[0][0] = grid[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    \n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    # The minimum path sum from (0, 0) to (N-1, N-1)\n    return dp[N-1][N-1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):",
    "timestamp": "2025-09-21T08:49:56.584390",
    "response_time": "3.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 130,
    "solution": "```python\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    \n    # Initialize the list with the first three numbers of the Tribonacci sequence\n    tribonacci = [1, 3, 2]\n    \n    # Calculate the rest of the sequence up to n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):",
    "timestamp": "2025-09-21T08:49:58.766368",
    "response_time": "2.18"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 131,
    "solution": "```python\ndef digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):",
    "timestamp": "2025-09-21T08:49:59.958163",
    "response_time": "1.19"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 132,
    "solution": "```python\n### START ===\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n### END ===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef is_nested(string):",
    "timestamp": "2025-09-21T08:50:00.982094",
    "response_time": "1.02"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 133,
    "solution": "```python\nfrom math import ceil\n\ndef sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [ceil(num) for num in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum(num ** 2 for num in rounded_lst)\n    \n    return sum_of_squares\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-09-21T08:50:02.142503",
    "response_time": "1.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 134,
    "solution": "```python\n===START===\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha()\n\n# Example usage:\n# print(check_if_last_char_is_a_letter(\"hello\"))  # Output: True\n# print(check_if_last_char_is_a_letter(\"world!\"))  # Output: False\n# print(check_if_last_char_is_a_letter(\"\"))  # Output: False\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef check_if_last_char_is_a_letter(txt):",
    "timestamp": "2025-09-21T08:50:03.471969",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 135,
    "solution": "```python\ndef can_arrange(arr):\n    # Initialize the largest index to -1\n    largest_index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i - 1]:\n            # Update the largest index if the current index is larger\n            largest_index = i\n    \n    # Return the largest index found, or -1 if no such element exists\n    return largest_index\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):",
    "timestamp": "2025-09-21T08:50:05.112263",
    "response_time": "1.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 136,
    "solution": "```python\ndef largest_smallest_integers(lst):\n    if not lst:\n        return None, None  # Return None for both if the list is empty\n\n    largest = lst[0]\n    smallest = lst[0]\n\n    for num in lst:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest, smallest\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef largest_smallest_integers(lst):",
    "timestamp": "2025-09-21T08:50:06.410728",
    "response_time": "1.30"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 137,
    "solution": "```python\n===START===\nimport re\n\ndef compare_one(a, b):\n    # Helper function to convert string to float, handling both . and ,\n    def convert_to_float(value):\n        if isinstance(value, str):\n            # Replace comma with dot for conversion\n            value = re.sub(r',', '.', value)\n            return float(value)\n        return value\n\n    # Convert both inputs to floats for comparison\n    float_a = convert_to_float(a)\n    float_b = convert_to_float(b)\n\n    # Compare the float values\n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        return None\n\n# Example usage:\n# print(compare_one(3, 4.5))  # Output: 4.5\n# print(compare_one(\"3.14\", \"3,14\"))  # Output: 3.14\n# print(compare_one(\"5\", 5))  # Output: None\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):",
    "timestamp": "2025-09-21T08:50:09.143577",
    "response_time": "2.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 138,
    "solution": "```python\ndef is_equal_to_sum_even(n):\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    \n    # If n is even and greater than or equal to 8, it can be written as the sum of 4 even numbers.\n    # This is because we can always find 4 even numbers that sum up to n.\n    # For example, if n is 10, we can use 2+2+2+4.\n    return n % 2 == 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):",
    "timestamp": "2025-09-21T08:50:11.119522",
    "response_time": "1.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 139,
    "solution": "```python\n===START===\nimport math\n\ndef special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):",
    "timestamp": "2025-09-21T08:50:12.177888",
    "response_time": "1.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 140,
    "solution": "```python\ndef fix_spaces(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Initialize an empty list to store the fixed words\n    fixed_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consecutive spaces\n        space_count = 0\n        \n        # Iterate over each character in the word\n        for char in word:\n            if char == ' ':\n                space_count += 1\n            else:\n                # If there are more than 2 consecutive spaces, replace them with '-'\n                if space_count > 2:\n                    fixed_words.append('-')\n                else:\n                    # Otherwise, replace the spaces with underscores\n                    fixed_words.extend(['_'] * space_count)\n                # Reset the space count\n                space_count = 0\n        \n        # If there are more than 2 consecutive spaces at the end of the word\n        if space_count > 2:\n            fixed_words.append('-')\n        else:\n            # Otherwise, replace the spaces with underscores\n            fixed_words.extend(['_'] * space_count)\n    \n    # Join the fixed words into a single string\n    return ''.join(fixed_words)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):",
    "timestamp": "2025-09-21T08:50:15.348681",
    "response_time": "3.17"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 141,
    "solution": "```python\n===START===\nimport re\n\ndef file_name_check(file_name):\n    # Regular expression to match the file name criteria\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\.[a-zA-Z0-9]{0,})?$'\n    \n    # Check if the file name matches the pattern\n    if not re.match(pattern, file_name):\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1) if '.' in file_name else (file_name, '')\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):",
    "timestamp": "2025-09-21T08:50:18.063381",
    "response_time": "2.71"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 142,
    "solution": "```python\ndef sum_squares(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-09-21T08:50:19.095607",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 143,
    "solution": "```python\nfrom math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):",
    "timestamp": "2025-09-21T08:50:21.025136",
    "response_time": "1.93"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 144,
    "solution": "```python\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    # Convert the string representations of fractions to Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Multiply the two fractions\n    result = fraction_x * fraction_n\n    \n    # Check if the result is a whole number\n    return result.denominator == 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):",
    "timestamp": "2025-09-21T08:50:22.174412",
    "response_time": "1.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 145,
    "solution": "```python\ndef order_by_points(nums):\n    # Helper function to calculate the sum of digits of a number\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Sort the list based on the sum of digits, and then by index\n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n    return sorted_nums\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):",
    "timestamp": "2025-09-21T08:50:23.420960",
    "response_time": "1.25"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 146,
    "solution": "```python\ndef specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):",
    "timestamp": "2025-09-21T08:50:24.841023",
    "response_time": "1.41"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 147,
    "solution": "```python\ndef get_max_triples(n):\n    # Initialize the array a with the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the occurrences of each remainder when divided by 3\n    remainder_counts = [0, 0, 0]\n    for num in a:\n        remainder_counts[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # We need to consider the combinations of remainders that sum to 0 modulo 3\n    # (0, 0, 0), (1, 1, 1), (2, 2, 2), (0, 1, 2)\n    count = 0\n    count += remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6\n    count += remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6\n    count += remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6\n    count += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):",
    "timestamp": "2025-09-21T08:50:28.471924",
    "response_time": "3.63"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 148,
    "solution": "```python\n### START ===\n\ndef bf(planet1, planet2):\n    # Assuming planet1 and planet2 are strings representing planets\n    # For simplicity, let's assume the function returns a string indicating the relationship\n    if planet1 == planet2:\n        return \"The planets are the same.\"\n    elif planet1 == \"Earth\" and planet2 == \"Mars\":\n        return \"Earth and Mars are close neighbors.\"\n    elif planet1 == \"Mars\" and planet2 == \"Earth\":\n        return \"Earth and Mars are close neighbors.\"\n    elif planet1 == \"Earth\" and planet2 == \"Jupiter\":\n        return \"Earth is much closer to the Sun than Jupiter.\"\n    elif planet1 == \"Jupiter\" and planet2 == \"Earth\":\n        return \"Earth is much closer to the Sun than Jupiter.\"\n    else:\n        return \"The relationship between the planets is not specified.\"\n\n### END ===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef bf(planet1, planet2):",
    "timestamp": "2025-09-21T08:50:31.088129",
    "response_time": "2.61"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 149,
    "solution": "```python\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, then alphabetically\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    \n    return even_length_strings\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):",
    "timestamp": "2025-09-21T08:50:32.176746",
    "response_time": "1.09"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 150,
    "solution": "```python\n###START===\nimport math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    if n <= 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n        i += 6\n    return x\n\n# Example usage:\n# result = x_or_y(7, 'prime', 'not prime')\n# print(result)  # Output: 'prime'\n# result = x_or_y(10, 'prime', 'not prime')\n# print(result)  # Output: 'not prime'\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):",
    "timestamp": "2025-09-21T08:50:34.395825",
    "response_time": "2.22"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 151,
    "solution": "```python\ndef double_the_difference(lst):\n    if not lst:\n        return 0\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    return 2 * (max_val - min_val)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef double_the_difference(lst):",
    "timestamp": "2025-09-21T08:50:35.285814",
    "response_time": "0.89"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 152,
    "solution": "```python\ndef compare(game, guess):\n    # Calculate the absolute differences between each pair of scores and guesses\n    differences = [abs(score - guess) for score, guess in zip(game, guess)]\n    return differences\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):",
    "timestamp": "2025-09-21T08:50:36.102537",
    "response_time": "0.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 153,
    "solution": "```python\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        uppercase_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        return uppercase_count - lowercase_count\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):",
    "timestamp": "2025-09-21T08:50:37.742515",
    "response_time": "1.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 154,
    "solution": "```python\ndef cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    # Create a doubled version of b\n    doubled_b = b + b\n    \n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        rotated_b = doubled_b[i:i+len(b)]\n        if rotated_b in a:\n            return True\n    \n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):",
    "timestamp": "2025-09-21T08:50:39.007476",
    "response_time": "1.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 155,
    "solution": "```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):",
    "timestamp": "2025-09-21T08:50:40.057015",
    "response_time": "1.05"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 156,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef int_to_mini_roman(number: int) -> str:\n    # Define the mapping of integers to their corresponding Roman numeral symbols\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    # Initialize an empty string to store the Roman numeral representation\n    roman = ''\n    \n    # Iterate over the mapping of integers to Roman numeral symbols\n    for value, symbol in roman_numerals:\n        # Determine how many times the current Roman numeral symbol fits into the number\n        while number >= value:\n            # Append the symbol to the Roman numeral representation\n            roman += symbol\n            # Subtract the value from the number\n            number -= value\n    \n    return roman\n\n# Example usage:\n# print(int_to_mini_roman(1994))  # Output: mcmxciv\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):",
    "timestamp": "2025-09-21T08:50:43.466208",
    "response_time": "3.41"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 157,
    "solution": "```python\nimport math\n\ndef right_angle_triangle(a, b, c):\n    # Check if the given sides can form a right-angled triangle\n    if math.isclose(a**2 + b**2, c**2, rel_tol=1e-9) or math.isclose(a**2 + c**2, b**2, rel_tol=1e-9) or math.isclose(b**2 + c**2, a**2, rel_tol=1e-9):\n        return True\n    else:\n        return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n### Signature\ndef right_angle_triangle(a, b, c):",
    "timestamp": "2025-09-21T08:50:45.053145",
    "response_time": "1.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 158,
    "solution": "```python\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word):\n            max_unique_count = unique_count\n            max_word = word\n    \n    return max_word\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):",
    "timestamp": "2025-09-21T08:50:46.444326",
    "response_time": "1.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 159,
    "solution": "```python\ndef eat(number, need, remaining):\n    # Calculate the total number of carrots eaten\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):",
    "timestamp": "2025-09-21T08:50:47.474982",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 160,
    "solution": "```python\nfrom operator import add, sub, mul, truediv\n\ndef do_algebra(operator, operand):\n    # Create a dictionary to map operator strings to actual functions\n    op_map = {\n        '+': add,\n        '-': sub,\n        '*': mul,\n        '/': truediv\n    }\n    \n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate over the operator and operand lists\n    for i, op in enumerate(operator):\n        # Get the corresponding function from the dictionary\n        func = op_map[op]\n        # Apply the function to the current result and the next operand\n        result = func(result, operand[i + 1])\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):",
    "timestamp": "2025-09-21T08:50:49.450985",
    "response_time": "1.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 161,
    "solution": "```python\ndef solve(s):\n    has_letters = any(c.isalpha() for c in s)\n    if has_letters:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):",
    "timestamp": "2025-09-21T08:50:50.440486",
    "response_time": "0.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 162,
    "solution": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):",
    "timestamp": "2025-09-21T08:50:51.361070",
    "response_time": "0.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder3b_second_half",
    "dataset_row_id": 163,
    "solution": "```python\ndef generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store even digits\n    even_digits = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for num in range(a, b + 1):\n        # Check if the number is even\n        if num % 2 == 0:\n            even_digits.append(num)\n    \n    # Return the list of even digits\n    return even_digits\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):",
    "timestamp": "2025-09-21T08:50:53.102099",
    "response_time": "1.74"
  }
]